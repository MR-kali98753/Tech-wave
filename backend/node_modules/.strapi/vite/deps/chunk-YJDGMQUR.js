import {
  AuthProvider,
  ConfigurationProvider,
  ForwardRef$F,
  ForwardRef$J,
  GuidedTourProvider,
  LANGUAGE_LOCAL_STORAGE_KEY,
  LanguageProvider,
  NotificationsProvider,
  Page,
  RBAC,
  StrapiAppProvider,
  THEME_LOCAL_STORAGE_KEY,
  Theme,
  TrackingProvider,
  createContext,
  getIn,
  getStoredToken,
  login,
  logout,
  reducer$1,
  require_baseMerge,
  require_baseSet,
  require_createAssigner,
  require_isEqual,
  setIn,
  setLocale,
  useAPIErrorHandler,
  useAppInfo,
  useAuth,
  useConfiguration,
  useForgotPasswordMutation,
  useGetRegistrationInfoQuery,
  useGuidedTour,
  useNotification,
  useQueryParams,
  useRegisterAdminMutation,
  useRegisterUserMutation,
  useResetPasswordMutation,
  useTracking,
  useTypedDispatch,
  useTypedSelector,
  useTypedStore
} from "./chunk-SOWZ3BSQ.js";
import {
  L,
  Provider_default,
  adminApi,
  combineReducers,
  configureStore,
  createAbsoluteUrl,
  fn,
  getFetchClient,
  isBaseQueryError,
  isRejected,
  require_flatRest,
  require_hoist_non_react_statics_cjs,
  require_isPlainObject,
  require_lib,
  require_toNumber,
  useInitQuery,
  useIntl
} from "./chunk-X6CNA2VM.js";
import {
  require_client
} from "./chunk-2JZ35VNI.js";
import {
  Link,
  NavLink,
  Navigate,
  Outlet,
  RouterProvider,
  createBrowserRouter,
  createMemoryRouter,
  useBlocker,
  useLocation,
  useMatch,
  useNavigate,
  useNavigationType,
  useRouteError
} from "./chunk-XW43NPUH.js";
import {
  ValidationError,
  cloneDeep_default,
  clone_default,
  create,
  create3 as create2,
  create4 as create3,
  create5 as create4,
  create6 as create5,
  isPlainObject_default,
  require_camelCase,
  toPath_default
} from "./chunk-PRKWFI3M.js";
import {
  Alert,
  Box,
  Button,
  CheckboxImpl,
  DatePicker$1,
  DateTimePicker,
  Dialog,
  Dots,
  EmptyStateLayout,
  Field,
  Flex,
  Grid,
  IconButton,
  JSONInput,
  Link as Link2,
  LinkButton,
  Loader,
  Main,
  NextLink,
  NumberInput,
  PageLink,
  Pagination,
  Popover,
  Portal$1,
  PreviousLink,
  SearchForm,
  Searchbar,
  SingleSelect,
  SingleSelectOption,
  Table,
  Tag,
  Tbody,
  Td,
  TextInput,
  Textarea,
  Th,
  Thead,
  TimePicker$1,
  Toggle,
  TooltipImpl,
  Tr,
  Typography,
  VisuallyHidden,
  _extends,
  darkTheme,
  lightTheme,
  require_arrayMap,
  require_baseClone,
  require_baseGet,
  require_baseSlice,
  require_castPath,
  require_copyObject,
  require_getAllKeysIn,
  require_hasIn,
  require_isFunction,
  require_isObject,
  require_root,
  require_toKey,
  useCallbackRef,
  useComposedRefs
} from "./chunk-LMV7GBLX.js";
import {
  require_react_dom
} from "./chunk-IYHTQODQ.js";
import {
  ForwardRef$1d,
  ForwardRef$3,
  ForwardRef$3$,
  ForwardRef$3L,
  ForwardRef$3d,
  ForwardRef$3v,
  ForwardRef$3x,
  ForwardRef$4N,
  ForwardRef$55,
  ForwardRef$57,
  ForwardRef$V
} from "./chunk-UGDAK7KS.js";
import {
  require_jsx_runtime
} from "./chunk-QBLEIVF7.js";
import {
  dt
} from "./chunk-5JSVERDU.js";
import {
  require_react
} from "./chunk-BCGHH3YY.js";
import {
  __commonJS,
  __toESM
} from "./chunk-WGAPYIUP.js";

// node_modules/invariant/browser.js
var require_browser = __commonJS({
  "node_modules/invariant/browser.js"(exports, module2) {
    "use strict";
    var invariant2 = function(condition, format, a, b, c, d, e, f) {
      if (true) {
        if (format === void 0) {
          throw new Error("invariant requires an error message argument");
        }
      }
      if (!condition) {
        var error;
        if (format === void 0) {
          error = new Error(
            "Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings."
          );
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(
            format.replace(/%s/g, function() {
              return args[argIndex++];
            })
          );
          error.name = "Invariant Violation";
        }
        error.framesToPop = 1;
        throw error;
      }
    };
    module2.exports = invariant2;
  }
});

// node_modules/lodash/merge.js
var require_merge = __commonJS({
  "node_modules/lodash/merge.js"(exports, module2) {
    var baseMerge = require_baseMerge();
    var createAssigner = require_createAssigner();
    var merge2 = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });
    module2.exports = merge2;
  }
});

// node_modules/lodash/_basePickBy.js
var require_basePickBy = __commonJS({
  "node_modules/lodash/_basePickBy.js"(exports, module2) {
    var baseGet = require_baseGet();
    var baseSet = require_baseSet();
    var castPath = require_castPath();
    function basePickBy(object, paths, predicate) {
      var index = -1, length = paths.length, result = {};
      while (++index < length) {
        var path = paths[index], value = baseGet(object, path);
        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }
    module2.exports = basePickBy;
  }
});

// node_modules/lodash/_basePick.js
var require_basePick = __commonJS({
  "node_modules/lodash/_basePick.js"(exports, module2) {
    var basePickBy = require_basePickBy();
    var hasIn = require_hasIn();
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }
    module2.exports = basePick;
  }
});

// node_modules/lodash/pick.js
var require_pick = __commonJS({
  "node_modules/lodash/pick.js"(exports, module2) {
    var basePick = require_basePick();
    var flatRest = require_flatRest();
    var pick2 = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });
    module2.exports = pick2;
  }
});

// node_modules/lodash/last.js
var require_last = __commonJS({
  "node_modules/lodash/last.js"(exports, module2) {
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : void 0;
    }
    module2.exports = last;
  }
});

// node_modules/lodash/_parent.js
var require_parent = __commonJS({
  "node_modules/lodash/_parent.js"(exports, module2) {
    var baseGet = require_baseGet();
    var baseSlice = require_baseSlice();
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }
    module2.exports = parent;
  }
});

// node_modules/lodash/_baseUnset.js
var require_baseUnset = __commonJS({
  "node_modules/lodash/_baseUnset.js"(exports, module2) {
    var castPath = require_castPath();
    var last = require_last();
    var parent = require_parent();
    var toKey = require_toKey();
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }
    module2.exports = baseUnset;
  }
});

// node_modules/lodash/_customOmitClone.js
var require_customOmitClone = __commonJS({
  "node_modules/lodash/_customOmitClone.js"(exports, module2) {
    var isPlainObject2 = require_isPlainObject();
    function customOmitClone(value) {
      return isPlainObject2(value) ? void 0 : value;
    }
    module2.exports = customOmitClone;
  }
});

// node_modules/lodash/omit.js
var require_omit = __commonJS({
  "node_modules/lodash/omit.js"(exports, module2) {
    var arrayMap = require_arrayMap();
    var baseClone = require_baseClone();
    var baseUnset = require_baseUnset();
    var castPath = require_castPath();
    var copyObject = require_copyObject();
    var customOmitClone = require_customOmitClone();
    var flatRest = require_flatRest();
    var getAllKeysIn = require_getAllKeysIn();
    var CLONE_DEEP_FLAG = 1;
    var CLONE_FLAT_FLAG = 2;
    var CLONE_SYMBOLS_FLAG = 4;
    var omit2 = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });
    module2.exports = omit2;
  }
});

// node_modules/react-fast-compare/index.js
var require_react_fast_compare = __commonJS({
  "node_modules/react-fast-compare/index.js"(exports, module2) {
    "use strict";
    var isArray = Array.isArray;
    var keyList = Object.keys;
    var hasProp = Object.prototype.hasOwnProperty;
    var hasElementType = typeof Element !== "undefined";
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        var arrA = isArray(a), arrB = isArray(b), i, length, key;
        if (arrA && arrB) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        if (arrA != arrB)
          return false;
        var dateA = a instanceof Date, dateB = b instanceof Date;
        if (dateA != dateB)
          return false;
        if (dateA && dateB)
          return a.getTime() == b.getTime();
        var regexpA = a instanceof RegExp, regexpB = b instanceof RegExp;
        if (regexpA != regexpB)
          return false;
        if (regexpA && regexpB)
          return a.toString() == b.toString();
        var keys = keyList(a);
        length = keys.length;
        if (length !== keyList(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!hasProp.call(b, keys[i]))
            return false;
        if (hasElementType && a instanceof Element && b instanceof Element)
          return a === b;
        for (i = length; i-- !== 0; ) {
          key = keys[i];
          if (key === "_owner" && a.$$typeof) {
            continue;
          } else {
            if (!equal(a[key], b[key]))
              return false;
          }
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module2.exports = function exportedEqual(a, b) {
      try {
        return equal(a, b);
      } catch (error) {
        if (error.message && error.message.match(/stack|recursion/i) || error.number === -2146828260) {
          console.warn("Warning: react-fast-compare does not handle circular references.", error.name, error.message);
          return false;
        }
        throw error;
      }
    };
  }
});

// node_modules/lodash/now.js
var require_now = __commonJS({
  "node_modules/lodash/now.js"(exports, module2) {
    var root = require_root();
    var now = function() {
      return root.Date.now();
    };
    module2.exports = now;
  }
});

// node_modules/lodash/debounce.js
var require_debounce = __commonJS({
  "node_modules/lodash/debounce.js"(exports, module2) {
    var isObject3 = require_isObject();
    var now = require_now();
    var toNumber = require_toNumber();
    var FUNC_ERROR_TEXT = "Expected a function";
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    function debounce(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject3(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
        return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    module2.exports = debounce;
  }
});

// node_modules/lodash/throttle.js
var require_throttle = __commonJS({
  "node_modules/lodash/throttle.js"(exports, module2) {
    var debounce = require_debounce();
    var isObject3 = require_isObject();
    var FUNC_ERROR_TEXT = "Expected a function";
    function throttle2(func, wait, options) {
      var leading = true, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject3(options)) {
        leading = "leading" in options ? !!options.leading : leading;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        "leading": leading,
        "maxWait": wait,
        "trailing": trailing
      });
    }
    module2.exports = throttle2;
  }
});

// node_modules/@strapi/admin/dist/admin/chunks/index-BUGouNML.mjs
var import_client = __toESM(require_client(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React10 = __toESM(require_react(), 1);
var import_react10 = __toESM(require_react(), 1);
var import_invariant = __toESM(require_browser(), 1);
var import_isFunction = __toESM(require_isFunction(), 1);
var import_merge = __toESM(require_merge(), 1);
var import_pick = __toESM(require_pick(), 1);

// node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(t, e) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
    return t2.__proto__ = e2, t2;
  }, _setPrototypeOf(t, e);
}

// node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
function _inheritsLoose(t, o) {
  t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o);
}

// node_modules/react-query/es/core/subscribable.js
var Subscribable = function() {
  function Subscribable2() {
    this.listeners = [];
  }
  var _proto = Subscribable2.prototype;
  _proto.subscribe = function subscribe(listener) {
    var _this = this;
    var callback = listener || function() {
      return void 0;
    };
    this.listeners.push(callback);
    this.onSubscribe();
    return function() {
      _this.listeners = _this.listeners.filter(function(x) {
        return x !== callback;
      });
      _this.onUnsubscribe();
    };
  };
  _proto.hasListeners = function hasListeners() {
    return this.listeners.length > 0;
  };
  _proto.onSubscribe = function onSubscribe() {
  };
  _proto.onUnsubscribe = function onUnsubscribe() {
  };
  return Subscribable2;
}();

// node_modules/react-query/es/core/utils.js
var isServer = typeof window === "undefined";
function noop() {
  return void 0;
}
function functionalUpdate(updater, input) {
  return typeof updater === "function" ? updater(input) : updater;
}
function isValidTimeout(value) {
  return typeof value === "number" && value >= 0 && value !== Infinity;
}
function ensureQueryKeyArray(value) {
  return Array.isArray(value) ? value : [value];
}
function difference(array1, array2) {
  return array1.filter(function(x) {
    return array2.indexOf(x) === -1;
  });
}
function replaceAt(array, index, value) {
  var copy = array.slice(0);
  copy[index] = value;
  return copy;
}
function timeUntilStale(updatedAt, staleTime) {
  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);
}
function parseQueryArgs(arg1, arg2, arg3) {
  if (!isQueryKey(arg1)) {
    return arg1;
  }
  if (typeof arg2 === "function") {
    return _extends({}, arg3, {
      queryKey: arg1,
      queryFn: arg2
    });
  }
  return _extends({}, arg2, {
    queryKey: arg1
  });
}
function parseMutationArgs(arg1, arg2, arg3) {
  if (isQueryKey(arg1)) {
    if (typeof arg2 === "function") {
      return _extends({}, arg3, {
        mutationKey: arg1,
        mutationFn: arg2
      });
    }
    return _extends({}, arg2, {
      mutationKey: arg1
    });
  }
  if (typeof arg1 === "function") {
    return _extends({}, arg2, {
      mutationFn: arg1
    });
  }
  return _extends({}, arg1);
}
function parseFilterArgs(arg1, arg2, arg3) {
  return isQueryKey(arg1) ? [_extends({}, arg2, {
    queryKey: arg1
  }), arg3] : [arg1 || {}, arg2];
}
function mapQueryStatusFilter(active, inactive) {
  if (active === true && inactive === true || active == null && inactive == null) {
    return "all";
  } else if (active === false && inactive === false) {
    return "none";
  } else {
    var isActive = active != null ? active : !inactive;
    return isActive ? "active" : "inactive";
  }
}
function matchQuery(filters, query) {
  var active = filters.active, exact = filters.exact, fetching = filters.fetching, inactive = filters.inactive, predicate = filters.predicate, queryKey = filters.queryKey, stale = filters.stale;
  if (isQueryKey(queryKey)) {
    if (exact) {
      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {
        return false;
      }
    } else if (!partialMatchKey(query.queryKey, queryKey)) {
      return false;
    }
  }
  var queryStatusFilter = mapQueryStatusFilter(active, inactive);
  if (queryStatusFilter === "none") {
    return false;
  } else if (queryStatusFilter !== "all") {
    var isActive = query.isActive();
    if (queryStatusFilter === "active" && !isActive) {
      return false;
    }
    if (queryStatusFilter === "inactive" && isActive) {
      return false;
    }
  }
  if (typeof stale === "boolean" && query.isStale() !== stale) {
    return false;
  }
  if (typeof fetching === "boolean" && query.isFetching() !== fetching) {
    return false;
  }
  if (predicate && !predicate(query)) {
    return false;
  }
  return true;
}
function matchMutation(filters, mutation) {
  var exact = filters.exact, fetching = filters.fetching, predicate = filters.predicate, mutationKey = filters.mutationKey;
  if (isQueryKey(mutationKey)) {
    if (!mutation.options.mutationKey) {
      return false;
    }
    if (exact) {
      if (hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)) {
        return false;
      }
    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {
      return false;
    }
  }
  if (typeof fetching === "boolean" && mutation.state.status === "loading" !== fetching) {
    return false;
  }
  if (predicate && !predicate(mutation)) {
    return false;
  }
  return true;
}
function hashQueryKeyByOptions(queryKey, options) {
  var hashFn = (options == null ? void 0 : options.queryKeyHashFn) || hashQueryKey;
  return hashFn(queryKey);
}
function hashQueryKey(queryKey) {
  var asArray = ensureQueryKeyArray(queryKey);
  return stableValueHash(asArray);
}
function stableValueHash(value) {
  return JSON.stringify(value, function(_, val) {
    return isPlainObject(val) ? Object.keys(val).sort().reduce(function(result, key) {
      result[key] = val[key];
      return result;
    }, {}) : val;
  });
}
function partialMatchKey(a, b) {
  return partialDeepEqual(ensureQueryKeyArray(a), ensureQueryKeyArray(b));
}
function partialDeepEqual(a, b) {
  if (a === b) {
    return true;
  }
  if (typeof a !== typeof b) {
    return false;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    return !Object.keys(b).some(function(key) {
      return !partialDeepEqual(a[key], b[key]);
    });
  }
  return false;
}
function replaceEqualDeep(a, b) {
  if (a === b) {
    return a;
  }
  var array = Array.isArray(a) && Array.isArray(b);
  if (array || isPlainObject(a) && isPlainObject(b)) {
    var aSize = array ? a.length : Object.keys(a).length;
    var bItems = array ? b : Object.keys(b);
    var bSize = bItems.length;
    var copy = array ? [] : {};
    var equalItems = 0;
    for (var i = 0; i < bSize; i++) {
      var key = array ? i : bItems[i];
      copy[key] = replaceEqualDeep(a[key], b[key]);
      if (copy[key] === a[key]) {
        equalItems++;
      }
    }
    return aSize === bSize && equalItems === aSize ? a : copy;
  }
  return b;
}
function shallowEqualObjects(a, b) {
  if (a && !b || b && !a) {
    return false;
  }
  for (var key in a) {
    if (a[key] !== b[key]) {
      return false;
    }
  }
  return true;
}
function isPlainObject(o) {
  if (!hasObjectPrototype(o)) {
    return false;
  }
  var ctor = o.constructor;
  if (typeof ctor === "undefined") {
    return true;
  }
  var prot = ctor.prototype;
  if (!hasObjectPrototype(prot)) {
    return false;
  }
  if (!prot.hasOwnProperty("isPrototypeOf")) {
    return false;
  }
  return true;
}
function hasObjectPrototype(o) {
  return Object.prototype.toString.call(o) === "[object Object]";
}
function isQueryKey(value) {
  return typeof value === "string" || Array.isArray(value);
}
function sleep(timeout) {
  return new Promise(function(resolve) {
    setTimeout(resolve, timeout);
  });
}
function scheduleMicrotask(callback) {
  Promise.resolve().then(callback).catch(function(error) {
    return setTimeout(function() {
      throw error;
    });
  });
}
function getAbortController() {
  if (typeof AbortController === "function") {
    return new AbortController();
  }
}

// node_modules/react-query/es/core/focusManager.js
var FocusManager = function(_Subscribable) {
  _inheritsLoose(FocusManager2, _Subscribable);
  function FocusManager2() {
    var _this;
    _this = _Subscribable.call(this) || this;
    _this.setup = function(onFocus) {
      var _window;
      if (!isServer && ((_window = window) == null ? void 0 : _window.addEventListener)) {
        var listener = function listener2() {
          return onFocus();
        };
        window.addEventListener("visibilitychange", listener, false);
        window.addEventListener("focus", listener, false);
        return function() {
          window.removeEventListener("visibilitychange", listener);
          window.removeEventListener("focus", listener);
        };
      }
    };
    return _this;
  }
  var _proto = FocusManager2.prototype;
  _proto.onSubscribe = function onSubscribe() {
    if (!this.cleanup) {
      this.setEventListener(this.setup);
    }
  };
  _proto.onUnsubscribe = function onUnsubscribe() {
    if (!this.hasListeners()) {
      var _this$cleanup;
      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);
      this.cleanup = void 0;
    }
  };
  _proto.setEventListener = function setEventListener(setup) {
    var _this$cleanup2, _this2 = this;
    this.setup = setup;
    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);
    this.cleanup = setup(function(focused) {
      if (typeof focused === "boolean") {
        _this2.setFocused(focused);
      } else {
        _this2.onFocus();
      }
    });
  };
  _proto.setFocused = function setFocused(focused) {
    this.focused = focused;
    if (focused) {
      this.onFocus();
    }
  };
  _proto.onFocus = function onFocus() {
    this.listeners.forEach(function(listener) {
      listener();
    });
  };
  _proto.isFocused = function isFocused() {
    if (typeof this.focused === "boolean") {
      return this.focused;
    }
    if (typeof document === "undefined") {
      return true;
    }
    return [void 0, "visible", "prerender"].includes(document.visibilityState);
  };
  return FocusManager2;
}(Subscribable);
var focusManager = new FocusManager();

// node_modules/react-query/es/core/onlineManager.js
var OnlineManager = function(_Subscribable) {
  _inheritsLoose(OnlineManager2, _Subscribable);
  function OnlineManager2() {
    var _this;
    _this = _Subscribable.call(this) || this;
    _this.setup = function(onOnline) {
      var _window;
      if (!isServer && ((_window = window) == null ? void 0 : _window.addEventListener)) {
        var listener = function listener2() {
          return onOnline();
        };
        window.addEventListener("online", listener, false);
        window.addEventListener("offline", listener, false);
        return function() {
          window.removeEventListener("online", listener);
          window.removeEventListener("offline", listener);
        };
      }
    };
    return _this;
  }
  var _proto = OnlineManager2.prototype;
  _proto.onSubscribe = function onSubscribe() {
    if (!this.cleanup) {
      this.setEventListener(this.setup);
    }
  };
  _proto.onUnsubscribe = function onUnsubscribe() {
    if (!this.hasListeners()) {
      var _this$cleanup;
      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);
      this.cleanup = void 0;
    }
  };
  _proto.setEventListener = function setEventListener(setup) {
    var _this$cleanup2, _this2 = this;
    this.setup = setup;
    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);
    this.cleanup = setup(function(online) {
      if (typeof online === "boolean") {
        _this2.setOnline(online);
      } else {
        _this2.onOnline();
      }
    });
  };
  _proto.setOnline = function setOnline(online) {
    this.online = online;
    if (online) {
      this.onOnline();
    }
  };
  _proto.onOnline = function onOnline() {
    this.listeners.forEach(function(listener) {
      listener();
    });
  };
  _proto.isOnline = function isOnline() {
    if (typeof this.online === "boolean") {
      return this.online;
    }
    if (typeof navigator === "undefined" || typeof navigator.onLine === "undefined") {
      return true;
    }
    return navigator.onLine;
  };
  return OnlineManager2;
}(Subscribable);
var onlineManager = new OnlineManager();

// node_modules/react-query/es/core/retryer.js
function defaultRetryDelay(failureCount) {
  return Math.min(1e3 * Math.pow(2, failureCount), 3e4);
}
function isCancelable(value) {
  return typeof (value == null ? void 0 : value.cancel) === "function";
}
var CancelledError = function CancelledError2(options) {
  this.revert = options == null ? void 0 : options.revert;
  this.silent = options == null ? void 0 : options.silent;
};
function isCancelledError(value) {
  return value instanceof CancelledError;
}
var Retryer = function Retryer2(config) {
  var _this = this;
  var cancelRetry = false;
  var cancelFn;
  var continueFn;
  var promiseResolve;
  var promiseReject;
  this.abort = config.abort;
  this.cancel = function(cancelOptions) {
    return cancelFn == null ? void 0 : cancelFn(cancelOptions);
  };
  this.cancelRetry = function() {
    cancelRetry = true;
  };
  this.continueRetry = function() {
    cancelRetry = false;
  };
  this.continue = function() {
    return continueFn == null ? void 0 : continueFn();
  };
  this.failureCount = 0;
  this.isPaused = false;
  this.isResolved = false;
  this.isTransportCancelable = false;
  this.promise = new Promise(function(outerResolve, outerReject) {
    promiseResolve = outerResolve;
    promiseReject = outerReject;
  });
  var resolve = function resolve2(value) {
    if (!_this.isResolved) {
      _this.isResolved = true;
      config.onSuccess == null ? void 0 : config.onSuccess(value);
      continueFn == null ? void 0 : continueFn();
      promiseResolve(value);
    }
  };
  var reject = function reject2(value) {
    if (!_this.isResolved) {
      _this.isResolved = true;
      config.onError == null ? void 0 : config.onError(value);
      continueFn == null ? void 0 : continueFn();
      promiseReject(value);
    }
  };
  var pause = function pause2() {
    return new Promise(function(continueResolve) {
      continueFn = continueResolve;
      _this.isPaused = true;
      config.onPause == null ? void 0 : config.onPause();
    }).then(function() {
      continueFn = void 0;
      _this.isPaused = false;
      config.onContinue == null ? void 0 : config.onContinue();
    });
  };
  var run = function run2() {
    if (_this.isResolved) {
      return;
    }
    var promiseOrValue;
    try {
      promiseOrValue = config.fn();
    } catch (error) {
      promiseOrValue = Promise.reject(error);
    }
    cancelFn = function cancelFn2(cancelOptions) {
      if (!_this.isResolved) {
        reject(new CancelledError(cancelOptions));
        _this.abort == null ? void 0 : _this.abort();
        if (isCancelable(promiseOrValue)) {
          try {
            promiseOrValue.cancel();
          } catch (_unused) {
          }
        }
      }
    };
    _this.isTransportCancelable = isCancelable(promiseOrValue);
    Promise.resolve(promiseOrValue).then(resolve).catch(function(error) {
      var _config$retry, _config$retryDelay;
      if (_this.isResolved) {
        return;
      }
      var retry = (_config$retry = config.retry) != null ? _config$retry : 3;
      var retryDelay = (_config$retryDelay = config.retryDelay) != null ? _config$retryDelay : defaultRetryDelay;
      var delay = typeof retryDelay === "function" ? retryDelay(_this.failureCount, error) : retryDelay;
      var shouldRetry = retry === true || typeof retry === "number" && _this.failureCount < retry || typeof retry === "function" && retry(_this.failureCount, error);
      if (cancelRetry || !shouldRetry) {
        reject(error);
        return;
      }
      _this.failureCount++;
      config.onFail == null ? void 0 : config.onFail(_this.failureCount, error);
      sleep(delay).then(function() {
        if (!focusManager.isFocused() || !onlineManager.isOnline()) {
          return pause();
        }
      }).then(function() {
        if (cancelRetry) {
          reject(error);
        } else {
          run2();
        }
      });
    });
  };
  run();
};

// node_modules/react-query/es/core/notifyManager.js
var NotifyManager = function() {
  function NotifyManager2() {
    this.queue = [];
    this.transactions = 0;
    this.notifyFn = function(callback) {
      callback();
    };
    this.batchNotifyFn = function(callback) {
      callback();
    };
  }
  var _proto = NotifyManager2.prototype;
  _proto.batch = function batch(callback) {
    var result;
    this.transactions++;
    try {
      result = callback();
    } finally {
      this.transactions--;
      if (!this.transactions) {
        this.flush();
      }
    }
    return result;
  };
  _proto.schedule = function schedule(callback) {
    var _this = this;
    if (this.transactions) {
      this.queue.push(callback);
    } else {
      scheduleMicrotask(function() {
        _this.notifyFn(callback);
      });
    }
  };
  _proto.batchCalls = function batchCalls(callback) {
    var _this2 = this;
    return function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this2.schedule(function() {
        callback.apply(void 0, args);
      });
    };
  };
  _proto.flush = function flush() {
    var _this3 = this;
    var queue = this.queue;
    this.queue = [];
    if (queue.length) {
      scheduleMicrotask(function() {
        _this3.batchNotifyFn(function() {
          queue.forEach(function(callback) {
            _this3.notifyFn(callback);
          });
        });
      });
    }
  };
  _proto.setNotifyFunction = function setNotifyFunction(fn2) {
    this.notifyFn = fn2;
  };
  _proto.setBatchNotifyFunction = function setBatchNotifyFunction(fn2) {
    this.batchNotifyFn = fn2;
  };
  return NotifyManager2;
}();
var notifyManager = new NotifyManager();

// node_modules/react-query/es/core/logger.js
var logger = console;
function getLogger() {
  return logger;
}
function setLogger(newLogger) {
  logger = newLogger;
}

// node_modules/react-query/es/core/query.js
var Query = function() {
  function Query2(config) {
    this.abortSignalConsumed = false;
    this.hadObservers = false;
    this.defaultOptions = config.defaultOptions;
    this.setOptions(config.options);
    this.observers = [];
    this.cache = config.cache;
    this.queryKey = config.queryKey;
    this.queryHash = config.queryHash;
    this.initialState = config.state || this.getDefaultState(this.options);
    this.state = this.initialState;
    this.meta = config.meta;
    this.scheduleGc();
  }
  var _proto = Query2.prototype;
  _proto.setOptions = function setOptions(options) {
    var _this$options$cacheTi;
    this.options = _extends({}, this.defaultOptions, options);
    this.meta = options == null ? void 0 : options.meta;
    this.cacheTime = Math.max(this.cacheTime || 0, (_this$options$cacheTi = this.options.cacheTime) != null ? _this$options$cacheTi : 5 * 60 * 1e3);
  };
  _proto.setDefaultOptions = function setDefaultOptions(options) {
    this.defaultOptions = options;
  };
  _proto.scheduleGc = function scheduleGc() {
    var _this = this;
    this.clearGcTimeout();
    if (isValidTimeout(this.cacheTime)) {
      this.gcTimeout = setTimeout(function() {
        _this.optionalRemove();
      }, this.cacheTime);
    }
  };
  _proto.clearGcTimeout = function clearGcTimeout() {
    if (this.gcTimeout) {
      clearTimeout(this.gcTimeout);
      this.gcTimeout = void 0;
    }
  };
  _proto.optionalRemove = function optionalRemove() {
    if (!this.observers.length) {
      if (this.state.isFetching) {
        if (this.hadObservers) {
          this.scheduleGc();
        }
      } else {
        this.cache.remove(this);
      }
    }
  };
  _proto.setData = function setData(updater, options) {
    var _this$options$isDataE, _this$options;
    var prevData = this.state.data;
    var data = functionalUpdate(updater, prevData);
    if ((_this$options$isDataE = (_this$options = this.options).isDataEqual) == null ? void 0 : _this$options$isDataE.call(_this$options, prevData, data)) {
      data = prevData;
    } else if (this.options.structuralSharing !== false) {
      data = replaceEqualDeep(prevData, data);
    }
    this.dispatch({
      data,
      type: "success",
      dataUpdatedAt: options == null ? void 0 : options.updatedAt
    });
    return data;
  };
  _proto.setState = function setState(state, setStateOptions) {
    this.dispatch({
      type: "setState",
      state,
      setStateOptions
    });
  };
  _proto.cancel = function cancel(options) {
    var _this$retryer;
    var promise = this.promise;
    (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);
    return promise ? promise.then(noop).catch(noop) : Promise.resolve();
  };
  _proto.destroy = function destroy() {
    this.clearGcTimeout();
    this.cancel({
      silent: true
    });
  };
  _proto.reset = function reset() {
    this.destroy();
    this.setState(this.initialState);
  };
  _proto.isActive = function isActive() {
    return this.observers.some(function(observer) {
      return observer.options.enabled !== false;
    });
  };
  _proto.isFetching = function isFetching() {
    return this.state.isFetching;
  };
  _proto.isStale = function isStale2() {
    return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some(function(observer) {
      return observer.getCurrentResult().isStale;
    });
  };
  _proto.isStaleByTime = function isStaleByTime(staleTime) {
    if (staleTime === void 0) {
      staleTime = 0;
    }
    return this.state.isInvalidated || !this.state.dataUpdatedAt || !timeUntilStale(this.state.dataUpdatedAt, staleTime);
  };
  _proto.onFocus = function onFocus() {
    var _this$retryer2;
    var observer = this.observers.find(function(x) {
      return x.shouldFetchOnWindowFocus();
    });
    if (observer) {
      observer.refetch();
    }
    (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();
  };
  _proto.onOnline = function onOnline() {
    var _this$retryer3;
    var observer = this.observers.find(function(x) {
      return x.shouldFetchOnReconnect();
    });
    if (observer) {
      observer.refetch();
    }
    (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();
  };
  _proto.addObserver = function addObserver(observer) {
    if (this.observers.indexOf(observer) === -1) {
      this.observers.push(observer);
      this.hadObservers = true;
      this.clearGcTimeout();
      this.cache.notify({
        type: "observerAdded",
        query: this,
        observer
      });
    }
  };
  _proto.removeObserver = function removeObserver(observer) {
    if (this.observers.indexOf(observer) !== -1) {
      this.observers = this.observers.filter(function(x) {
        return x !== observer;
      });
      if (!this.observers.length) {
        if (this.retryer) {
          if (this.retryer.isTransportCancelable || this.abortSignalConsumed) {
            this.retryer.cancel({
              revert: true
            });
          } else {
            this.retryer.cancelRetry();
          }
        }
        if (this.cacheTime) {
          this.scheduleGc();
        } else {
          this.cache.remove(this);
        }
      }
      this.cache.notify({
        type: "observerRemoved",
        query: this,
        observer
      });
    }
  };
  _proto.getObserversCount = function getObserversCount() {
    return this.observers.length;
  };
  _proto.invalidate = function invalidate() {
    if (!this.state.isInvalidated) {
      this.dispatch({
        type: "invalidate"
      });
    }
  };
  _proto.fetch = function fetch2(options, fetchOptions) {
    var _this2 = this, _this$options$behavio, _context$fetchOptions, _abortController$abor;
    if (this.state.isFetching) {
      if (this.state.dataUpdatedAt && (fetchOptions == null ? void 0 : fetchOptions.cancelRefetch)) {
        this.cancel({
          silent: true
        });
      } else if (this.promise) {
        var _this$retryer4;
        (_this$retryer4 = this.retryer) == null ? void 0 : _this$retryer4.continueRetry();
        return this.promise;
      }
    }
    if (options) {
      this.setOptions(options);
    }
    if (!this.options.queryFn) {
      var observer = this.observers.find(function(x) {
        return x.options.queryFn;
      });
      if (observer) {
        this.setOptions(observer.options);
      }
    }
    var queryKey = ensureQueryKeyArray(this.queryKey);
    var abortController = getAbortController();
    var queryFnContext = {
      queryKey,
      pageParam: void 0,
      meta: this.meta
    };
    Object.defineProperty(queryFnContext, "signal", {
      enumerable: true,
      get: function get() {
        if (abortController) {
          _this2.abortSignalConsumed = true;
          return abortController.signal;
        }
        return void 0;
      }
    });
    var fetchFn = function fetchFn2() {
      if (!_this2.options.queryFn) {
        return Promise.reject("Missing queryFn");
      }
      _this2.abortSignalConsumed = false;
      return _this2.options.queryFn(queryFnContext);
    };
    var context = {
      fetchOptions,
      options: this.options,
      queryKey,
      state: this.state,
      fetchFn,
      meta: this.meta
    };
    if ((_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch) {
      var _this$options$behavio2;
      (_this$options$behavio2 = this.options.behavior) == null ? void 0 : _this$options$behavio2.onFetch(context);
    }
    this.revertState = this.state;
    if (!this.state.isFetching || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {
      var _context$fetchOptions2;
      this.dispatch({
        type: "fetch",
        meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta
      });
    }
    this.retryer = new Retryer({
      fn: context.fetchFn,
      abort: abortController == null ? void 0 : (_abortController$abor = abortController.abort) == null ? void 0 : _abortController$abor.bind(abortController),
      onSuccess: function onSuccess(data) {
        _this2.setData(data);
        _this2.cache.config.onSuccess == null ? void 0 : _this2.cache.config.onSuccess(data, _this2);
        if (_this2.cacheTime === 0) {
          _this2.optionalRemove();
        }
      },
      onError: function onError(error) {
        if (!(isCancelledError(error) && error.silent)) {
          _this2.dispatch({
            type: "error",
            error
          });
        }
        if (!isCancelledError(error)) {
          _this2.cache.config.onError == null ? void 0 : _this2.cache.config.onError(error, _this2);
          getLogger().error(error);
        }
        if (_this2.cacheTime === 0) {
          _this2.optionalRemove();
        }
      },
      onFail: function onFail() {
        _this2.dispatch({
          type: "failed"
        });
      },
      onPause: function onPause() {
        _this2.dispatch({
          type: "pause"
        });
      },
      onContinue: function onContinue() {
        _this2.dispatch({
          type: "continue"
        });
      },
      retry: context.options.retry,
      retryDelay: context.options.retryDelay
    });
    this.promise = this.retryer.promise;
    return this.promise;
  };
  _proto.dispatch = function dispatch(action) {
    var _this3 = this;
    this.state = this.reducer(this.state, action);
    notifyManager.batch(function() {
      _this3.observers.forEach(function(observer) {
        observer.onQueryUpdate(action);
      });
      _this3.cache.notify({
        query: _this3,
        type: "queryUpdated",
        action
      });
    });
  };
  _proto.getDefaultState = function getDefaultState2(options) {
    var data = typeof options.initialData === "function" ? options.initialData() : options.initialData;
    var hasInitialData = typeof options.initialData !== "undefined";
    var initialDataUpdatedAt = hasInitialData ? typeof options.initialDataUpdatedAt === "function" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;
    var hasData = typeof data !== "undefined";
    return {
      data,
      dataUpdateCount: 0,
      dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,
      error: null,
      errorUpdateCount: 0,
      errorUpdatedAt: 0,
      fetchFailureCount: 0,
      fetchMeta: null,
      isFetching: false,
      isInvalidated: false,
      isPaused: false,
      status: hasData ? "success" : "idle"
    };
  };
  _proto.reducer = function reducer3(state, action) {
    var _action$meta, _action$dataUpdatedAt;
    switch (action.type) {
      case "failed":
        return _extends({}, state, {
          fetchFailureCount: state.fetchFailureCount + 1
        });
      case "pause":
        return _extends({}, state, {
          isPaused: true
        });
      case "continue":
        return _extends({}, state, {
          isPaused: false
        });
      case "fetch":
        return _extends({}, state, {
          fetchFailureCount: 0,
          fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,
          isFetching: true,
          isPaused: false
        }, !state.dataUpdatedAt && {
          error: null,
          status: "loading"
        });
      case "success":
        return _extends({}, state, {
          data: action.data,
          dataUpdateCount: state.dataUpdateCount + 1,
          dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),
          error: null,
          fetchFailureCount: 0,
          isFetching: false,
          isInvalidated: false,
          isPaused: false,
          status: "success"
        });
      case "error":
        var error = action.error;
        if (isCancelledError(error) && error.revert && this.revertState) {
          return _extends({}, this.revertState);
        }
        return _extends({}, state, {
          error,
          errorUpdateCount: state.errorUpdateCount + 1,
          errorUpdatedAt: Date.now(),
          fetchFailureCount: state.fetchFailureCount + 1,
          isFetching: false,
          isPaused: false,
          status: "error"
        });
      case "invalidate":
        return _extends({}, state, {
          isInvalidated: true
        });
      case "setState":
        return _extends({}, state, action.state);
      default:
        return state;
    }
  };
  return Query2;
}();

// node_modules/react-query/es/core/queryCache.js
var QueryCache = function(_Subscribable) {
  _inheritsLoose(QueryCache2, _Subscribable);
  function QueryCache2(config) {
    var _this;
    _this = _Subscribable.call(this) || this;
    _this.config = config || {};
    _this.queries = [];
    _this.queriesMap = {};
    return _this;
  }
  var _proto = QueryCache2.prototype;
  _proto.build = function build(client, options, state) {
    var _options$queryHash;
    var queryKey = options.queryKey;
    var queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : hashQueryKeyByOptions(queryKey, options);
    var query = this.get(queryHash);
    if (!query) {
      query = new Query({
        cache: this,
        queryKey,
        queryHash,
        options: client.defaultQueryOptions(options),
        state,
        defaultOptions: client.getQueryDefaults(queryKey),
        meta: options.meta
      });
      this.add(query);
    }
    return query;
  };
  _proto.add = function add(query) {
    if (!this.queriesMap[query.queryHash]) {
      this.queriesMap[query.queryHash] = query;
      this.queries.push(query);
      this.notify({
        type: "queryAdded",
        query
      });
    }
  };
  _proto.remove = function remove(query) {
    var queryInMap = this.queriesMap[query.queryHash];
    if (queryInMap) {
      query.destroy();
      this.queries = this.queries.filter(function(x) {
        return x !== query;
      });
      if (queryInMap === query) {
        delete this.queriesMap[query.queryHash];
      }
      this.notify({
        type: "queryRemoved",
        query
      });
    }
  };
  _proto.clear = function clear() {
    var _this2 = this;
    notifyManager.batch(function() {
      _this2.queries.forEach(function(query) {
        _this2.remove(query);
      });
    });
  };
  _proto.get = function get(queryHash) {
    return this.queriesMap[queryHash];
  };
  _proto.getAll = function getAll() {
    return this.queries;
  };
  _proto.find = function find(arg1, arg2) {
    var _parseFilterArgs = parseFilterArgs(arg1, arg2), filters = _parseFilterArgs[0];
    if (typeof filters.exact === "undefined") {
      filters.exact = true;
    }
    return this.queries.find(function(query) {
      return matchQuery(filters, query);
    });
  };
  _proto.findAll = function findAll(arg1, arg2) {
    var _parseFilterArgs2 = parseFilterArgs(arg1, arg2), filters = _parseFilterArgs2[0];
    return Object.keys(filters).length > 0 ? this.queries.filter(function(query) {
      return matchQuery(filters, query);
    }) : this.queries;
  };
  _proto.notify = function notify(event) {
    var _this3 = this;
    notifyManager.batch(function() {
      _this3.listeners.forEach(function(listener) {
        listener(event);
      });
    });
  };
  _proto.onFocus = function onFocus() {
    var _this4 = this;
    notifyManager.batch(function() {
      _this4.queries.forEach(function(query) {
        query.onFocus();
      });
    });
  };
  _proto.onOnline = function onOnline() {
    var _this5 = this;
    notifyManager.batch(function() {
      _this5.queries.forEach(function(query) {
        query.onOnline();
      });
    });
  };
  return QueryCache2;
}(Subscribable);

// node_modules/react-query/es/core/mutation.js
var Mutation = function() {
  function Mutation2(config) {
    this.options = _extends({}, config.defaultOptions, config.options);
    this.mutationId = config.mutationId;
    this.mutationCache = config.mutationCache;
    this.observers = [];
    this.state = config.state || getDefaultState();
    this.meta = config.meta;
  }
  var _proto = Mutation2.prototype;
  _proto.setState = function setState(state) {
    this.dispatch({
      type: "setState",
      state
    });
  };
  _proto.addObserver = function addObserver(observer) {
    if (this.observers.indexOf(observer) === -1) {
      this.observers.push(observer);
    }
  };
  _proto.removeObserver = function removeObserver(observer) {
    this.observers = this.observers.filter(function(x) {
      return x !== observer;
    });
  };
  _proto.cancel = function cancel() {
    if (this.retryer) {
      this.retryer.cancel();
      return this.retryer.promise.then(noop).catch(noop);
    }
    return Promise.resolve();
  };
  _proto.continue = function _continue() {
    if (this.retryer) {
      this.retryer.continue();
      return this.retryer.promise;
    }
    return this.execute();
  };
  _proto.execute = function execute() {
    var _this = this;
    var data;
    var restored = this.state.status === "loading";
    var promise = Promise.resolve();
    if (!restored) {
      this.dispatch({
        type: "loading",
        variables: this.options.variables
      });
      promise = promise.then(function() {
        _this.mutationCache.config.onMutate == null ? void 0 : _this.mutationCache.config.onMutate(_this.state.variables, _this);
      }).then(function() {
        return _this.options.onMutate == null ? void 0 : _this.options.onMutate(_this.state.variables);
      }).then(function(context) {
        if (context !== _this.state.context) {
          _this.dispatch({
            type: "loading",
            context,
            variables: _this.state.variables
          });
        }
      });
    }
    return promise.then(function() {
      return _this.executeMutation();
    }).then(function(result) {
      data = result;
      _this.mutationCache.config.onSuccess == null ? void 0 : _this.mutationCache.config.onSuccess(data, _this.state.variables, _this.state.context, _this);
    }).then(function() {
      return _this.options.onSuccess == null ? void 0 : _this.options.onSuccess(data, _this.state.variables, _this.state.context);
    }).then(function() {
      return _this.options.onSettled == null ? void 0 : _this.options.onSettled(data, null, _this.state.variables, _this.state.context);
    }).then(function() {
      _this.dispatch({
        type: "success",
        data
      });
      return data;
    }).catch(function(error) {
      _this.mutationCache.config.onError == null ? void 0 : _this.mutationCache.config.onError(error, _this.state.variables, _this.state.context, _this);
      getLogger().error(error);
      return Promise.resolve().then(function() {
        return _this.options.onError == null ? void 0 : _this.options.onError(error, _this.state.variables, _this.state.context);
      }).then(function() {
        return _this.options.onSettled == null ? void 0 : _this.options.onSettled(void 0, error, _this.state.variables, _this.state.context);
      }).then(function() {
        _this.dispatch({
          type: "error",
          error
        });
        throw error;
      });
    });
  };
  _proto.executeMutation = function executeMutation() {
    var _this2 = this, _this$options$retry;
    this.retryer = new Retryer({
      fn: function fn2() {
        if (!_this2.options.mutationFn) {
          return Promise.reject("No mutationFn found");
        }
        return _this2.options.mutationFn(_this2.state.variables);
      },
      onFail: function onFail() {
        _this2.dispatch({
          type: "failed"
        });
      },
      onPause: function onPause() {
        _this2.dispatch({
          type: "pause"
        });
      },
      onContinue: function onContinue() {
        _this2.dispatch({
          type: "continue"
        });
      },
      retry: (_this$options$retry = this.options.retry) != null ? _this$options$retry : 0,
      retryDelay: this.options.retryDelay
    });
    return this.retryer.promise;
  };
  _proto.dispatch = function dispatch(action) {
    var _this3 = this;
    this.state = reducer(this.state, action);
    notifyManager.batch(function() {
      _this3.observers.forEach(function(observer) {
        observer.onMutationUpdate(action);
      });
      _this3.mutationCache.notify(_this3);
    });
  };
  return Mutation2;
}();
function getDefaultState() {
  return {
    context: void 0,
    data: void 0,
    error: null,
    failureCount: 0,
    isPaused: false,
    status: "idle",
    variables: void 0
  };
}
function reducer(state, action) {
  switch (action.type) {
    case "failed":
      return _extends({}, state, {
        failureCount: state.failureCount + 1
      });
    case "pause":
      return _extends({}, state, {
        isPaused: true
      });
    case "continue":
      return _extends({}, state, {
        isPaused: false
      });
    case "loading":
      return _extends({}, state, {
        context: action.context,
        data: void 0,
        error: null,
        isPaused: false,
        status: "loading",
        variables: action.variables
      });
    case "success":
      return _extends({}, state, {
        data: action.data,
        error: null,
        status: "success",
        isPaused: false
      });
    case "error":
      return _extends({}, state, {
        data: void 0,
        error: action.error,
        failureCount: state.failureCount + 1,
        isPaused: false,
        status: "error"
      });
    case "setState":
      return _extends({}, state, action.state);
    default:
      return state;
  }
}

// node_modules/react-query/es/core/mutationCache.js
var MutationCache = function(_Subscribable) {
  _inheritsLoose(MutationCache2, _Subscribable);
  function MutationCache2(config) {
    var _this;
    _this = _Subscribable.call(this) || this;
    _this.config = config || {};
    _this.mutations = [];
    _this.mutationId = 0;
    return _this;
  }
  var _proto = MutationCache2.prototype;
  _proto.build = function build(client, options, state) {
    var mutation = new Mutation({
      mutationCache: this,
      mutationId: ++this.mutationId,
      options: client.defaultMutationOptions(options),
      state,
      defaultOptions: options.mutationKey ? client.getMutationDefaults(options.mutationKey) : void 0,
      meta: options.meta
    });
    this.add(mutation);
    return mutation;
  };
  _proto.add = function add(mutation) {
    this.mutations.push(mutation);
    this.notify(mutation);
  };
  _proto.remove = function remove(mutation) {
    this.mutations = this.mutations.filter(function(x) {
      return x !== mutation;
    });
    mutation.cancel();
    this.notify(mutation);
  };
  _proto.clear = function clear() {
    var _this2 = this;
    notifyManager.batch(function() {
      _this2.mutations.forEach(function(mutation) {
        _this2.remove(mutation);
      });
    });
  };
  _proto.getAll = function getAll() {
    return this.mutations;
  };
  _proto.find = function find(filters) {
    if (typeof filters.exact === "undefined") {
      filters.exact = true;
    }
    return this.mutations.find(function(mutation) {
      return matchMutation(filters, mutation);
    });
  };
  _proto.findAll = function findAll(filters) {
    return this.mutations.filter(function(mutation) {
      return matchMutation(filters, mutation);
    });
  };
  _proto.notify = function notify(mutation) {
    var _this3 = this;
    notifyManager.batch(function() {
      _this3.listeners.forEach(function(listener) {
        listener(mutation);
      });
    });
  };
  _proto.onFocus = function onFocus() {
    this.resumePausedMutations();
  };
  _proto.onOnline = function onOnline() {
    this.resumePausedMutations();
  };
  _proto.resumePausedMutations = function resumePausedMutations() {
    var pausedMutations = this.mutations.filter(function(x) {
      return x.state.isPaused;
    });
    return notifyManager.batch(function() {
      return pausedMutations.reduce(function(promise, mutation) {
        return promise.then(function() {
          return mutation.continue().catch(noop);
        });
      }, Promise.resolve());
    });
  };
  return MutationCache2;
}(Subscribable);

// node_modules/react-query/es/core/infiniteQueryBehavior.js
function infiniteQueryBehavior() {
  return {
    onFetch: function onFetch(context) {
      context.fetchFn = function() {
        var _context$fetchOptions, _context$fetchOptions2, _context$fetchOptions3, _context$fetchOptions4, _context$state$data, _context$state$data2;
        var refetchPage = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.refetchPage;
        var fetchMore = (_context$fetchOptions3 = context.fetchOptions) == null ? void 0 : (_context$fetchOptions4 = _context$fetchOptions3.meta) == null ? void 0 : _context$fetchOptions4.fetchMore;
        var pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;
        var isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === "forward";
        var isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === "backward";
        var oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];
        var oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];
        var abortController = getAbortController();
        var abortSignal = abortController == null ? void 0 : abortController.signal;
        var newPageParams = oldPageParams;
        var cancelled = false;
        var queryFn = context.options.queryFn || function() {
          return Promise.reject("Missing queryFn");
        };
        var buildNewPages = function buildNewPages2(pages, param2, page, previous) {
          newPageParams = previous ? [param2].concat(newPageParams) : [].concat(newPageParams, [param2]);
          return previous ? [page].concat(pages) : [].concat(pages, [page]);
        };
        var fetchPage = function fetchPage2(pages, manual2, param2, previous) {
          if (cancelled) {
            return Promise.reject("Cancelled");
          }
          if (typeof param2 === "undefined" && !manual2 && pages.length) {
            return Promise.resolve(pages);
          }
          var queryFnContext = {
            queryKey: context.queryKey,
            signal: abortSignal,
            pageParam: param2,
            meta: context.meta
          };
          var queryFnResult = queryFn(queryFnContext);
          var promise2 = Promise.resolve(queryFnResult).then(function(page) {
            return buildNewPages(pages, param2, page, previous);
          });
          if (isCancelable(queryFnResult)) {
            var promiseAsAny = promise2;
            promiseAsAny.cancel = queryFnResult.cancel;
          }
          return promise2;
        };
        var promise;
        if (!oldPages.length) {
          promise = fetchPage([]);
        } else if (isFetchingNextPage) {
          var manual = typeof pageParam !== "undefined";
          var param = manual ? pageParam : getNextPageParam(context.options, oldPages);
          promise = fetchPage(oldPages, manual, param);
        } else if (isFetchingPreviousPage) {
          var _manual = typeof pageParam !== "undefined";
          var _param = _manual ? pageParam : getPreviousPageParam(context.options, oldPages);
          promise = fetchPage(oldPages, _manual, _param, true);
        } else {
          (function() {
            newPageParams = [];
            var manual2 = typeof context.options.getNextPageParam === "undefined";
            var shouldFetchFirstPage = refetchPage && oldPages[0] ? refetchPage(oldPages[0], 0, oldPages) : true;
            promise = shouldFetchFirstPage ? fetchPage([], manual2, oldPageParams[0]) : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0]));
            var _loop = function _loop2(i2) {
              promise = promise.then(function(pages) {
                var shouldFetchNextPage = refetchPage && oldPages[i2] ? refetchPage(oldPages[i2], i2, oldPages) : true;
                if (shouldFetchNextPage) {
                  var _param2 = manual2 ? oldPageParams[i2] : getNextPageParam(context.options, pages);
                  return fetchPage(pages, manual2, _param2);
                }
                return Promise.resolve(buildNewPages(pages, oldPageParams[i2], oldPages[i2]));
              });
            };
            for (var i = 1; i < oldPages.length; i++) {
              _loop(i);
            }
          })();
        }
        var finalPromise = promise.then(function(pages) {
          return {
            pages,
            pageParams: newPageParams
          };
        });
        var finalPromiseAsAny = finalPromise;
        finalPromiseAsAny.cancel = function() {
          cancelled = true;
          abortController == null ? void 0 : abortController.abort();
          if (isCancelable(promise)) {
            promise.cancel();
          }
        };
        return finalPromise;
      };
    }
  };
}
function getNextPageParam(options, pages) {
  return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);
}
function getPreviousPageParam(options, pages) {
  return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);
}
function hasNextPage(options, pages) {
  if (options.getNextPageParam && Array.isArray(pages)) {
    var nextPageParam = getNextPageParam(options, pages);
    return typeof nextPageParam !== "undefined" && nextPageParam !== null && nextPageParam !== false;
  }
}
function hasPreviousPage(options, pages) {
  if (options.getPreviousPageParam && Array.isArray(pages)) {
    var previousPageParam = getPreviousPageParam(options, pages);
    return typeof previousPageParam !== "undefined" && previousPageParam !== null && previousPageParam !== false;
  }
}

// node_modules/react-query/es/core/queryClient.js
var QueryClient = function() {
  function QueryClient2(config) {
    if (config === void 0) {
      config = {};
    }
    this.queryCache = config.queryCache || new QueryCache();
    this.mutationCache = config.mutationCache || new MutationCache();
    this.defaultOptions = config.defaultOptions || {};
    this.queryDefaults = [];
    this.mutationDefaults = [];
  }
  var _proto = QueryClient2.prototype;
  _proto.mount = function mount() {
    var _this = this;
    this.unsubscribeFocus = focusManager.subscribe(function() {
      if (focusManager.isFocused() && onlineManager.isOnline()) {
        _this.mutationCache.onFocus();
        _this.queryCache.onFocus();
      }
    });
    this.unsubscribeOnline = onlineManager.subscribe(function() {
      if (focusManager.isFocused() && onlineManager.isOnline()) {
        _this.mutationCache.onOnline();
        _this.queryCache.onOnline();
      }
    });
  };
  _proto.unmount = function unmount() {
    var _this$unsubscribeFocu, _this$unsubscribeOnli;
    (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);
    (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);
  };
  _proto.isFetching = function isFetching(arg1, arg2) {
    var _parseFilterArgs = parseFilterArgs(arg1, arg2), filters = _parseFilterArgs[0];
    filters.fetching = true;
    return this.queryCache.findAll(filters).length;
  };
  _proto.isMutating = function isMutating(filters) {
    return this.mutationCache.findAll(_extends({}, filters, {
      fetching: true
    })).length;
  };
  _proto.getQueryData = function getQueryData(queryKey, filters) {
    var _this$queryCache$find;
    return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;
  };
  _proto.getQueriesData = function getQueriesData(queryKeyOrFilters) {
    return this.getQueryCache().findAll(queryKeyOrFilters).map(function(_ref) {
      var queryKey = _ref.queryKey, state = _ref.state;
      var data = state.data;
      return [queryKey, data];
    });
  };
  _proto.setQueryData = function setQueryData(queryKey, updater, options) {
    var parsedOptions = parseQueryArgs(queryKey);
    var defaultedOptions = this.defaultQueryOptions(parsedOptions);
    return this.queryCache.build(this, defaultedOptions).setData(updater, options);
  };
  _proto.setQueriesData = function setQueriesData(queryKeyOrFilters, updater, options) {
    var _this2 = this;
    return notifyManager.batch(function() {
      return _this2.getQueryCache().findAll(queryKeyOrFilters).map(function(_ref2) {
        var queryKey = _ref2.queryKey;
        return [queryKey, _this2.setQueryData(queryKey, updater, options)];
      });
    });
  };
  _proto.getQueryState = function getQueryState(queryKey, filters) {
    var _this$queryCache$find2;
    return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;
  };
  _proto.removeQueries = function removeQueries(arg1, arg2) {
    var _parseFilterArgs2 = parseFilterArgs(arg1, arg2), filters = _parseFilterArgs2[0];
    var queryCache = this.queryCache;
    notifyManager.batch(function() {
      queryCache.findAll(filters).forEach(function(query) {
        queryCache.remove(query);
      });
    });
  };
  _proto.resetQueries = function resetQueries(arg1, arg2, arg3) {
    var _this3 = this;
    var _parseFilterArgs3 = parseFilterArgs(arg1, arg2, arg3), filters = _parseFilterArgs3[0], options = _parseFilterArgs3[1];
    var queryCache = this.queryCache;
    var refetchFilters = _extends({}, filters, {
      active: true
    });
    return notifyManager.batch(function() {
      queryCache.findAll(filters).forEach(function(query) {
        query.reset();
      });
      return _this3.refetchQueries(refetchFilters, options);
    });
  };
  _proto.cancelQueries = function cancelQueries(arg1, arg2, arg3) {
    var _this4 = this;
    var _parseFilterArgs4 = parseFilterArgs(arg1, arg2, arg3), filters = _parseFilterArgs4[0], _parseFilterArgs4$ = _parseFilterArgs4[1], cancelOptions = _parseFilterArgs4$ === void 0 ? {} : _parseFilterArgs4$;
    if (typeof cancelOptions.revert === "undefined") {
      cancelOptions.revert = true;
    }
    var promises = notifyManager.batch(function() {
      return _this4.queryCache.findAll(filters).map(function(query) {
        return query.cancel(cancelOptions);
      });
    });
    return Promise.all(promises).then(noop).catch(noop);
  };
  _proto.invalidateQueries = function invalidateQueries(arg1, arg2, arg3) {
    var _ref3, _filters$refetchActiv, _filters$refetchInact, _this5 = this;
    var _parseFilterArgs5 = parseFilterArgs(arg1, arg2, arg3), filters = _parseFilterArgs5[0], options = _parseFilterArgs5[1];
    var refetchFilters = _extends({}, filters, {
      // if filters.refetchActive is not provided and filters.active is explicitly false,
      // e.g. invalidateQueries({ active: false }), we don't want to refetch active queries
      active: (_ref3 = (_filters$refetchActiv = filters.refetchActive) != null ? _filters$refetchActiv : filters.active) != null ? _ref3 : true,
      inactive: (_filters$refetchInact = filters.refetchInactive) != null ? _filters$refetchInact : false
    });
    return notifyManager.batch(function() {
      _this5.queryCache.findAll(filters).forEach(function(query) {
        query.invalidate();
      });
      return _this5.refetchQueries(refetchFilters, options);
    });
  };
  _proto.refetchQueries = function refetchQueries(arg1, arg2, arg3) {
    var _this6 = this;
    var _parseFilterArgs6 = parseFilterArgs(arg1, arg2, arg3), filters = _parseFilterArgs6[0], options = _parseFilterArgs6[1];
    var promises = notifyManager.batch(function() {
      return _this6.queryCache.findAll(filters).map(function(query) {
        return query.fetch(void 0, _extends({}, options, {
          meta: {
            refetchPage: filters == null ? void 0 : filters.refetchPage
          }
        }));
      });
    });
    var promise = Promise.all(promises).then(noop);
    if (!(options == null ? void 0 : options.throwOnError)) {
      promise = promise.catch(noop);
    }
    return promise;
  };
  _proto.fetchQuery = function fetchQuery(arg1, arg2, arg3) {
    var parsedOptions = parseQueryArgs(arg1, arg2, arg3);
    var defaultedOptions = this.defaultQueryOptions(parsedOptions);
    if (typeof defaultedOptions.retry === "undefined") {
      defaultedOptions.retry = false;
    }
    var query = this.queryCache.build(this, defaultedOptions);
    return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);
  };
  _proto.prefetchQuery = function prefetchQuery(arg1, arg2, arg3) {
    return this.fetchQuery(arg1, arg2, arg3).then(noop).catch(noop);
  };
  _proto.fetchInfiniteQuery = function fetchInfiniteQuery(arg1, arg2, arg3) {
    var parsedOptions = parseQueryArgs(arg1, arg2, arg3);
    parsedOptions.behavior = infiniteQueryBehavior();
    return this.fetchQuery(parsedOptions);
  };
  _proto.prefetchInfiniteQuery = function prefetchInfiniteQuery(arg1, arg2, arg3) {
    return this.fetchInfiniteQuery(arg1, arg2, arg3).then(noop).catch(noop);
  };
  _proto.cancelMutations = function cancelMutations() {
    var _this7 = this;
    var promises = notifyManager.batch(function() {
      return _this7.mutationCache.getAll().map(function(mutation) {
        return mutation.cancel();
      });
    });
    return Promise.all(promises).then(noop).catch(noop);
  };
  _proto.resumePausedMutations = function resumePausedMutations() {
    return this.getMutationCache().resumePausedMutations();
  };
  _proto.executeMutation = function executeMutation(options) {
    return this.mutationCache.build(this, options).execute();
  };
  _proto.getQueryCache = function getQueryCache() {
    return this.queryCache;
  };
  _proto.getMutationCache = function getMutationCache() {
    return this.mutationCache;
  };
  _proto.getDefaultOptions = function getDefaultOptions() {
    return this.defaultOptions;
  };
  _proto.setDefaultOptions = function setDefaultOptions(options) {
    this.defaultOptions = options;
  };
  _proto.setQueryDefaults = function setQueryDefaults(queryKey, options) {
    var result = this.queryDefaults.find(function(x) {
      return hashQueryKey(queryKey) === hashQueryKey(x.queryKey);
    });
    if (result) {
      result.defaultOptions = options;
    } else {
      this.queryDefaults.push({
        queryKey,
        defaultOptions: options
      });
    }
  };
  _proto.getQueryDefaults = function getQueryDefaults(queryKey) {
    var _this$queryDefaults$f;
    return queryKey ? (_this$queryDefaults$f = this.queryDefaults.find(function(x) {
      return partialMatchKey(queryKey, x.queryKey);
    })) == null ? void 0 : _this$queryDefaults$f.defaultOptions : void 0;
  };
  _proto.setMutationDefaults = function setMutationDefaults(mutationKey, options) {
    var result = this.mutationDefaults.find(function(x) {
      return hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey);
    });
    if (result) {
      result.defaultOptions = options;
    } else {
      this.mutationDefaults.push({
        mutationKey,
        defaultOptions: options
      });
    }
  };
  _proto.getMutationDefaults = function getMutationDefaults(mutationKey) {
    var _this$mutationDefault;
    return mutationKey ? (_this$mutationDefault = this.mutationDefaults.find(function(x) {
      return partialMatchKey(mutationKey, x.mutationKey);
    })) == null ? void 0 : _this$mutationDefault.defaultOptions : void 0;
  };
  _proto.defaultQueryOptions = function defaultQueryOptions(options) {
    if (options == null ? void 0 : options._defaulted) {
      return options;
    }
    var defaultedOptions = _extends({}, this.defaultOptions.queries, this.getQueryDefaults(options == null ? void 0 : options.queryKey), options, {
      _defaulted: true
    });
    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {
      defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);
    }
    return defaultedOptions;
  };
  _proto.defaultQueryObserverOptions = function defaultQueryObserverOptions(options) {
    return this.defaultQueryOptions(options);
  };
  _proto.defaultMutationOptions = function defaultMutationOptions(options) {
    if (options == null ? void 0 : options._defaulted) {
      return options;
    }
    return _extends({}, this.defaultOptions.mutations, this.getMutationDefaults(options == null ? void 0 : options.mutationKey), options, {
      _defaulted: true
    });
  };
  _proto.clear = function clear() {
    this.queryCache.clear();
    this.mutationCache.clear();
  };
  return QueryClient2;
}();

// node_modules/react-query/es/core/queryObserver.js
var QueryObserver = function(_Subscribable) {
  _inheritsLoose(QueryObserver2, _Subscribable);
  function QueryObserver2(client, options) {
    var _this;
    _this = _Subscribable.call(this) || this;
    _this.client = client;
    _this.options = options;
    _this.trackedProps = [];
    _this.selectError = null;
    _this.bindMethods();
    _this.setOptions(options);
    return _this;
  }
  var _proto = QueryObserver2.prototype;
  _proto.bindMethods = function bindMethods() {
    this.remove = this.remove.bind(this);
    this.refetch = this.refetch.bind(this);
  };
  _proto.onSubscribe = function onSubscribe() {
    if (this.listeners.length === 1) {
      this.currentQuery.addObserver(this);
      if (shouldFetchOnMount(this.currentQuery, this.options)) {
        this.executeFetch();
      }
      this.updateTimers();
    }
  };
  _proto.onUnsubscribe = function onUnsubscribe() {
    if (!this.listeners.length) {
      this.destroy();
    }
  };
  _proto.shouldFetchOnReconnect = function shouldFetchOnReconnect() {
    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnReconnect);
  };
  _proto.shouldFetchOnWindowFocus = function shouldFetchOnWindowFocus() {
    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnWindowFocus);
  };
  _proto.destroy = function destroy() {
    this.listeners = [];
    this.clearTimers();
    this.currentQuery.removeObserver(this);
  };
  _proto.setOptions = function setOptions(options, notifyOptions) {
    var prevOptions = this.options;
    var prevQuery = this.currentQuery;
    this.options = this.client.defaultQueryObserverOptions(options);
    if (typeof this.options.enabled !== "undefined" && typeof this.options.enabled !== "boolean") {
      throw new Error("Expected enabled to be a boolean");
    }
    if (!this.options.queryKey) {
      this.options.queryKey = prevOptions.queryKey;
    }
    this.updateQuery();
    var mounted = this.hasListeners();
    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {
      this.executeFetch();
    }
    this.updateResult(notifyOptions);
    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {
      this.updateStaleTimeout();
    }
    var nextRefetchInterval = this.computeRefetchInterval();
    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {
      this.updateRefetchInterval(nextRefetchInterval);
    }
  };
  _proto.getOptimisticResult = function getOptimisticResult(options) {
    var defaultedOptions = this.client.defaultQueryObserverOptions(options);
    var query = this.client.getQueryCache().build(this.client, defaultedOptions);
    return this.createResult(query, defaultedOptions);
  };
  _proto.getCurrentResult = function getCurrentResult() {
    return this.currentResult;
  };
  _proto.trackResult = function trackResult(result, defaultedOptions) {
    var _this2 = this;
    var trackedResult = {};
    var trackProp = function trackProp2(key) {
      if (!_this2.trackedProps.includes(key)) {
        _this2.trackedProps.push(key);
      }
    };
    Object.keys(result).forEach(function(key) {
      Object.defineProperty(trackedResult, key, {
        configurable: false,
        enumerable: true,
        get: function get() {
          trackProp(key);
          return result[key];
        }
      });
    });
    if (defaultedOptions.useErrorBoundary || defaultedOptions.suspense) {
      trackProp("error");
    }
    return trackedResult;
  };
  _proto.getNextResult = function getNextResult(options) {
    var _this3 = this;
    return new Promise(function(resolve, reject) {
      var unsubscribe = _this3.subscribe(function(result) {
        if (!result.isFetching) {
          unsubscribe();
          if (result.isError && (options == null ? void 0 : options.throwOnError)) {
            reject(result.error);
          } else {
            resolve(result);
          }
        }
      });
    });
  };
  _proto.getCurrentQuery = function getCurrentQuery() {
    return this.currentQuery;
  };
  _proto.remove = function remove() {
    this.client.getQueryCache().remove(this.currentQuery);
  };
  _proto.refetch = function refetch(options) {
    return this.fetch(_extends({}, options, {
      meta: {
        refetchPage: options == null ? void 0 : options.refetchPage
      }
    }));
  };
  _proto.fetchOptimistic = function fetchOptimistic(options) {
    var _this4 = this;
    var defaultedOptions = this.client.defaultQueryObserverOptions(options);
    var query = this.client.getQueryCache().build(this.client, defaultedOptions);
    return query.fetch().then(function() {
      return _this4.createResult(query, defaultedOptions);
    });
  };
  _proto.fetch = function fetch2(fetchOptions) {
    var _this5 = this;
    return this.executeFetch(fetchOptions).then(function() {
      _this5.updateResult();
      return _this5.currentResult;
    });
  };
  _proto.executeFetch = function executeFetch(fetchOptions) {
    this.updateQuery();
    var promise = this.currentQuery.fetch(this.options, fetchOptions);
    if (!(fetchOptions == null ? void 0 : fetchOptions.throwOnError)) {
      promise = promise.catch(noop);
    }
    return promise;
  };
  _proto.updateStaleTimeout = function updateStaleTimeout() {
    var _this6 = this;
    this.clearStaleTimeout();
    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {
      return;
    }
    var time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime);
    var timeout = time + 1;
    this.staleTimeoutId = setTimeout(function() {
      if (!_this6.currentResult.isStale) {
        _this6.updateResult();
      }
    }, timeout);
  };
  _proto.computeRefetchInterval = function computeRefetchInterval() {
    var _this$options$refetch;
    return typeof this.options.refetchInterval === "function" ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;
  };
  _proto.updateRefetchInterval = function updateRefetchInterval(nextInterval) {
    var _this7 = this;
    this.clearRefetchInterval();
    this.currentRefetchInterval = nextInterval;
    if (isServer || this.options.enabled === false || !isValidTimeout(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {
      return;
    }
    this.refetchIntervalId = setInterval(function() {
      if (_this7.options.refetchIntervalInBackground || focusManager.isFocused()) {
        _this7.executeFetch();
      }
    }, this.currentRefetchInterval);
  };
  _proto.updateTimers = function updateTimers() {
    this.updateStaleTimeout();
    this.updateRefetchInterval(this.computeRefetchInterval());
  };
  _proto.clearTimers = function clearTimers() {
    this.clearStaleTimeout();
    this.clearRefetchInterval();
  };
  _proto.clearStaleTimeout = function clearStaleTimeout() {
    if (this.staleTimeoutId) {
      clearTimeout(this.staleTimeoutId);
      this.staleTimeoutId = void 0;
    }
  };
  _proto.clearRefetchInterval = function clearRefetchInterval() {
    if (this.refetchIntervalId) {
      clearInterval(this.refetchIntervalId);
      this.refetchIntervalId = void 0;
    }
  };
  _proto.createResult = function createResult(query, options) {
    var prevQuery = this.currentQuery;
    var prevOptions = this.options;
    var prevResult = this.currentResult;
    var prevResultState = this.currentResultState;
    var prevResultOptions = this.currentResultOptions;
    var queryChange = query !== prevQuery;
    var queryInitialState = queryChange ? query.state : this.currentQueryInitialState;
    var prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;
    var state = query.state;
    var dataUpdatedAt = state.dataUpdatedAt, error = state.error, errorUpdatedAt = state.errorUpdatedAt, isFetching = state.isFetching, status = state.status;
    var isPreviousData = false;
    var isPlaceholderData = false;
    var data;
    if (options.optimisticResults) {
      var mounted = this.hasListeners();
      var fetchOnMount = !mounted && shouldFetchOnMount(query, options);
      var fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);
      if (fetchOnMount || fetchOptionally) {
        isFetching = true;
        if (!dataUpdatedAt) {
          status = "loading";
        }
      }
    }
    if (options.keepPreviousData && !state.dataUpdateCount && (prevQueryResult == null ? void 0 : prevQueryResult.isSuccess) && status !== "error") {
      data = prevQueryResult.data;
      dataUpdatedAt = prevQueryResult.dataUpdatedAt;
      status = prevQueryResult.status;
      isPreviousData = true;
    } else if (options.select && typeof state.data !== "undefined") {
      if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === this.selectFn) {
        data = this.selectResult;
      } else {
        try {
          this.selectFn = options.select;
          data = options.select(state.data);
          if (options.structuralSharing !== false) {
            data = replaceEqualDeep(prevResult == null ? void 0 : prevResult.data, data);
          }
          this.selectResult = data;
          this.selectError = null;
        } catch (selectError) {
          getLogger().error(selectError);
          this.selectError = selectError;
        }
      }
    } else {
      data = state.data;
    }
    if (typeof options.placeholderData !== "undefined" && typeof data === "undefined" && (status === "loading" || status === "idle")) {
      var placeholderData;
      if ((prevResult == null ? void 0 : prevResult.isPlaceholderData) && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {
        placeholderData = prevResult.data;
      } else {
        placeholderData = typeof options.placeholderData === "function" ? options.placeholderData() : options.placeholderData;
        if (options.select && typeof placeholderData !== "undefined") {
          try {
            placeholderData = options.select(placeholderData);
            if (options.structuralSharing !== false) {
              placeholderData = replaceEqualDeep(prevResult == null ? void 0 : prevResult.data, placeholderData);
            }
            this.selectError = null;
          } catch (selectError) {
            getLogger().error(selectError);
            this.selectError = selectError;
          }
        }
      }
      if (typeof placeholderData !== "undefined") {
        status = "success";
        data = placeholderData;
        isPlaceholderData = true;
      }
    }
    if (this.selectError) {
      error = this.selectError;
      data = this.selectResult;
      errorUpdatedAt = Date.now();
      status = "error";
    }
    var result = {
      status,
      isLoading: status === "loading",
      isSuccess: status === "success",
      isError: status === "error",
      isIdle: status === "idle",
      data,
      dataUpdatedAt,
      error,
      errorUpdatedAt,
      failureCount: state.fetchFailureCount,
      errorUpdateCount: state.errorUpdateCount,
      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,
      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,
      isFetching,
      isRefetching: isFetching && status !== "loading",
      isLoadingError: status === "error" && state.dataUpdatedAt === 0,
      isPlaceholderData,
      isPreviousData,
      isRefetchError: status === "error" && state.dataUpdatedAt !== 0,
      isStale: isStale(query, options),
      refetch: this.refetch,
      remove: this.remove
    };
    return result;
  };
  _proto.shouldNotifyListeners = function shouldNotifyListeners(result, prevResult) {
    if (!prevResult) {
      return true;
    }
    var _this$options = this.options, notifyOnChangeProps = _this$options.notifyOnChangeProps, notifyOnChangePropsExclusions = _this$options.notifyOnChangePropsExclusions;
    if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {
      return true;
    }
    if (notifyOnChangeProps === "tracked" && !this.trackedProps.length) {
      return true;
    }
    var includedProps = notifyOnChangeProps === "tracked" ? this.trackedProps : notifyOnChangeProps;
    return Object.keys(result).some(function(key) {
      var typedKey = key;
      var changed = result[typedKey] !== prevResult[typedKey];
      var isIncluded = includedProps == null ? void 0 : includedProps.some(function(x) {
        return x === key;
      });
      var isExcluded = notifyOnChangePropsExclusions == null ? void 0 : notifyOnChangePropsExclusions.some(function(x) {
        return x === key;
      });
      return changed && !isExcluded && (!includedProps || isIncluded);
    });
  };
  _proto.updateResult = function updateResult(notifyOptions) {
    var prevResult = this.currentResult;
    this.currentResult = this.createResult(this.currentQuery, this.options);
    this.currentResultState = this.currentQuery.state;
    this.currentResultOptions = this.options;
    if (shallowEqualObjects(this.currentResult, prevResult)) {
      return;
    }
    var defaultNotifyOptions = {
      cache: true
    };
    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && this.shouldNotifyListeners(this.currentResult, prevResult)) {
      defaultNotifyOptions.listeners = true;
    }
    this.notify(_extends({}, defaultNotifyOptions, notifyOptions));
  };
  _proto.updateQuery = function updateQuery() {
    var query = this.client.getQueryCache().build(this.client, this.options);
    if (query === this.currentQuery) {
      return;
    }
    var prevQuery = this.currentQuery;
    this.currentQuery = query;
    this.currentQueryInitialState = query.state;
    this.previousQueryResult = this.currentResult;
    if (this.hasListeners()) {
      prevQuery == null ? void 0 : prevQuery.removeObserver(this);
      query.addObserver(this);
    }
  };
  _proto.onQueryUpdate = function onQueryUpdate(action) {
    var notifyOptions = {};
    if (action.type === "success") {
      notifyOptions.onSuccess = true;
    } else if (action.type === "error" && !isCancelledError(action.error)) {
      notifyOptions.onError = true;
    }
    this.updateResult(notifyOptions);
    if (this.hasListeners()) {
      this.updateTimers();
    }
  };
  _proto.notify = function notify(notifyOptions) {
    var _this8 = this;
    notifyManager.batch(function() {
      if (notifyOptions.onSuccess) {
        _this8.options.onSuccess == null ? void 0 : _this8.options.onSuccess(_this8.currentResult.data);
        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(_this8.currentResult.data, null);
      } else if (notifyOptions.onError) {
        _this8.options.onError == null ? void 0 : _this8.options.onError(_this8.currentResult.error);
        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(void 0, _this8.currentResult.error);
      }
      if (notifyOptions.listeners) {
        _this8.listeners.forEach(function(listener) {
          listener(_this8.currentResult);
        });
      }
      if (notifyOptions.cache) {
        _this8.client.getQueryCache().notify({
          query: _this8.currentQuery,
          type: "observerResultsUpdated"
        });
      }
    });
  };
  return QueryObserver2;
}(Subscribable);
function shouldLoadOnMount(query, options) {
  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === "error" && options.retryOnMount === false);
}
function shouldFetchOnMount(query, options) {
  return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);
}
function shouldFetchOn(query, options, field) {
  if (options.enabled !== false) {
    var value = typeof field === "function" ? field(query) : field;
    return value === "always" || value !== false && isStale(query, options);
  }
  return false;
}
function shouldFetchOptionally(query, prevQuery, options, prevOptions) {
  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== "error") && isStale(query, options);
}
function isStale(query, options) {
  return query.isStaleByTime(options.staleTime);
}

// node_modules/react-query/es/core/queriesObserver.js
var QueriesObserver = function(_Subscribable) {
  _inheritsLoose(QueriesObserver2, _Subscribable);
  function QueriesObserver2(client, queries) {
    var _this;
    _this = _Subscribable.call(this) || this;
    _this.client = client;
    _this.queries = [];
    _this.result = [];
    _this.observers = [];
    _this.observersMap = {};
    if (queries) {
      _this.setQueries(queries);
    }
    return _this;
  }
  var _proto = QueriesObserver2.prototype;
  _proto.onSubscribe = function onSubscribe() {
    var _this2 = this;
    if (this.listeners.length === 1) {
      this.observers.forEach(function(observer) {
        observer.subscribe(function(result) {
          _this2.onUpdate(observer, result);
        });
      });
    }
  };
  _proto.onUnsubscribe = function onUnsubscribe() {
    if (!this.listeners.length) {
      this.destroy();
    }
  };
  _proto.destroy = function destroy() {
    this.listeners = [];
    this.observers.forEach(function(observer) {
      observer.destroy();
    });
  };
  _proto.setQueries = function setQueries(queries, notifyOptions) {
    this.queries = queries;
    this.updateObservers(notifyOptions);
  };
  _proto.getCurrentResult = function getCurrentResult() {
    return this.result;
  };
  _proto.getOptimisticResult = function getOptimisticResult(queries) {
    return this.findMatchingObservers(queries).map(function(match) {
      return match.observer.getOptimisticResult(match.defaultedQueryOptions);
    });
  };
  _proto.findMatchingObservers = function findMatchingObservers(queries) {
    var _this3 = this;
    var prevObservers = this.observers;
    var defaultedQueryOptions = queries.map(function(options) {
      return _this3.client.defaultQueryObserverOptions(options);
    });
    var matchingObservers = defaultedQueryOptions.flatMap(function(defaultedOptions) {
      var match = prevObservers.find(function(observer) {
        return observer.options.queryHash === defaultedOptions.queryHash;
      });
      if (match != null) {
        return [{
          defaultedQueryOptions: defaultedOptions,
          observer: match
        }];
      }
      return [];
    });
    var matchedQueryHashes = matchingObservers.map(function(match) {
      return match.defaultedQueryOptions.queryHash;
    });
    var unmatchedQueries = defaultedQueryOptions.filter(function(defaultedOptions) {
      return !matchedQueryHashes.includes(defaultedOptions.queryHash);
    });
    var unmatchedObservers = prevObservers.filter(function(prevObserver) {
      return !matchingObservers.some(function(match) {
        return match.observer === prevObserver;
      });
    });
    var newOrReusedObservers = unmatchedQueries.map(function(options, index) {
      if (options.keepPreviousData) {
        var previouslyUsedObserver = unmatchedObservers[index];
        if (previouslyUsedObserver !== void 0) {
          return {
            defaultedQueryOptions: options,
            observer: previouslyUsedObserver
          };
        }
      }
      return {
        defaultedQueryOptions: options,
        observer: _this3.getObserver(options)
      };
    });
    var sortMatchesByOrderOfQueries = function sortMatchesByOrderOfQueries2(a, b) {
      return defaultedQueryOptions.indexOf(a.defaultedQueryOptions) - defaultedQueryOptions.indexOf(b.defaultedQueryOptions);
    };
    return matchingObservers.concat(newOrReusedObservers).sort(sortMatchesByOrderOfQueries);
  };
  _proto.getObserver = function getObserver(options) {
    var defaultedOptions = this.client.defaultQueryObserverOptions(options);
    var currentObserver = this.observersMap[defaultedOptions.queryHash];
    return currentObserver != null ? currentObserver : new QueryObserver(this.client, defaultedOptions);
  };
  _proto.updateObservers = function updateObservers(notifyOptions) {
    var _this4 = this;
    notifyManager.batch(function() {
      var prevObservers = _this4.observers;
      var newObserverMatches = _this4.findMatchingObservers(_this4.queries);
      newObserverMatches.forEach(function(match) {
        return match.observer.setOptions(match.defaultedQueryOptions, notifyOptions);
      });
      var newObservers = newObserverMatches.map(function(match) {
        return match.observer;
      });
      var newObserversMap = Object.fromEntries(newObservers.map(function(observer) {
        return [observer.options.queryHash, observer];
      }));
      var newResult = newObservers.map(function(observer) {
        return observer.getCurrentResult();
      });
      var hasIndexChange = newObservers.some(function(observer, index) {
        return observer !== prevObservers[index];
      });
      if (prevObservers.length === newObservers.length && !hasIndexChange) {
        return;
      }
      _this4.observers = newObservers;
      _this4.observersMap = newObserversMap;
      _this4.result = newResult;
      if (!_this4.hasListeners()) {
        return;
      }
      difference(prevObservers, newObservers).forEach(function(observer) {
        observer.destroy();
      });
      difference(newObservers, prevObservers).forEach(function(observer) {
        observer.subscribe(function(result) {
          _this4.onUpdate(observer, result);
        });
      });
      _this4.notify();
    });
  };
  _proto.onUpdate = function onUpdate(observer, result) {
    var index = this.observers.indexOf(observer);
    if (index !== -1) {
      this.result = replaceAt(this.result, index, result);
      this.notify();
    }
  };
  _proto.notify = function notify() {
    var _this5 = this;
    notifyManager.batch(function() {
      _this5.listeners.forEach(function(listener) {
        listener(_this5.result);
      });
    });
  };
  return QueriesObserver2;
}(Subscribable);

// node_modules/react-query/es/core/infiniteQueryObserver.js
var InfiniteQueryObserver = function(_QueryObserver) {
  _inheritsLoose(InfiniteQueryObserver2, _QueryObserver);
  function InfiniteQueryObserver2(client, options) {
    return _QueryObserver.call(this, client, options) || this;
  }
  var _proto = InfiniteQueryObserver2.prototype;
  _proto.bindMethods = function bindMethods() {
    _QueryObserver.prototype.bindMethods.call(this);
    this.fetchNextPage = this.fetchNextPage.bind(this);
    this.fetchPreviousPage = this.fetchPreviousPage.bind(this);
  };
  _proto.setOptions = function setOptions(options, notifyOptions) {
    _QueryObserver.prototype.setOptions.call(this, _extends({}, options, {
      behavior: infiniteQueryBehavior()
    }), notifyOptions);
  };
  _proto.getOptimisticResult = function getOptimisticResult(options) {
    options.behavior = infiniteQueryBehavior();
    return _QueryObserver.prototype.getOptimisticResult.call(this, options);
  };
  _proto.fetchNextPage = function fetchNextPage(options) {
    var _options$cancelRefetc;
    return this.fetch({
      // TODO consider removing `?? true` in future breaking change, to be consistent with `refetch` API (see https://github.com/tannerlinsley/react-query/issues/2617)
      cancelRefetch: (_options$cancelRefetc = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc : true,
      throwOnError: options == null ? void 0 : options.throwOnError,
      meta: {
        fetchMore: {
          direction: "forward",
          pageParam: options == null ? void 0 : options.pageParam
        }
      }
    });
  };
  _proto.fetchPreviousPage = function fetchPreviousPage(options) {
    var _options$cancelRefetc2;
    return this.fetch({
      // TODO consider removing `?? true` in future breaking change, to be consistent with `refetch` API (see https://github.com/tannerlinsley/react-query/issues/2617)
      cancelRefetch: (_options$cancelRefetc2 = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc2 : true,
      throwOnError: options == null ? void 0 : options.throwOnError,
      meta: {
        fetchMore: {
          direction: "backward",
          pageParam: options == null ? void 0 : options.pageParam
        }
      }
    });
  };
  _proto.createResult = function createResult(query, options) {
    var _state$data, _state$data2, _state$fetchMeta, _state$fetchMeta$fetc, _state$fetchMeta2, _state$fetchMeta2$fet;
    var state = query.state;
    var result = _QueryObserver.prototype.createResult.call(this, query, options);
    return _extends({}, result, {
      fetchNextPage: this.fetchNextPage,
      fetchPreviousPage: this.fetchPreviousPage,
      hasNextPage: hasNextPage(options, (_state$data = state.data) == null ? void 0 : _state$data.pages),
      hasPreviousPage: hasPreviousPage(options, (_state$data2 = state.data) == null ? void 0 : _state$data2.pages),
      isFetchingNextPage: state.isFetching && ((_state$fetchMeta = state.fetchMeta) == null ? void 0 : (_state$fetchMeta$fetc = _state$fetchMeta.fetchMore) == null ? void 0 : _state$fetchMeta$fetc.direction) === "forward",
      isFetchingPreviousPage: state.isFetching && ((_state$fetchMeta2 = state.fetchMeta) == null ? void 0 : (_state$fetchMeta2$fet = _state$fetchMeta2.fetchMore) == null ? void 0 : _state$fetchMeta2$fet.direction) === "backward"
    });
  };
  return InfiniteQueryObserver2;
}(QueryObserver);

// node_modules/react-query/es/core/mutationObserver.js
var MutationObserver = function(_Subscribable) {
  _inheritsLoose(MutationObserver2, _Subscribable);
  function MutationObserver2(client, options) {
    var _this;
    _this = _Subscribable.call(this) || this;
    _this.client = client;
    _this.setOptions(options);
    _this.bindMethods();
    _this.updateResult();
    return _this;
  }
  var _proto = MutationObserver2.prototype;
  _proto.bindMethods = function bindMethods() {
    this.mutate = this.mutate.bind(this);
    this.reset = this.reset.bind(this);
  };
  _proto.setOptions = function setOptions(options) {
    this.options = this.client.defaultMutationOptions(options);
  };
  _proto.onUnsubscribe = function onUnsubscribe() {
    if (!this.listeners.length) {
      var _this$currentMutation;
      (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.removeObserver(this);
    }
  };
  _proto.onMutationUpdate = function onMutationUpdate(action) {
    this.updateResult();
    var notifyOptions = {
      listeners: true
    };
    if (action.type === "success") {
      notifyOptions.onSuccess = true;
    } else if (action.type === "error") {
      notifyOptions.onError = true;
    }
    this.notify(notifyOptions);
  };
  _proto.getCurrentResult = function getCurrentResult() {
    return this.currentResult;
  };
  _proto.reset = function reset() {
    this.currentMutation = void 0;
    this.updateResult();
    this.notify({
      listeners: true
    });
  };
  _proto.mutate = function mutate(variables, options) {
    this.mutateOptions = options;
    if (this.currentMutation) {
      this.currentMutation.removeObserver(this);
    }
    this.currentMutation = this.client.getMutationCache().build(this.client, _extends({}, this.options, {
      variables: typeof variables !== "undefined" ? variables : this.options.variables
    }));
    this.currentMutation.addObserver(this);
    return this.currentMutation.execute();
  };
  _proto.updateResult = function updateResult() {
    var state = this.currentMutation ? this.currentMutation.state : getDefaultState();
    var result = _extends({}, state, {
      isLoading: state.status === "loading",
      isSuccess: state.status === "success",
      isError: state.status === "error",
      isIdle: state.status === "idle",
      mutate: this.mutate,
      reset: this.reset
    });
    this.currentResult = result;
  };
  _proto.notify = function notify(options) {
    var _this2 = this;
    notifyManager.batch(function() {
      if (_this2.mutateOptions) {
        if (options.onSuccess) {
          _this2.mutateOptions.onSuccess == null ? void 0 : _this2.mutateOptions.onSuccess(_this2.currentResult.data, _this2.currentResult.variables, _this2.currentResult.context);
          _this2.mutateOptions.onSettled == null ? void 0 : _this2.mutateOptions.onSettled(_this2.currentResult.data, null, _this2.currentResult.variables, _this2.currentResult.context);
        } else if (options.onError) {
          _this2.mutateOptions.onError == null ? void 0 : _this2.mutateOptions.onError(_this2.currentResult.error, _this2.currentResult.variables, _this2.currentResult.context);
          _this2.mutateOptions.onSettled == null ? void 0 : _this2.mutateOptions.onSettled(void 0, _this2.currentResult.error, _this2.currentResult.variables, _this2.currentResult.context);
        }
      }
      if (options.listeners) {
        _this2.listeners.forEach(function(listener) {
          listener(_this2.currentResult);
        });
      }
    });
  };
  return MutationObserver2;
}(Subscribable);

// node_modules/react-query/es/react/reactBatchedUpdates.js
var import_react_dom = __toESM(require_react_dom());
var unstable_batchedUpdates = import_react_dom.default.unstable_batchedUpdates;

// node_modules/react-query/es/react/setBatchUpdatesFn.js
notifyManager.setBatchNotifyFunction(unstable_batchedUpdates);

// node_modules/react-query/es/react/logger.js
var logger2 = console;

// node_modules/react-query/es/react/setLogger.js
setLogger(logger2);

// node_modules/react-query/es/react/QueryClientProvider.js
var import_react = __toESM(require_react());
var defaultContext = import_react.default.createContext(void 0);
var QueryClientSharingContext = import_react.default.createContext(false);
function getQueryClientContext(contextSharing) {
  if (contextSharing && typeof window !== "undefined") {
    if (!window.ReactQueryClientContext) {
      window.ReactQueryClientContext = defaultContext;
    }
    return window.ReactQueryClientContext;
  }
  return defaultContext;
}
var useQueryClient = function useQueryClient2() {
  var queryClient2 = import_react.default.useContext(getQueryClientContext(import_react.default.useContext(QueryClientSharingContext)));
  if (!queryClient2) {
    throw new Error("No QueryClient set, use QueryClientProvider to set one");
  }
  return queryClient2;
};
var QueryClientProvider = function QueryClientProvider2(_ref) {
  var client = _ref.client, _ref$contextSharing = _ref.contextSharing, contextSharing = _ref$contextSharing === void 0 ? false : _ref$contextSharing, children = _ref.children;
  import_react.default.useEffect(function() {
    client.mount();
    return function() {
      client.unmount();
    };
  }, [client]);
  var Context = getQueryClientContext(contextSharing);
  return import_react.default.createElement(QueryClientSharingContext.Provider, {
    value: contextSharing
  }, import_react.default.createElement(Context.Provider, {
    value: client
  }, children));
};

// node_modules/react-query/es/react/QueryErrorResetBoundary.js
var import_react2 = __toESM(require_react());
function createValue() {
  var _isReset = false;
  return {
    clearReset: function clearReset() {
      _isReset = false;
    },
    reset: function reset() {
      _isReset = true;
    },
    isReset: function isReset() {
      return _isReset;
    }
  };
}
var QueryErrorResetBoundaryContext = import_react2.default.createContext(createValue());
var useQueryErrorResetBoundary = function useQueryErrorResetBoundary2() {
  return import_react2.default.useContext(QueryErrorResetBoundaryContext);
};

// node_modules/react-query/es/react/useIsFetching.js
var import_react3 = __toESM(require_react());

// node_modules/react-query/es/react/useIsMutating.js
var import_react4 = __toESM(require_react());

// node_modules/react-query/es/react/useMutation.js
var import_react5 = __toESM(require_react());

// node_modules/react-query/es/react/utils.js
function shouldThrowError(suspense, _useErrorBoundary, params) {
  if (typeof _useErrorBoundary === "function") {
    return _useErrorBoundary.apply(void 0, params);
  }
  if (typeof _useErrorBoundary === "boolean")
    return _useErrorBoundary;
  return !!suspense;
}

// node_modules/react-query/es/react/useMutation.js
function useMutation(arg1, arg2, arg3) {
  var mountedRef = import_react5.default.useRef(false);
  var _React$useState = import_react5.default.useState(0), forceUpdate = _React$useState[1];
  var options = parseMutationArgs(arg1, arg2, arg3);
  var queryClient2 = useQueryClient();
  var obsRef = import_react5.default.useRef();
  if (!obsRef.current) {
    obsRef.current = new MutationObserver(queryClient2, options);
  } else {
    obsRef.current.setOptions(options);
  }
  var currentResult = obsRef.current.getCurrentResult();
  import_react5.default.useEffect(function() {
    mountedRef.current = true;
    var unsubscribe = obsRef.current.subscribe(notifyManager.batchCalls(function() {
      if (mountedRef.current) {
        forceUpdate(function(x) {
          return x + 1;
        });
      }
    }));
    return function() {
      mountedRef.current = false;
      unsubscribe();
    };
  }, []);
  var mutate = import_react5.default.useCallback(function(variables, mutateOptions) {
    obsRef.current.mutate(variables, mutateOptions).catch(noop);
  }, []);
  if (currentResult.error && shouldThrowError(void 0, obsRef.current.options.useErrorBoundary, [currentResult.error])) {
    throw currentResult.error;
  }
  return _extends({}, currentResult, {
    mutate,
    mutateAsync: currentResult.mutate
  });
}

// node_modules/react-query/es/react/useBaseQuery.js
var import_react6 = __toESM(require_react());
function useBaseQuery(options, Observer) {
  var mountedRef = import_react6.default.useRef(false);
  var _React$useState = import_react6.default.useState(0), forceUpdate = _React$useState[1];
  var queryClient2 = useQueryClient();
  var errorResetBoundary = useQueryErrorResetBoundary();
  var defaultedOptions = queryClient2.defaultQueryObserverOptions(options);
  defaultedOptions.optimisticResults = true;
  if (defaultedOptions.onError) {
    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);
  }
  if (defaultedOptions.onSuccess) {
    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);
  }
  if (defaultedOptions.onSettled) {
    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);
  }
  if (defaultedOptions.suspense) {
    if (typeof defaultedOptions.staleTime !== "number") {
      defaultedOptions.staleTime = 1e3;
    }
    if (defaultedOptions.cacheTime === 0) {
      defaultedOptions.cacheTime = 1;
    }
  }
  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {
    if (!errorResetBoundary.isReset()) {
      defaultedOptions.retryOnMount = false;
    }
  }
  var _React$useState2 = import_react6.default.useState(function() {
    return new Observer(queryClient2, defaultedOptions);
  }), observer = _React$useState2[0];
  var result = observer.getOptimisticResult(defaultedOptions);
  import_react6.default.useEffect(function() {
    mountedRef.current = true;
    errorResetBoundary.clearReset();
    var unsubscribe = observer.subscribe(notifyManager.batchCalls(function() {
      if (mountedRef.current) {
        forceUpdate(function(x) {
          return x + 1;
        });
      }
    }));
    observer.updateResult();
    return function() {
      mountedRef.current = false;
      unsubscribe();
    };
  }, [errorResetBoundary, observer]);
  import_react6.default.useEffect(function() {
    observer.setOptions(defaultedOptions, {
      listeners: false
    });
  }, [defaultedOptions, observer]);
  if (defaultedOptions.suspense && result.isLoading) {
    throw observer.fetchOptimistic(defaultedOptions).then(function(_ref) {
      var data = _ref.data;
      defaultedOptions.onSuccess == null ? void 0 : defaultedOptions.onSuccess(data);
      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(data, null);
    }).catch(function(error) {
      errorResetBoundary.clearReset();
      defaultedOptions.onError == null ? void 0 : defaultedOptions.onError(error);
      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(void 0, error);
    });
  }
  if (result.isError && !errorResetBoundary.isReset() && !result.isFetching && shouldThrowError(defaultedOptions.suspense, defaultedOptions.useErrorBoundary, [result.error, observer.getCurrentQuery()])) {
    throw result.error;
  }
  if (defaultedOptions.notifyOnChangeProps === "tracked") {
    result = observer.trackResult(result, defaultedOptions);
  }
  return result;
}

// node_modules/react-query/es/react/useQuery.js
function useQuery(arg1, arg2, arg3) {
  var parsedOptions = parseQueryArgs(arg1, arg2, arg3);
  return useBaseQuery(parsedOptions, QueryObserver);
}

// node_modules/react-query/es/react/useQueries.js
var import_react7 = __toESM(require_react());
function useQueries(queries) {
  var mountedRef = import_react7.default.useRef(false);
  var _React$useState = import_react7.default.useState(0), forceUpdate = _React$useState[1];
  var queryClient2 = useQueryClient();
  var defaultedQueries = (0, import_react7.useMemo)(function() {
    return queries.map(function(options) {
      var defaultedOptions = queryClient2.defaultQueryObserverOptions(options);
      defaultedOptions.optimisticResults = true;
      return defaultedOptions;
    });
  }, [queries, queryClient2]);
  var _React$useState2 = import_react7.default.useState(function() {
    return new QueriesObserver(queryClient2, defaultedQueries);
  }), observer = _React$useState2[0];
  var result = observer.getOptimisticResult(defaultedQueries);
  import_react7.default.useEffect(function() {
    mountedRef.current = true;
    var unsubscribe = observer.subscribe(notifyManager.batchCalls(function() {
      if (mountedRef.current) {
        forceUpdate(function(x) {
          return x + 1;
        });
      }
    }));
    return function() {
      mountedRef.current = false;
      unsubscribe();
    };
  }, [observer]);
  import_react7.default.useEffect(function() {
    observer.setQueries(defaultedQueries, {
      listeners: false
    });
  }, [defaultedQueries, observer]);
  return result;
}

// node_modules/react-query/es/react/Hydrate.js
var import_react8 = __toESM(require_react());

// node_modules/@strapi/admin/dist/admin/chunks/useEnterprise-Dy8wMNV5.mjs
var React9 = __toESM(require_react(), 1);
function isEnterprise() {
  return window.strapi.isEE;
}
var useEnterprise = (ceData, eeCallback, opts = {}) => {
  const { defaultValue = null, combine = (_ceData, eeData) => eeData, enabled = true } = opts;
  const eeCallbackRef = useCallbackRef(eeCallback);
  const combineCallbackRef = useCallbackRef(combine);
  const [{ data }, setData] = React9.useState({
    data: isEnterprise() && enabled ? defaultValue : ceData
  });
  React9.useEffect(() => {
    async function importEE() {
      const eeData = await eeCallbackRef();
      const combinedValue = combineCallbackRef(ceData, eeData);
      setData({
        data: combinedValue ? combinedValue : eeData
      });
    }
    if (isEnterprise() && enabled) {
      importEE();
    }
  }, [
    ceData,
    eeCallbackRef,
    combineCallbackRef,
    enabled
  ]);
  return data;
};

// node_modules/@strapi/admin/dist/admin/chunks/index-BUGouNML.mjs
var import_camelCase = __toESM(require_camelCase(), 1);

// node_modules/fractional-indexing/src/index.js
var BASE_62_DIGITS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
function midpoint(a, b, digits) {
  const zero = digits[0];
  if (b != null && a >= b) {
    throw new Error(a + " >= " + b);
  }
  if (a.slice(-1) === zero || b && b.slice(-1) === zero) {
    throw new Error("trailing zero");
  }
  if (b) {
    let n = 0;
    while ((a[n] || zero) === b[n]) {
      n++;
    }
    if (n > 0) {
      return b.slice(0, n) + midpoint(a.slice(n), b.slice(n), digits);
    }
  }
  const digitA = a ? digits.indexOf(a[0]) : 0;
  const digitB = b != null ? digits.indexOf(b[0]) : digits.length;
  if (digitB - digitA > 1) {
    const midDigit = Math.round(0.5 * (digitA + digitB));
    return digits[midDigit];
  } else {
    if (b && b.length > 1) {
      return b.slice(0, 1);
    } else {
      return digits[digitA] + midpoint(a.slice(1), null, digits);
    }
  }
}
function validateInteger(int) {
  if (int.length !== getIntegerLength(int[0])) {
    throw new Error("invalid integer part of order key: " + int);
  }
}
function getIntegerLength(head) {
  if (head >= "a" && head <= "z") {
    return head.charCodeAt(0) - "a".charCodeAt(0) + 2;
  } else if (head >= "A" && head <= "Z") {
    return "Z".charCodeAt(0) - head.charCodeAt(0) + 2;
  } else {
    throw new Error("invalid order key head: " + head);
  }
}
function getIntegerPart(key) {
  const integerPartLength = getIntegerLength(key[0]);
  if (integerPartLength > key.length) {
    throw new Error("invalid order key: " + key);
  }
  return key.slice(0, integerPartLength);
}
function validateOrderKey(key, digits) {
  if (key === "A" + digits[0].repeat(26)) {
    throw new Error("invalid order key: " + key);
  }
  const i = getIntegerPart(key);
  const f = key.slice(i.length);
  if (f.slice(-1) === digits[0]) {
    throw new Error("invalid order key: " + key);
  }
}
function incrementInteger(x, digits) {
  validateInteger(x);
  const [head, ...digs] = x.split("");
  let carry = true;
  for (let i = digs.length - 1; carry && i >= 0; i--) {
    const d = digits.indexOf(digs[i]) + 1;
    if (d === digits.length) {
      digs[i] = digits[0];
    } else {
      digs[i] = digits[d];
      carry = false;
    }
  }
  if (carry) {
    if (head === "Z") {
      return "a" + digits[0];
    }
    if (head === "z") {
      return null;
    }
    const h = String.fromCharCode(head.charCodeAt(0) + 1);
    if (h > "a") {
      digs.push(digits[0]);
    } else {
      digs.pop();
    }
    return h + digs.join("");
  } else {
    return head + digs.join("");
  }
}
function decrementInteger(x, digits) {
  validateInteger(x);
  const [head, ...digs] = x.split("");
  let borrow = true;
  for (let i = digs.length - 1; borrow && i >= 0; i--) {
    const d = digits.indexOf(digs[i]) - 1;
    if (d === -1) {
      digs[i] = digits.slice(-1);
    } else {
      digs[i] = digits[d];
      borrow = false;
    }
  }
  if (borrow) {
    if (head === "a") {
      return "Z" + digits.slice(-1);
    }
    if (head === "A") {
      return null;
    }
    const h = String.fromCharCode(head.charCodeAt(0) - 1);
    if (h < "Z") {
      digs.push(digits.slice(-1));
    } else {
      digs.pop();
    }
    return h + digs.join("");
  } else {
    return head + digs.join("");
  }
}
function generateKeyBetween(a, b, digits = BASE_62_DIGITS) {
  if (a != null) {
    validateOrderKey(a, digits);
  }
  if (b != null) {
    validateOrderKey(b, digits);
  }
  if (a != null && b != null && a >= b) {
    throw new Error(a + " >= " + b);
  }
  if (a == null) {
    if (b == null) {
      return "a" + digits[0];
    }
    const ib2 = getIntegerPart(b);
    const fb2 = b.slice(ib2.length);
    if (ib2 === "A" + digits[0].repeat(26)) {
      return ib2 + midpoint("", fb2, digits);
    }
    if (ib2 < b) {
      return ib2;
    }
    const res = decrementInteger(ib2, digits);
    if (res == null) {
      throw new Error("cannot decrement any more");
    }
    return res;
  }
  if (b == null) {
    const ia2 = getIntegerPart(a);
    const fa2 = a.slice(ia2.length);
    const i2 = incrementInteger(ia2, digits);
    return i2 == null ? ia2 + midpoint(fa2, null, digits) : i2;
  }
  const ia = getIntegerPart(a);
  const fa = a.slice(ia.length);
  const ib = getIntegerPart(b);
  const fb = b.slice(ib.length);
  if (ia === ib) {
    return ia + midpoint(fa, fb, digits);
  }
  const i = incrementInteger(ia, digits);
  if (i == null) {
    throw new Error("cannot increment any more");
  }
  if (i < b) {
    return i;
  }
  return ia + midpoint(fa, null, digits);
}
function generateNKeysBetween(a, b, n, digits = BASE_62_DIGITS) {
  if (n === 0) {
    return [];
  }
  if (n === 1) {
    return [generateKeyBetween(a, b, digits)];
  }
  if (b == null) {
    let c2 = generateKeyBetween(a, b, digits);
    const result = [c2];
    for (let i = 0; i < n - 1; i++) {
      c2 = generateKeyBetween(c2, b, digits);
      result.push(c2);
    }
    return result;
  }
  if (a == null) {
    let c2 = generateKeyBetween(a, b, digits);
    const result = [c2];
    for (let i = 0; i < n - 1; i++) {
      c2 = generateKeyBetween(a, c2, digits);
      result.push(c2);
    }
    result.reverse();
    return result;
  }
  const mid = Math.floor(n / 2);
  const c = generateKeyBetween(a, b, digits);
  return [
    ...generateNKeysBetween(a, c, mid, digits),
    c,
    ...generateNKeysBetween(c, b, n - mid - 1, digits)
  ];
}

// node_modules/@strapi/admin/dist/admin/chunks/index-BUGouNML.mjs
var import_isEqual = __toESM(require_isEqual(), 1);
var import_omit = __toESM(require_omit(), 1);

// node_modules/formik/node_modules/deepmerge/dist/es.js
var isMergeableObject = function isMergeableObject2(value) {
  return isNonNullObject(value) && !isSpecial(value);
};
function isNonNullObject(value) {
  return !!value && typeof value === "object";
}
function isSpecial(value) {
  var stringValue = Object.prototype.toString.call(value);
  return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
}
var canUseSymbol = typeof Symbol === "function" && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
function isReactElement(value) {
  return value.$$typeof === REACT_ELEMENT_TYPE;
}
function emptyTarget(val) {
  return Array.isArray(val) ? [] : {};
}
function cloneUnlessOtherwiseSpecified(value, options) {
  return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
}
function defaultArrayMerge(target, source, options) {
  return target.concat(source).map(function(element) {
    return cloneUnlessOtherwiseSpecified(element, options);
  });
}
function mergeObject(target, source, options) {
  var destination = {};
  if (options.isMergeableObject(target)) {
    Object.keys(target).forEach(function(key) {
      destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
    });
  }
  Object.keys(source).forEach(function(key) {
    if (!options.isMergeableObject(source[key]) || !target[key]) {
      destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
    } else {
      destination[key] = deepmerge(target[key], source[key], options);
    }
  });
  return destination;
}
function deepmerge(target, source, options) {
  options = options || {};
  options.arrayMerge = options.arrayMerge || defaultArrayMerge;
  options.isMergeableObject = options.isMergeableObject || isMergeableObject;
  var sourceIsArray = Array.isArray(source);
  var targetIsArray = Array.isArray(target);
  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
  if (!sourceAndTargetTypesMatch) {
    return cloneUnlessOtherwiseSpecified(source, options);
  } else if (sourceIsArray) {
    return options.arrayMerge(target, source, options);
  } else {
    return mergeObject(target, source, options);
  }
}
deepmerge.all = function deepmergeAll(array, options) {
  if (!Array.isArray(array)) {
    throw new Error("first argument should be an array");
  }
  return array.reduce(function(prev, next) {
    return deepmerge(prev, next, options);
  }, {});
};
var deepmerge_1 = deepmerge;
var es_default = deepmerge_1;

// node_modules/formik/dist/formik.esm.js
var import_react9 = __toESM(require_react());
var import_react_fast_compare = __toESM(require_react_fast_compare());

// node_modules/tiny-warning/dist/tiny-warning.esm.js
var isProduction = false;
function warning(condition, message) {
  if (!isProduction) {
    if (condition) {
      return;
    }
    var text = "Warning: " + message;
    if (typeof console !== "undefined") {
      console.warn(text);
    }
    try {
      throw Error(text);
    } catch (x) {
    }
  }
}
var tiny_warning_esm_default = warning;

// node_modules/formik/dist/formik.esm.js
var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function _inheritsLoose2(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
var FormikContext = (0, import_react9.createContext)(void 0);
FormikContext.displayName = "FormikContext";
var FormikProvider = FormikContext.Provider;
var FormikConsumer = FormikContext.Consumer;
function useFormikContext() {
  var formik = (0, import_react9.useContext)(FormikContext);
  !!!formik ? true ? tiny_warning_esm_default(false, "Formik context is undefined, please verify you are calling useFormikContext() as child of a <Formik> component.") : tiny_warning_esm_default(false) : void 0;
  return formik;
}
var isEmptyArray = function isEmptyArray2(value) {
  return Array.isArray(value) && value.length === 0;
};
var isFunction = function isFunction2(obj) {
  return typeof obj === "function";
};
var isObject = function isObject2(obj) {
  return obj !== null && typeof obj === "object";
};
var isInteger = function isInteger2(obj) {
  return String(Math.floor(Number(obj))) === obj;
};
var isString = function isString2(obj) {
  return Object.prototype.toString.call(obj) === "[object String]";
};
var isEmptyChildren = function isEmptyChildren2(children) {
  return import_react9.Children.count(children) === 0;
};
var isPromise = function isPromise2(value) {
  return isObject(value) && isFunction(value.then);
};
function getActiveElement(doc) {
  doc = doc || (typeof document !== "undefined" ? document : void 0);
  if (typeof doc === "undefined") {
    return null;
  }
  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}
function getIn2(obj, key, def, p) {
  if (p === void 0) {
    p = 0;
  }
  var path = toPath_default(key);
  while (obj && p < path.length) {
    obj = obj[path[p++]];
  }
  if (p !== path.length && !obj) {
    return def;
  }
  return obj === void 0 ? def : obj;
}
function setIn2(obj, path, value) {
  var res = clone_default(obj);
  var resVal = res;
  var i = 0;
  var pathArray = toPath_default(path);
  for (; i < pathArray.length - 1; i++) {
    var currentPath = pathArray[i];
    var currentObj = getIn2(obj, pathArray.slice(0, i + 1));
    if (currentObj && (isObject(currentObj) || Array.isArray(currentObj))) {
      resVal = resVal[currentPath] = clone_default(currentObj);
    } else {
      var nextPath = pathArray[i + 1];
      resVal = resVal[currentPath] = isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};
    }
  }
  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {
    return obj;
  }
  if (value === void 0) {
    delete resVal[pathArray[i]];
  } else {
    resVal[pathArray[i]] = value;
  }
  if (i === 0 && value === void 0) {
    delete res[pathArray[i]];
  }
  return res;
}
function setNestedObjectValues(object, value, visited, response) {
  if (visited === void 0) {
    visited = /* @__PURE__ */ new WeakMap();
  }
  if (response === void 0) {
    response = {};
  }
  for (var _i = 0, _Object$keys = Object.keys(object); _i < _Object$keys.length; _i++) {
    var k = _Object$keys[_i];
    var val = object[k];
    if (isObject(val)) {
      if (!visited.get(val)) {
        visited.set(val, true);
        response[k] = Array.isArray(val) ? [] : {};
        setNestedObjectValues(val, value, visited, response[k]);
      }
    } else {
      response[k] = value;
    }
  }
  return response;
}
function formikReducer(state, msg) {
  switch (msg.type) {
    case "SET_VALUES":
      return _extends2({}, state, {
        values: msg.payload
      });
    case "SET_TOUCHED":
      return _extends2({}, state, {
        touched: msg.payload
      });
    case "SET_ERRORS":
      if ((0, import_react_fast_compare.default)(state.errors, msg.payload)) {
        return state;
      }
      return _extends2({}, state, {
        errors: msg.payload
      });
    case "SET_STATUS":
      return _extends2({}, state, {
        status: msg.payload
      });
    case "SET_ISSUBMITTING":
      return _extends2({}, state, {
        isSubmitting: msg.payload
      });
    case "SET_ISVALIDATING":
      return _extends2({}, state, {
        isValidating: msg.payload
      });
    case "SET_FIELD_VALUE":
      return _extends2({}, state, {
        values: setIn2(state.values, msg.payload.field, msg.payload.value)
      });
    case "SET_FIELD_TOUCHED":
      return _extends2({}, state, {
        touched: setIn2(state.touched, msg.payload.field, msg.payload.value)
      });
    case "SET_FIELD_ERROR":
      return _extends2({}, state, {
        errors: setIn2(state.errors, msg.payload.field, msg.payload.value)
      });
    case "RESET_FORM":
      return _extends2({}, state, msg.payload);
    case "SET_FORMIK_STATE":
      return msg.payload(state);
    case "SUBMIT_ATTEMPT":
      return _extends2({}, state, {
        touched: setNestedObjectValues(state.values, true),
        isSubmitting: true,
        submitCount: state.submitCount + 1
      });
    case "SUBMIT_FAILURE":
      return _extends2({}, state, {
        isSubmitting: false
      });
    case "SUBMIT_SUCCESS":
      return _extends2({}, state, {
        isSubmitting: false
      });
    default:
      return state;
  }
}
var emptyErrors = {};
var emptyTouched = {};
function useFormik(_ref) {
  var _ref$validateOnChange = _ref.validateOnChange, validateOnChange = _ref$validateOnChange === void 0 ? true : _ref$validateOnChange, _ref$validateOnBlur = _ref.validateOnBlur, validateOnBlur = _ref$validateOnBlur === void 0 ? true : _ref$validateOnBlur, _ref$validateOnMount = _ref.validateOnMount, validateOnMount = _ref$validateOnMount === void 0 ? false : _ref$validateOnMount, isInitialValid = _ref.isInitialValid, _ref$enableReinitiali = _ref.enableReinitialize, enableReinitialize = _ref$enableReinitiali === void 0 ? false : _ref$enableReinitiali, onSubmit = _ref.onSubmit, rest = _objectWithoutPropertiesLoose(_ref, ["validateOnChange", "validateOnBlur", "validateOnMount", "isInitialValid", "enableReinitialize", "onSubmit"]);
  var props = _extends2({
    validateOnChange,
    validateOnBlur,
    validateOnMount,
    onSubmit
  }, rest);
  var initialValues = (0, import_react9.useRef)(props.initialValues);
  var initialErrors = (0, import_react9.useRef)(props.initialErrors || emptyErrors);
  var initialTouched = (0, import_react9.useRef)(props.initialTouched || emptyTouched);
  var initialStatus = (0, import_react9.useRef)(props.initialStatus);
  var isMounted = (0, import_react9.useRef)(false);
  var fieldRegistry = (0, import_react9.useRef)({});
  if (true) {
    (0, import_react9.useEffect)(function() {
      !(typeof isInitialValid === "undefined") ? true ? tiny_warning_esm_default(false, "isInitialValid has been deprecated and will be removed in future versions of Formik. Please use initialErrors or validateOnMount instead.") : tiny_warning_esm_default(false) : void 0;
    }, []);
  }
  (0, import_react9.useEffect)(function() {
    isMounted.current = true;
    return function() {
      isMounted.current = false;
    };
  }, []);
  var _React$useState = (0, import_react9.useState)(0), setIteration = _React$useState[1];
  var stateRef = (0, import_react9.useRef)({
    values: props.initialValues,
    errors: props.initialErrors || emptyErrors,
    touched: props.initialTouched || emptyTouched,
    status: props.initialStatus,
    isSubmitting: false,
    isValidating: false,
    submitCount: 0
  });
  var state = stateRef.current;
  var dispatch = (0, import_react9.useCallback)(function(action) {
    var prev = stateRef.current;
    stateRef.current = formikReducer(prev, action);
    if (prev !== stateRef.current)
      setIteration(function(x) {
        return x + 1;
      });
  }, []);
  var runValidateHandler = (0, import_react9.useCallback)(function(values, field) {
    return new Promise(function(resolve, reject) {
      var maybePromisedErrors = props.validate(values, field);
      if (maybePromisedErrors == null) {
        resolve(emptyErrors);
      } else if (isPromise(maybePromisedErrors)) {
        maybePromisedErrors.then(function(errors) {
          resolve(errors || emptyErrors);
        }, function(actualException) {
          if (true) {
            console.warn("Warning: An unhandled error was caught during validation in <Formik validate />", actualException);
          }
          reject(actualException);
        });
      } else {
        resolve(maybePromisedErrors);
      }
    });
  }, [props.validate]);
  var runValidationSchema = (0, import_react9.useCallback)(function(values, field) {
    var validationSchema = props.validationSchema;
    var schema = isFunction(validationSchema) ? validationSchema(field) : validationSchema;
    var promise = field && schema.validateAt ? schema.validateAt(field, values) : validateYupSchema(values, schema);
    return new Promise(function(resolve, reject) {
      promise.then(function() {
        resolve(emptyErrors);
      }, function(err) {
        if (err.name === "ValidationError") {
          resolve(yupToFormErrors(err));
        } else {
          if (true) {
            console.warn("Warning: An unhandled error was caught during validation in <Formik validationSchema />", err);
          }
          reject(err);
        }
      });
    });
  }, [props.validationSchema]);
  var runSingleFieldLevelValidation = (0, import_react9.useCallback)(function(field, value) {
    return new Promise(function(resolve) {
      return resolve(fieldRegistry.current[field].validate(value));
    });
  }, []);
  var runFieldLevelValidations = (0, import_react9.useCallback)(function(values) {
    var fieldKeysWithValidation = Object.keys(fieldRegistry.current).filter(function(f) {
      return isFunction(fieldRegistry.current[f].validate);
    });
    var fieldValidations = fieldKeysWithValidation.length > 0 ? fieldKeysWithValidation.map(function(f) {
      return runSingleFieldLevelValidation(f, getIn2(values, f));
    }) : [Promise.resolve("DO_NOT_DELETE_YOU_WILL_BE_FIRED")];
    return Promise.all(fieldValidations).then(function(fieldErrorsList) {
      return fieldErrorsList.reduce(function(prev, curr, index) {
        if (curr === "DO_NOT_DELETE_YOU_WILL_BE_FIRED") {
          return prev;
        }
        if (curr) {
          prev = setIn2(prev, fieldKeysWithValidation[index], curr);
        }
        return prev;
      }, {});
    });
  }, [runSingleFieldLevelValidation]);
  var runAllValidations = (0, import_react9.useCallback)(function(values) {
    return Promise.all([runFieldLevelValidations(values), props.validationSchema ? runValidationSchema(values) : {}, props.validate ? runValidateHandler(values) : {}]).then(function(_ref2) {
      var fieldErrors = _ref2[0], schemaErrors = _ref2[1], validateErrors = _ref2[2];
      var combinedErrors = es_default.all([fieldErrors, schemaErrors, validateErrors], {
        arrayMerge
      });
      return combinedErrors;
    });
  }, [props.validate, props.validationSchema, runFieldLevelValidations, runValidateHandler, runValidationSchema]);
  var validateFormWithHighPriority = useEventCallback(function(values) {
    if (values === void 0) {
      values = state.values;
    }
    dispatch({
      type: "SET_ISVALIDATING",
      payload: true
    });
    return runAllValidations(values).then(function(combinedErrors) {
      if (!!isMounted.current) {
        dispatch({
          type: "SET_ISVALIDATING",
          payload: false
        });
        dispatch({
          type: "SET_ERRORS",
          payload: combinedErrors
        });
      }
      return combinedErrors;
    });
  });
  (0, import_react9.useEffect)(function() {
    if (validateOnMount && isMounted.current === true && (0, import_react_fast_compare.default)(initialValues.current, props.initialValues)) {
      validateFormWithHighPriority(initialValues.current);
    }
  }, [validateOnMount, validateFormWithHighPriority]);
  var resetForm = (0, import_react9.useCallback)(function(nextState) {
    var values = nextState && nextState.values ? nextState.values : initialValues.current;
    var errors = nextState && nextState.errors ? nextState.errors : initialErrors.current ? initialErrors.current : props.initialErrors || {};
    var touched = nextState && nextState.touched ? nextState.touched : initialTouched.current ? initialTouched.current : props.initialTouched || {};
    var status = nextState && nextState.status ? nextState.status : initialStatus.current ? initialStatus.current : props.initialStatus;
    initialValues.current = values;
    initialErrors.current = errors;
    initialTouched.current = touched;
    initialStatus.current = status;
    var dispatchFn = function dispatchFn2() {
      dispatch({
        type: "RESET_FORM",
        payload: {
          isSubmitting: !!nextState && !!nextState.isSubmitting,
          errors,
          touched,
          status,
          values,
          isValidating: !!nextState && !!nextState.isValidating,
          submitCount: !!nextState && !!nextState.submitCount && typeof nextState.submitCount === "number" ? nextState.submitCount : 0
        }
      });
    };
    if (props.onReset) {
      var maybePromisedOnReset = props.onReset(state.values, imperativeMethods);
      if (isPromise(maybePromisedOnReset)) {
        maybePromisedOnReset.then(dispatchFn);
      } else {
        dispatchFn();
      }
    } else {
      dispatchFn();
    }
  }, [props.initialErrors, props.initialStatus, props.initialTouched, props.onReset]);
  (0, import_react9.useEffect)(function() {
    if (isMounted.current === true && !(0, import_react_fast_compare.default)(initialValues.current, props.initialValues)) {
      if (enableReinitialize) {
        initialValues.current = props.initialValues;
        resetForm();
        if (validateOnMount) {
          validateFormWithHighPriority(initialValues.current);
        }
      }
    }
  }, [enableReinitialize, props.initialValues, resetForm, validateOnMount, validateFormWithHighPriority]);
  (0, import_react9.useEffect)(function() {
    if (enableReinitialize && isMounted.current === true && !(0, import_react_fast_compare.default)(initialErrors.current, props.initialErrors)) {
      initialErrors.current = props.initialErrors || emptyErrors;
      dispatch({
        type: "SET_ERRORS",
        payload: props.initialErrors || emptyErrors
      });
    }
  }, [enableReinitialize, props.initialErrors]);
  (0, import_react9.useEffect)(function() {
    if (enableReinitialize && isMounted.current === true && !(0, import_react_fast_compare.default)(initialTouched.current, props.initialTouched)) {
      initialTouched.current = props.initialTouched || emptyTouched;
      dispatch({
        type: "SET_TOUCHED",
        payload: props.initialTouched || emptyTouched
      });
    }
  }, [enableReinitialize, props.initialTouched]);
  (0, import_react9.useEffect)(function() {
    if (enableReinitialize && isMounted.current === true && !(0, import_react_fast_compare.default)(initialStatus.current, props.initialStatus)) {
      initialStatus.current = props.initialStatus;
      dispatch({
        type: "SET_STATUS",
        payload: props.initialStatus
      });
    }
  }, [enableReinitialize, props.initialStatus, props.initialTouched]);
  var validateField = useEventCallback(function(name) {
    if (fieldRegistry.current[name] && isFunction(fieldRegistry.current[name].validate)) {
      var value = getIn2(state.values, name);
      var maybePromise = fieldRegistry.current[name].validate(value);
      if (isPromise(maybePromise)) {
        dispatch({
          type: "SET_ISVALIDATING",
          payload: true
        });
        return maybePromise.then(function(x) {
          return x;
        }).then(function(error) {
          dispatch({
            type: "SET_FIELD_ERROR",
            payload: {
              field: name,
              value: error
            }
          });
          dispatch({
            type: "SET_ISVALIDATING",
            payload: false
          });
        });
      } else {
        dispatch({
          type: "SET_FIELD_ERROR",
          payload: {
            field: name,
            value: maybePromise
          }
        });
        return Promise.resolve(maybePromise);
      }
    } else if (props.validationSchema) {
      dispatch({
        type: "SET_ISVALIDATING",
        payload: true
      });
      return runValidationSchema(state.values, name).then(function(x) {
        return x;
      }).then(function(error) {
        dispatch({
          type: "SET_FIELD_ERROR",
          payload: {
            field: name,
            value: getIn2(error, name)
          }
        });
        dispatch({
          type: "SET_ISVALIDATING",
          payload: false
        });
      });
    }
    return Promise.resolve();
  });
  var registerField = (0, import_react9.useCallback)(function(name, _ref3) {
    var validate = _ref3.validate;
    fieldRegistry.current[name] = {
      validate
    };
  }, []);
  var unregisterField = (0, import_react9.useCallback)(function(name) {
    delete fieldRegistry.current[name];
  }, []);
  var setTouched = useEventCallback(function(touched, shouldValidate) {
    dispatch({
      type: "SET_TOUCHED",
      payload: touched
    });
    var willValidate = shouldValidate === void 0 ? validateOnBlur : shouldValidate;
    return willValidate ? validateFormWithHighPriority(state.values) : Promise.resolve();
  });
  var setErrors = (0, import_react9.useCallback)(function(errors) {
    dispatch({
      type: "SET_ERRORS",
      payload: errors
    });
  }, []);
  var setValues = useEventCallback(function(values, shouldValidate) {
    var resolvedValues = isFunction(values) ? values(state.values) : values;
    dispatch({
      type: "SET_VALUES",
      payload: resolvedValues
    });
    var willValidate = shouldValidate === void 0 ? validateOnChange : shouldValidate;
    return willValidate ? validateFormWithHighPriority(resolvedValues) : Promise.resolve();
  });
  var setFieldError = (0, import_react9.useCallback)(function(field, value) {
    dispatch({
      type: "SET_FIELD_ERROR",
      payload: {
        field,
        value
      }
    });
  }, []);
  var setFieldValue = useEventCallback(function(field, value, shouldValidate) {
    dispatch({
      type: "SET_FIELD_VALUE",
      payload: {
        field,
        value
      }
    });
    var willValidate = shouldValidate === void 0 ? validateOnChange : shouldValidate;
    return willValidate ? validateFormWithHighPriority(setIn2(state.values, field, value)) : Promise.resolve();
  });
  var executeChange = (0, import_react9.useCallback)(function(eventOrTextValue, maybePath) {
    var field = maybePath;
    var val = eventOrTextValue;
    var parsed;
    if (!isString(eventOrTextValue)) {
      if (eventOrTextValue.persist) {
        eventOrTextValue.persist();
      }
      var target = eventOrTextValue.target ? eventOrTextValue.target : eventOrTextValue.currentTarget;
      var type = target.type, name = target.name, id = target.id, value = target.value, checked = target.checked, outerHTML = target.outerHTML, options = target.options, multiple = target.multiple;
      field = maybePath ? maybePath : name ? name : id;
      if (!field && true) {
        warnAboutMissingIdentifier({
          htmlContent: outerHTML,
          documentationAnchorLink: "handlechange-e-reactchangeeventany--void",
          handlerName: "handleChange"
        });
      }
      val = /number|range/.test(type) ? (parsed = parseFloat(value), isNaN(parsed) ? "" : parsed) : /checkbox/.test(type) ? getValueForCheckbox(getIn2(state.values, field), checked, value) : options && multiple ? getSelectedValues(options) : value;
    }
    if (field) {
      setFieldValue(field, val);
    }
  }, [setFieldValue, state.values]);
  var handleChange = useEventCallback(function(eventOrPath) {
    if (isString(eventOrPath)) {
      return function(event) {
        return executeChange(event, eventOrPath);
      };
    } else {
      executeChange(eventOrPath);
    }
  });
  var setFieldTouched = useEventCallback(function(field, touched, shouldValidate) {
    if (touched === void 0) {
      touched = true;
    }
    dispatch({
      type: "SET_FIELD_TOUCHED",
      payload: {
        field,
        value: touched
      }
    });
    var willValidate = shouldValidate === void 0 ? validateOnBlur : shouldValidate;
    return willValidate ? validateFormWithHighPriority(state.values) : Promise.resolve();
  });
  var executeBlur = (0, import_react9.useCallback)(function(e, path) {
    if (e.persist) {
      e.persist();
    }
    var _e$target = e.target, name = _e$target.name, id = _e$target.id, outerHTML = _e$target.outerHTML;
    var field = path ? path : name ? name : id;
    if (!field && true) {
      warnAboutMissingIdentifier({
        htmlContent: outerHTML,
        documentationAnchorLink: "handleblur-e-any--void",
        handlerName: "handleBlur"
      });
    }
    setFieldTouched(field, true);
  }, [setFieldTouched]);
  var handleBlur = useEventCallback(function(eventOrString) {
    if (isString(eventOrString)) {
      return function(event) {
        return executeBlur(event, eventOrString);
      };
    } else {
      executeBlur(eventOrString);
    }
  });
  var setFormikState = (0, import_react9.useCallback)(function(stateOrCb) {
    if (isFunction(stateOrCb)) {
      dispatch({
        type: "SET_FORMIK_STATE",
        payload: stateOrCb
      });
    } else {
      dispatch({
        type: "SET_FORMIK_STATE",
        payload: function payload() {
          return stateOrCb;
        }
      });
    }
  }, []);
  var setStatus = (0, import_react9.useCallback)(function(status) {
    dispatch({
      type: "SET_STATUS",
      payload: status
    });
  }, []);
  var setSubmitting = (0, import_react9.useCallback)(function(isSubmitting) {
    dispatch({
      type: "SET_ISSUBMITTING",
      payload: isSubmitting
    });
  }, []);
  var submitForm = useEventCallback(function() {
    dispatch({
      type: "SUBMIT_ATTEMPT"
    });
    return validateFormWithHighPriority().then(function(combinedErrors) {
      var isInstanceOfError = combinedErrors instanceof Error;
      var isActuallyValid = !isInstanceOfError && Object.keys(combinedErrors).length === 0;
      if (isActuallyValid) {
        var promiseOrUndefined;
        try {
          promiseOrUndefined = executeSubmit();
          if (promiseOrUndefined === void 0) {
            return;
          }
        } catch (error) {
          throw error;
        }
        return Promise.resolve(promiseOrUndefined).then(function(result) {
          if (!!isMounted.current) {
            dispatch({
              type: "SUBMIT_SUCCESS"
            });
          }
          return result;
        })["catch"](function(_errors) {
          if (!!isMounted.current) {
            dispatch({
              type: "SUBMIT_FAILURE"
            });
            throw _errors;
          }
        });
      } else if (!!isMounted.current) {
        dispatch({
          type: "SUBMIT_FAILURE"
        });
        if (isInstanceOfError) {
          throw combinedErrors;
        }
      }
      return;
    });
  });
  var handleSubmit = useEventCallback(function(e) {
    if (e && e.preventDefault && isFunction(e.preventDefault)) {
      e.preventDefault();
    }
    if (e && e.stopPropagation && isFunction(e.stopPropagation)) {
      e.stopPropagation();
    }
    if (typeof document !== "undefined") {
      var activeElement = getActiveElement();
      if (activeElement !== null && activeElement instanceof HTMLButtonElement) {
        !(activeElement.attributes && activeElement.attributes.getNamedItem("type")) ? true ? tiny_warning_esm_default(false, 'You submitted a Formik form using a button with an unspecified `type` attribute.  Most browsers default button elements to `type="submit"`. If this is not a submit button, please add `type="button"`.') : tiny_warning_esm_default(false) : void 0;
      }
    }
    submitForm()["catch"](function(reason) {
      console.warn("Warning: An unhandled error was caught from submitForm()", reason);
    });
  });
  var imperativeMethods = {
    resetForm,
    validateForm: validateFormWithHighPriority,
    validateField,
    setErrors,
    setFieldError,
    setFieldTouched,
    setFieldValue,
    setStatus,
    setSubmitting,
    setTouched,
    setValues,
    setFormikState,
    submitForm
  };
  var executeSubmit = useEventCallback(function() {
    return onSubmit(state.values, imperativeMethods);
  });
  var handleReset = useEventCallback(function(e) {
    if (e && e.preventDefault && isFunction(e.preventDefault)) {
      e.preventDefault();
    }
    if (e && e.stopPropagation && isFunction(e.stopPropagation)) {
      e.stopPropagation();
    }
    resetForm();
  });
  var getFieldMeta = (0, import_react9.useCallback)(function(name) {
    return {
      value: getIn2(state.values, name),
      error: getIn2(state.errors, name),
      touched: !!getIn2(state.touched, name),
      initialValue: getIn2(initialValues.current, name),
      initialTouched: !!getIn2(initialTouched.current, name),
      initialError: getIn2(initialErrors.current, name)
    };
  }, [state.errors, state.touched, state.values]);
  var getFieldHelpers = (0, import_react9.useCallback)(function(name) {
    return {
      setValue: function setValue(value, shouldValidate) {
        return setFieldValue(name, value, shouldValidate);
      },
      setTouched: function setTouched2(value, shouldValidate) {
        return setFieldTouched(name, value, shouldValidate);
      },
      setError: function setError(value) {
        return setFieldError(name, value);
      }
    };
  }, [setFieldValue, setFieldTouched, setFieldError]);
  var getFieldProps = (0, import_react9.useCallback)(function(nameOrOptions) {
    var isAnObject = isObject(nameOrOptions);
    var name = isAnObject ? nameOrOptions.name : nameOrOptions;
    var valueState = getIn2(state.values, name);
    var field = {
      name,
      value: valueState,
      onChange: handleChange,
      onBlur: handleBlur
    };
    if (isAnObject) {
      var type = nameOrOptions.type, valueProp = nameOrOptions.value, is = nameOrOptions.as, multiple = nameOrOptions.multiple;
      if (type === "checkbox") {
        if (valueProp === void 0) {
          field.checked = !!valueState;
        } else {
          field.checked = !!(Array.isArray(valueState) && ~valueState.indexOf(valueProp));
          field.value = valueProp;
        }
      } else if (type === "radio") {
        field.checked = valueState === valueProp;
        field.value = valueProp;
      } else if (is === "select" && multiple) {
        field.value = field.value || [];
        field.multiple = true;
      }
    }
    return field;
  }, [handleBlur, handleChange, state.values]);
  var dirty = (0, import_react9.useMemo)(function() {
    return !(0, import_react_fast_compare.default)(initialValues.current, state.values);
  }, [initialValues.current, state.values]);
  var isValid = (0, import_react9.useMemo)(function() {
    return typeof isInitialValid !== "undefined" ? dirty ? state.errors && Object.keys(state.errors).length === 0 : isInitialValid !== false && isFunction(isInitialValid) ? isInitialValid(props) : isInitialValid : state.errors && Object.keys(state.errors).length === 0;
  }, [isInitialValid, dirty, state.errors, props]);
  var ctx = _extends2({}, state, {
    initialValues: initialValues.current,
    initialErrors: initialErrors.current,
    initialTouched: initialTouched.current,
    initialStatus: initialStatus.current,
    handleBlur,
    handleChange,
    handleReset,
    handleSubmit,
    resetForm,
    setErrors,
    setFormikState,
    setFieldTouched,
    setFieldValue,
    setFieldError,
    setStatus,
    setSubmitting,
    setTouched,
    setValues,
    submitForm,
    validateForm: validateFormWithHighPriority,
    validateField,
    isValid,
    dirty,
    unregisterField,
    registerField,
    getFieldProps,
    getFieldMeta,
    getFieldHelpers,
    validateOnBlur,
    validateOnChange,
    validateOnMount
  });
  return ctx;
}
function Formik(props) {
  var formikbag = useFormik(props);
  var component = props.component, children = props.children, render = props.render, innerRef = props.innerRef;
  (0, import_react9.useImperativeHandle)(innerRef, function() {
    return formikbag;
  });
  if (true) {
    (0, import_react9.useEffect)(function() {
      !!props.render ? true ? tiny_warning_esm_default(false, "<Formik render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Formik render={(props) => ...} /> with <Formik>{(props) => ...}</Formik>") : tiny_warning_esm_default(false) : void 0;
    }, []);
  }
  return (0, import_react9.createElement)(FormikProvider, {
    value: formikbag
  }, component ? (0, import_react9.createElement)(component, formikbag) : render ? render(formikbag) : children ? isFunction(children) ? children(formikbag) : !isEmptyChildren(children) ? import_react9.Children.only(children) : null : null);
}
function warnAboutMissingIdentifier(_ref4) {
  var htmlContent = _ref4.htmlContent, documentationAnchorLink = _ref4.documentationAnchorLink, handlerName = _ref4.handlerName;
  console.warn("Warning: Formik called `" + handlerName + "`, but you forgot to pass an `id` or `name` attribute to your input:\n    " + htmlContent + "\n    Formik cannot determine which value to update. For more info see https://formik.org/docs/api/formik#" + documentationAnchorLink + "\n  ");
}
function yupToFormErrors(yupError) {
  var errors = {};
  if (yupError.inner) {
    if (yupError.inner.length === 0) {
      return setIn2(errors, yupError.path, yupError.message);
    }
    for (var _iterator = yupError.inner, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ; ) {
      var _ref5;
      if (_isArray) {
        if (_i >= _iterator.length)
          break;
        _ref5 = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done)
          break;
        _ref5 = _i.value;
      }
      var err = _ref5;
      if (!getIn2(errors, err.path)) {
        errors = setIn2(errors, err.path, err.message);
      }
    }
  }
  return errors;
}
function validateYupSchema(values, schema, sync, context) {
  if (sync === void 0) {
    sync = false;
  }
  var normalizedValues = prepareDataForValidation(values);
  return schema[sync ? "validateSync" : "validate"](normalizedValues, {
    abortEarly: false,
    context: context || normalizedValues
  });
}
function prepareDataForValidation(values) {
  var data = Array.isArray(values) ? [] : {};
  for (var k in values) {
    if (Object.prototype.hasOwnProperty.call(values, k)) {
      var key = String(k);
      if (Array.isArray(values[key]) === true) {
        data[key] = values[key].map(function(value) {
          if (Array.isArray(value) === true || isPlainObject_default(value)) {
            return prepareDataForValidation(value);
          } else {
            return value !== "" ? value : void 0;
          }
        });
      } else if (isPlainObject_default(values[key])) {
        data[key] = prepareDataForValidation(values[key]);
      } else {
        data[key] = values[key] !== "" ? values[key] : void 0;
      }
    }
  }
  return data;
}
function arrayMerge(target, source, options) {
  var destination = target.slice();
  source.forEach(function merge2(e, i) {
    if (typeof destination[i] === "undefined") {
      var cloneRequested = options.clone !== false;
      var shouldClone = cloneRequested && options.isMergeableObject(e);
      destination[i] = shouldClone ? es_default(Array.isArray(e) ? [] : {}, e, options) : e;
    } else if (options.isMergeableObject(e)) {
      destination[i] = es_default(target[i], e, options);
    } else if (target.indexOf(e) === -1) {
      destination.push(e);
    }
  });
  return destination;
}
function getSelectedValues(options) {
  return Array.from(options).filter(function(el) {
    return el.selected;
  }).map(function(el) {
    return el.value;
  });
}
function getValueForCheckbox(currentValue, checked, valueProp) {
  if (typeof currentValue === "boolean") {
    return Boolean(checked);
  }
  var currentArrayOfValues = [];
  var isValueInArray = false;
  var index = -1;
  if (!Array.isArray(currentValue)) {
    if (!valueProp || valueProp == "true" || valueProp == "false") {
      return Boolean(checked);
    }
  } else {
    currentArrayOfValues = currentValue;
    index = currentValue.indexOf(valueProp);
    isValueInArray = index >= 0;
  }
  if (checked && valueProp && !isValueInArray) {
    return currentArrayOfValues.concat(valueProp);
  }
  if (!isValueInArray) {
    return currentArrayOfValues;
  }
  return currentArrayOfValues.slice(0, index).concat(currentArrayOfValues.slice(index + 1));
}
var useIsomorphicLayoutEffect = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined" ? import_react9.useLayoutEffect : import_react9.useEffect;
function useEventCallback(fn2) {
  var ref = (0, import_react9.useRef)(fn2);
  useIsomorphicLayoutEffect(function() {
    ref.current = fn2;
  });
  return (0, import_react9.useCallback)(function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return ref.current.apply(void 0, args);
  }, []);
}
var Form = (0, import_react9.forwardRef)(function(props, ref) {
  var action = props.action, rest = _objectWithoutPropertiesLoose(props, ["action"]);
  var _action = action != null ? action : "#";
  var _useFormikContext = useFormikContext(), handleReset = _useFormikContext.handleReset, handleSubmit = _useFormikContext.handleSubmit;
  return (0, import_react9.createElement)("form", _extends2({
    onSubmit: handleSubmit,
    ref,
    onReset: handleReset,
    action: _action
  }, rest));
});
Form.displayName = "Form";
function connect(Comp) {
  var C = function C2(props) {
    return (0, import_react9.createElement)(FormikConsumer, null, function(formik) {
      !!!formik ? true ? tiny_warning_esm_default(false, "Formik context is undefined, please verify you are rendering <Form>, <Field>, <FastField>, <FieldArray>, or your custom context-using component as a child of a <Formik> component. Component name: " + Comp.name) : tiny_warning_esm_default(false) : void 0;
      return (0, import_react9.createElement)(Comp, _extends2({}, props, {
        formik
      }));
    });
  };
  var componentDisplayName = Comp.displayName || Comp.name || Comp.constructor && Comp.constructor.name || "Component";
  C.WrappedComponent = Comp;
  C.displayName = "FormikConnect(" + componentDisplayName + ")";
  return (0, import_hoist_non_react_statics.default)(
    C,
    Comp
    // cast type to ComponentClass (even if SFC)
  );
}
var move = function move2(array, from, to) {
  var copy = copyArrayLike(array);
  var value = copy[from];
  copy.splice(from, 1);
  copy.splice(to, 0, value);
  return copy;
};
var swap = function swap2(arrayLike, indexA, indexB) {
  var copy = copyArrayLike(arrayLike);
  var a = copy[indexA];
  copy[indexA] = copy[indexB];
  copy[indexB] = a;
  return copy;
};
var insert = function insert2(arrayLike, index, value) {
  var copy = copyArrayLike(arrayLike);
  copy.splice(index, 0, value);
  return copy;
};
var replace = function replace2(arrayLike, index, value) {
  var copy = copyArrayLike(arrayLike);
  copy[index] = value;
  return copy;
};
var copyArrayLike = function copyArrayLike2(arrayLike) {
  if (!arrayLike) {
    return [];
  } else if (Array.isArray(arrayLike)) {
    return [].concat(arrayLike);
  } else {
    var maxIndex = Object.keys(arrayLike).map(function(key) {
      return parseInt(key);
    }).reduce(function(max, el) {
      return el > max ? el : max;
    }, 0);
    return Array.from(_extends2({}, arrayLike, {
      length: maxIndex + 1
    }));
  }
};
var createAlterationHandler = function createAlterationHandler2(alteration, defaultFunction) {
  var fn2 = typeof alteration === "function" ? alteration : defaultFunction;
  return function(data) {
    if (Array.isArray(data) || isObject(data)) {
      var clone = copyArrayLike(data);
      return fn2(clone);
    }
    return data;
  };
};
var FieldArrayInner = function(_React$Component) {
  _inheritsLoose2(FieldArrayInner2, _React$Component);
  function FieldArrayInner2(props) {
    var _this;
    _this = _React$Component.call(this, props) || this;
    _this.updateArrayField = function(fn2, alterTouched, alterErrors) {
      var _this$props = _this.props, name = _this$props.name, setFormikState = _this$props.formik.setFormikState;
      setFormikState(function(prevState) {
        var updateErrors = createAlterationHandler(alterErrors, fn2);
        var updateTouched = createAlterationHandler(alterTouched, fn2);
        var values = setIn2(prevState.values, name, fn2(getIn2(prevState.values, name)));
        var fieldError = alterErrors ? updateErrors(getIn2(prevState.errors, name)) : void 0;
        var fieldTouched = alterTouched ? updateTouched(getIn2(prevState.touched, name)) : void 0;
        if (isEmptyArray(fieldError)) {
          fieldError = void 0;
        }
        if (isEmptyArray(fieldTouched)) {
          fieldTouched = void 0;
        }
        return _extends2({}, prevState, {
          values,
          errors: alterErrors ? setIn2(prevState.errors, name, fieldError) : prevState.errors,
          touched: alterTouched ? setIn2(prevState.touched, name, fieldTouched) : prevState.touched
        });
      });
    };
    _this.push = function(value) {
      return _this.updateArrayField(function(arrayLike) {
        return [].concat(copyArrayLike(arrayLike), [cloneDeep_default(value)]);
      }, false, false);
    };
    _this.handlePush = function(value) {
      return function() {
        return _this.push(value);
      };
    };
    _this.swap = function(indexA, indexB) {
      return _this.updateArrayField(function(array) {
        return swap(array, indexA, indexB);
      }, true, true);
    };
    _this.handleSwap = function(indexA, indexB) {
      return function() {
        return _this.swap(indexA, indexB);
      };
    };
    _this.move = function(from, to) {
      return _this.updateArrayField(function(array) {
        return move(array, from, to);
      }, true, true);
    };
    _this.handleMove = function(from, to) {
      return function() {
        return _this.move(from, to);
      };
    };
    _this.insert = function(index, value) {
      return _this.updateArrayField(function(array) {
        return insert(array, index, value);
      }, function(array) {
        return insert(array, index, null);
      }, function(array) {
        return insert(array, index, null);
      });
    };
    _this.handleInsert = function(index, value) {
      return function() {
        return _this.insert(index, value);
      };
    };
    _this.replace = function(index, value) {
      return _this.updateArrayField(function(array) {
        return replace(array, index, value);
      }, false, false);
    };
    _this.handleReplace = function(index, value) {
      return function() {
        return _this.replace(index, value);
      };
    };
    _this.unshift = function(value) {
      var length = -1;
      _this.updateArrayField(function(array) {
        var arr = array ? [value].concat(array) : [value];
        length = arr.length;
        return arr;
      }, function(array) {
        return array ? [null].concat(array) : [null];
      }, function(array) {
        return array ? [null].concat(array) : [null];
      });
      return length;
    };
    _this.handleUnshift = function(value) {
      return function() {
        return _this.unshift(value);
      };
    };
    _this.handleRemove = function(index) {
      return function() {
        return _this.remove(index);
      };
    };
    _this.handlePop = function() {
      return function() {
        return _this.pop();
      };
    };
    _this.remove = _this.remove.bind(_assertThisInitialized(_this));
    _this.pop = _this.pop.bind(_assertThisInitialized(_this));
    return _this;
  }
  var _proto = FieldArrayInner2.prototype;
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (this.props.validateOnChange && this.props.formik.validateOnChange && !(0, import_react_fast_compare.default)(getIn2(prevProps.formik.values, prevProps.name), getIn2(this.props.formik.values, this.props.name))) {
      this.props.formik.validateForm(this.props.formik.values);
    }
  };
  _proto.remove = function remove(index) {
    var result;
    this.updateArrayField(
      // so this gets call 3 times
      function(array) {
        var copy = array ? copyArrayLike(array) : [];
        if (!result) {
          result = copy[index];
        }
        if (isFunction(copy.splice)) {
          copy.splice(index, 1);
        }
        return isFunction(copy.every) ? copy.every(function(v) {
          return v === void 0;
        }) ? [] : copy : copy;
      },
      true,
      true
    );
    return result;
  };
  _proto.pop = function pop() {
    var result;
    this.updateArrayField(
      // so this gets call 3 times
      function(array) {
        var tmp = array.slice();
        if (!result) {
          result = tmp && tmp.pop && tmp.pop();
        }
        return tmp;
      },
      true,
      true
    );
    return result;
  };
  _proto.render = function render() {
    var arrayHelpers = {
      push: this.push,
      pop: this.pop,
      swap: this.swap,
      move: this.move,
      insert: this.insert,
      replace: this.replace,
      unshift: this.unshift,
      remove: this.remove,
      handlePush: this.handlePush,
      handlePop: this.handlePop,
      handleSwap: this.handleSwap,
      handleMove: this.handleMove,
      handleInsert: this.handleInsert,
      handleReplace: this.handleReplace,
      handleUnshift: this.handleUnshift,
      handleRemove: this.handleRemove
    };
    var _this$props2 = this.props, component = _this$props2.component, render2 = _this$props2.render, children = _this$props2.children, name = _this$props2.name, _this$props2$formik = _this$props2.formik, restOfFormik = _objectWithoutPropertiesLoose(_this$props2$formik, ["validate", "validationSchema"]);
    var props = _extends2({}, arrayHelpers, {
      form: restOfFormik,
      name
    });
    return component ? (0, import_react9.createElement)(component, props) : render2 ? render2(props) : children ? typeof children === "function" ? children(props) : !isEmptyChildren(children) ? import_react9.Children.only(children) : null : null;
  };
  return FieldArrayInner2;
}(import_react9.Component);
FieldArrayInner.defaultProps = {
  validateOnChange: true
};
var FieldArray = connect(FieldArrayInner);
var ErrorMessageImpl = function(_React$Component) {
  _inheritsLoose2(ErrorMessageImpl2, _React$Component);
  function ErrorMessageImpl2() {
    return _React$Component.apply(this, arguments) || this;
  }
  var _proto = ErrorMessageImpl2.prototype;
  _proto.shouldComponentUpdate = function shouldComponentUpdate(props) {
    if (getIn2(this.props.formik.errors, this.props.name) !== getIn2(props.formik.errors, this.props.name) || getIn2(this.props.formik.touched, this.props.name) !== getIn2(props.formik.touched, this.props.name) || Object.keys(this.props).length !== Object.keys(props).length) {
      return true;
    } else {
      return false;
    }
  };
  _proto.render = function render() {
    var _this$props = this.props, component = _this$props.component, formik = _this$props.formik, render2 = _this$props.render, children = _this$props.children, name = _this$props.name, rest = _objectWithoutPropertiesLoose(_this$props, ["component", "formik", "render", "children", "name"]);
    var touch = getIn2(formik.touched, name);
    var error = getIn2(formik.errors, name);
    return !!touch && !!error ? render2 ? isFunction(render2) ? render2(error) : null : children ? isFunction(children) ? children(error) : null : component ? (0, import_react9.createElement)(component, rest, error) : error : null;
  };
  return ErrorMessageImpl2;
}(import_react9.Component);
var ErrorMessage = connect(ErrorMessageImpl);
var FastFieldInner = function(_React$Component) {
  _inheritsLoose2(FastFieldInner2, _React$Component);
  function FastFieldInner2(props) {
    var _this;
    _this = _React$Component.call(this, props) || this;
    var render = props.render, children = props.children, component = props.component, is = props.as, name = props.name;
    !!render ? true ? tiny_warning_esm_default(false, "<FastField render> has been deprecated. Please use a child callback function instead: <FastField name={" + name + "}>{props => ...}</FastField> instead.") : tiny_warning_esm_default(false) : void 0;
    !!(component && render) ? true ? tiny_warning_esm_default(false, "You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored") : tiny_warning_esm_default(false) : void 0;
    !!(is && children && isFunction(children)) ? true ? tiny_warning_esm_default(false, "You should not use <FastField as> and <FastField children> as a function in the same <FastField> component; <FastField as> will be ignored.") : tiny_warning_esm_default(false) : void 0;
    !!(component && children && isFunction(children)) ? true ? tiny_warning_esm_default(false, "You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored.") : tiny_warning_esm_default(false) : void 0;
    !!(render && children && !isEmptyChildren(children)) ? true ? tiny_warning_esm_default(false, "You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored") : tiny_warning_esm_default(false) : void 0;
    return _this;
  }
  var _proto = FastFieldInner2.prototype;
  _proto.shouldComponentUpdate = function shouldComponentUpdate(props) {
    if (this.props.shouldUpdate) {
      return this.props.shouldUpdate(props, this.props);
    } else if (props.name !== this.props.name || getIn2(props.formik.values, this.props.name) !== getIn2(this.props.formik.values, this.props.name) || getIn2(props.formik.errors, this.props.name) !== getIn2(this.props.formik.errors, this.props.name) || getIn2(props.formik.touched, this.props.name) !== getIn2(this.props.formik.touched, this.props.name) || Object.keys(this.props).length !== Object.keys(props).length || props.formik.isSubmitting !== this.props.formik.isSubmitting) {
      return true;
    } else {
      return false;
    }
  };
  _proto.componentDidMount = function componentDidMount() {
    this.props.formik.registerField(this.props.name, {
      validate: this.props.validate
    });
  };
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (this.props.name !== prevProps.name) {
      this.props.formik.unregisterField(prevProps.name);
      this.props.formik.registerField(this.props.name, {
        validate: this.props.validate
      });
    }
    if (this.props.validate !== prevProps.validate) {
      this.props.formik.registerField(this.props.name, {
        validate: this.props.validate
      });
    }
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.props.formik.unregisterField(this.props.name);
  };
  _proto.render = function render() {
    var _this$props = this.props, name = _this$props.name, render2 = _this$props.render, is = _this$props.as, children = _this$props.children, component = _this$props.component, formik = _this$props.formik, props = _objectWithoutPropertiesLoose(_this$props, ["validate", "name", "render", "as", "children", "component", "shouldUpdate", "formik"]);
    var restOfFormik = _objectWithoutPropertiesLoose(formik, ["validate", "validationSchema"]);
    var field = formik.getFieldProps(_extends2({
      name
    }, props));
    var meta = {
      value: getIn2(formik.values, name),
      error: getIn2(formik.errors, name),
      touched: !!getIn2(formik.touched, name),
      initialValue: getIn2(formik.initialValues, name),
      initialTouched: !!getIn2(formik.initialTouched, name),
      initialError: getIn2(formik.initialErrors, name)
    };
    var bag = {
      field,
      meta,
      form: restOfFormik
    };
    if (render2) {
      return render2(bag);
    }
    if (isFunction(children)) {
      return children(bag);
    }
    if (component) {
      if (typeof component === "string") {
        var innerRef = props.innerRef, rest = _objectWithoutPropertiesLoose(props, ["innerRef"]);
        return (0, import_react9.createElement)(component, _extends2({
          ref: innerRef
        }, field, rest), children);
      }
      return (0, import_react9.createElement)(component, _extends2({
        field,
        form: formik
      }, props), children);
    }
    var asElement = is || "input";
    if (typeof asElement === "string") {
      var _innerRef = props.innerRef, _rest = _objectWithoutPropertiesLoose(props, ["innerRef"]);
      return (0, import_react9.createElement)(asElement, _extends2({
        ref: _innerRef
      }, field, _rest), children);
    }
    return (0, import_react9.createElement)(asElement, _extends2({}, field, props), children);
  };
  return FastFieldInner2;
}(import_react9.Component);
var FastField = connect(FastFieldInner);

// node_modules/@strapi/admin/dist/admin/chunks/index-BUGouNML.mjs
var import_throttle = __toESM(require_throttle(), 1);
var import_qs = __toESM(require_lib(), 1);
var ADMIN_PERMISSIONS_EE = {
  settings: {
    auditLogs: {
      main: [
        {
          action: "admin::audit-logs.read",
          subject: null
        }
      ],
      read: [
        {
          action: "admin::audit-logs.read",
          subject: null
        }
      ],
      update: [
        {
          action: "admin::audit-logs.update",
          subject: null
        }
      ]
    },
    "review-workflows": {
      main: [
        {
          action: "admin::review-workflows.read",
          subject: null
        }
      ],
      read: [
        {
          action: "admin::review-workflows.read",
          subject: null
        }
      ],
      create: [
        {
          action: "admin::review-workflows.create",
          subject: null
        }
      ],
      delete: [
        {
          action: "admin::review-workflows.delete",
          subject: null
        }
      ],
      update: [
        {
          action: "admin::review-workflows.update",
          subject: null
        }
      ]
    },
    sso: {
      main: [
        {
          action: "admin::provider-login.read",
          subject: null
        }
      ],
      read: [
        {
          action: "admin::provider-login.read",
          subject: null
        }
      ],
      update: [
        {
          action: "admin::provider-login.update",
          subject: null
        }
      ]
    },
    releases: {
      read: [
        {
          action: "plugin::content-releases.settings.read",
          subject: null
        }
      ],
      update: [
        {
          action: "plugin::content-releases.settings.update",
          subject: null
        }
      ]
    }
  }
};
var getEERoutes$1 = () => window.strapi.isEE ? [
  {
    path: "auth/login/:authResponse",
    lazy: async () => {
      const { AuthResponse } = await import("./AuthResponse-DFS6gVO4-X4UEDOGS.js");
      return {
        Component: AuthResponse
      };
    }
  }
] : [];
var SETTINGS_LINKS_EE = () => ({
  global: [
    ...window.strapi.features.isEnabled(window.strapi.features.SSO) ? [
      {
        intlLabel: {
          id: "Settings.sso.title",
          defaultMessage: "Single Sign-On"
        },
        to: "/settings/single-sign-on",
        id: "sso"
      }
    ] : []
  ],
  admin: [
    ...window.strapi.features.isEnabled(window.strapi.features.AUDIT_LOGS) ? [
      {
        intlLabel: {
          id: "global.auditLogs",
          defaultMessage: "Audit Logs"
        },
        to: "/settings/audit-logs?pageSize=50&page=1&sort=date:DESC",
        id: "auditLogs"
      }
    ] : []
  ]
});
var constants = Object.freeze({
  __proto__: null,
  ADMIN_PERMISSIONS_EE,
  SETTINGS_LINKS_EE,
  getEERoutes: getEERoutes$1
});
var img = "data:image/svg+xml,%3csvg width='800' height='800' viewBox='0 0 800 800' fill='none' xmlns='http://www.w3.org/2000/svg'%3e %3cpath d='M39 282c0-118 0-176.9 36.6-213.5C112.2 32 171.1 32 288.9 32h221.2c117.8 0 176.7 0 213.3 36.6C760 105.2 760 164.1 760 281.9v221.2c0 117.8 0 176.7-36.6 213.3C686.8 753 627.9 753 510.1 753H288.9c-117.8 0-176.7 0-213.3-36.6C39 679.8 39 620.9 39 503.1V281.9Z' fill='%234945FF'/%3e %3cpath fill-rule='evenodd' clip-rule='evenodd' d='M536.4 250.7H293.7v123.8h123.8v123.7h123.8V255.5c0-2.6-2.2-4.8-4.9-4.8Z' fill='white'/%3e %3cpath fill='white' d='M412.7 374.5h4.8v4.8h-4.8z'/%3e %3cpath d='M293.8 374.5h119c2.6 0 4.8 2.1 4.8 4.8v119h-119a4.8 4.8 0 0 1-4.8-4.9v-119Z' fill='%239593FF'/%3e %3cpath d='M417.5 498.2h123.8L421.6 618a2.4 2.4 0 0 1-4-1.7v-118ZM293.8 374.5h-118a2.4 2.4 0 0 1-1.7-4.1l119.7-119.7v123.8Z' fill='%239593FF'/%3e%3c/svg%3e";
var ADMIN_PERMISSIONS_CE = {
  contentManager: {
    main: [],
    collectionTypesConfigurations: [
      {
        action: "plugin::content-manager.collection-types.configure-view",
        subject: null
      }
    ],
    componentsConfigurations: [
      {
        action: "plugin::content-manager.components.configure-layout",
        subject: null
      }
    ],
    singleTypesConfigurations: [
      {
        action: "plugin::content-manager.single-types.configure-view",
        subject: null
      }
    ]
  },
  marketplace: {
    main: [
      {
        action: "admin::marketplace.read",
        subject: null
      }
    ],
    read: [
      {
        action: "admin::marketplace.read",
        subject: null
      }
    ]
  },
  settings: {
    roles: {
      main: [
        {
          action: "admin::roles.create",
          subject: null
        },
        {
          action: "admin::roles.update",
          subject: null
        },
        {
          action: "admin::roles.read",
          subject: null
        },
        {
          action: "admin::roles.delete",
          subject: null
        }
      ],
      create: [
        {
          action: "admin::roles.create",
          subject: null
        }
      ],
      delete: [
        {
          action: "admin::roles.delete",
          subject: null
        }
      ],
      read: [
        {
          action: "admin::roles.read",
          subject: null
        }
      ],
      update: [
        {
          action: "admin::roles.update",
          subject: null
        }
      ]
    },
    users: {
      main: [
        {
          action: "admin::users.create",
          subject: null
        },
        {
          action: "admin::users.read",
          subject: null
        },
        {
          action: "admin::users.update",
          subject: null
        },
        {
          action: "admin::users.delete",
          subject: null
        }
      ],
      create: [
        {
          action: "admin::users.create",
          subject: null
        }
      ],
      delete: [
        {
          action: "admin::users.delete",
          subject: null
        }
      ],
      read: [
        {
          action: "admin::users.read",
          subject: null
        }
      ],
      update: [
        {
          action: "admin::users.update",
          subject: null
        }
      ]
    },
    webhooks: {
      main: [
        {
          action: "admin::webhooks.create",
          subject: null
        },
        {
          action: "admin::webhooks.read",
          subject: null
        },
        {
          action: "admin::webhooks.update",
          subject: null
        },
        {
          action: "admin::webhooks.delete",
          subject: null
        }
      ],
      create: [
        {
          action: "admin::webhooks.create",
          subject: null
        }
      ],
      delete: [
        {
          action: "admin::webhooks.delete",
          subject: null
        }
      ],
      read: [
        {
          action: "admin::webhooks.read",
          subject: null
        },
        // NOTE: We need to check with the API
        {
          action: "admin::webhooks.update",
          subject: null
        },
        {
          action: "admin::webhooks.delete",
          subject: null
        }
      ],
      update: [
        {
          action: "admin::webhooks.update",
          subject: null
        }
      ]
    },
    "api-tokens": {
      main: [
        {
          action: "admin::api-tokens.access",
          subject: null
        }
      ],
      create: [
        {
          action: "admin::api-tokens.create",
          subject: null
        }
      ],
      delete: [
        {
          action: "admin::api-tokens.delete",
          subject: null
        }
      ],
      read: [
        {
          action: "admin::api-tokens.read",
          subject: null
        }
      ],
      update: [
        {
          action: "admin::api-tokens.update",
          subject: null
        }
      ],
      regenerate: [
        {
          action: "admin::api-tokens.regenerate",
          subject: null
        }
      ]
    },
    "transfer-tokens": {
      main: [
        {
          action: "admin::transfer.tokens.access",
          subject: null
        }
      ],
      create: [
        {
          action: "admin::transfer.tokens.create",
          subject: null
        }
      ],
      delete: [
        {
          action: "admin::transfer.tokens.delete",
          subject: null
        }
      ],
      read: [
        {
          action: "admin::transfer.tokens.read",
          subject: null
        }
      ],
      update: [
        {
          action: "admin::transfer.tokens.update",
          subject: null
        }
      ],
      regenerate: [
        {
          action: "admin::transfer.tokens.regenerate",
          subject: null
        }
      ]
    },
    "project-settings": {
      read: [
        {
          action: "admin::project-settings.read",
          subject: null
        }
      ],
      update: [
        {
          action: "admin::project-settings.update",
          subject: null
        }
      ]
    },
    plugins: {
      main: [
        {
          action: "admin::marketplace.read",
          subject: null
        }
      ],
      read: [
        {
          action: "admin::marketplace.read",
          subject: null
        }
      ]
    }
  }
};
var HOOKS = {
  /**
  * Hook that allows to mutate the displayed headers of the list view table
  * @constant
  * @type {string}
  */
  INJECT_COLUMN_IN_TABLE: "Admin/CM/pages/ListView/inject-column-in-table",
  /**
  * Hook that allows to mutate the CM's collection types links pre-set filters
  * @constant
  * @type {string}
  */
  MUTATE_COLLECTION_TYPES_LINKS: "Admin/CM/pages/App/mutate-collection-types-links",
  /**
  * Hook that allows to mutate the CM's edit view layout
  * @constant
  * @type {string}
  */
  MUTATE_EDIT_VIEW_LAYOUT: "Admin/CM/pages/EditView/mutate-edit-view-layout",
  /**
  * Hook that allows to mutate the CM's single types links pre-set filters
  * @constant
  * @type {string}
  */
  MUTATE_SINGLE_TYPES_LINKS: "Admin/CM/pages/App/mutate-single-types-links"
};
var SETTINGS_LINKS_CE = () => {
  var _a, _b, _c, _d, _e, _f;
  return {
    global: [
      {
        intlLabel: {
          id: "Settings.application.title",
          defaultMessage: "Overview"
        },
        to: "/settings/application-infos",
        id: "000-application-infos"
      },
      {
        intlLabel: {
          id: "Settings.webhooks.title",
          defaultMessage: "Webhooks"
        },
        to: "/settings/webhooks",
        id: "webhooks"
      },
      {
        intlLabel: {
          id: "Settings.apiTokens.title",
          defaultMessage: "API Tokens"
        },
        to: "/settings/api-tokens?sort=name:ASC",
        id: "api-tokens"
      },
      {
        intlLabel: {
          id: "Settings.transferTokens.title",
          defaultMessage: "Transfer Tokens"
        },
        to: "/settings/transfer-tokens?sort=name:ASC",
        id: "transfer-tokens"
      },
      {
        intlLabel: {
          id: "global.plugins",
          defaultMessage: "Plugins"
        },
        to: "/settings/list-plugins",
        id: "plugins"
      },
      // If the Enterprise/Cloud feature is not enabled and if the config doesn't disable it, we promote the Enterprise/Cloud feature by displaying them in the settings menu.
      // Disable this by adding "promoteEE: false" to your `./config/admin.js` file
      ...!window.strapi.features.isEnabled(window.strapi.features.SSO) && ((_b = (_a = window.strapi) == null ? void 0 : _a.flags) == null ? void 0 : _b.promoteEE) ? [
        {
          intlLabel: {
            id: "Settings.sso.title",
            defaultMessage: "Single Sign-On"
          },
          to: "/settings/purchase-single-sign-on",
          id: "sso-purchase-page",
          licenseOnly: true
        }
      ] : [],
      ...!window.strapi.features.isEnabled("cms-content-history") && ((_d = (_c = window.strapi) == null ? void 0 : _c.flags) == null ? void 0 : _d.promoteEE) ? [
        {
          intlLabel: {
            id: "Settings.content-history.title",
            defaultMessage: "Content History"
          },
          to: "/settings/purchase-content-history",
          id: "content-history-purchase-page",
          licenseOnly: true
        }
      ] : []
    ],
    admin: [
      {
        intlLabel: {
          id: "global.roles",
          defaultMessage: "Roles"
        },
        to: "/settings/roles",
        id: "roles"
      },
      {
        intlLabel: {
          id: "global.users",
          defaultMessage: "Users"
        },
        // Init the search params directly
        to: "/settings/users?pageSize=10&page=1&sort=firstname",
        id: "users"
      },
      ...!window.strapi.features.isEnabled(window.strapi.features.AUDIT_LOGS) && ((_f = (_e = window.strapi) == null ? void 0 : _e.flags) == null ? void 0 : _f.promoteEE) ? [
        {
          intlLabel: {
            id: "global.auditLogs",
            defaultMessage: "Audit Logs"
          },
          to: "/settings/purchase-audit-logs",
          id: "auditLogs-purchase-page",
          licenseOnly: true
        }
      ] : []
    ]
  };
};
var ALLOWED_TYPES = [
  "biginteger",
  "boolean",
  "date",
  "datetime",
  "decimal",
  "email",
  "enumeration",
  "float",
  "integer",
  "json",
  "password",
  "richtext",
  "string",
  "text",
  "time",
  "uid"
];
var ALLOWED_ROOT_LEVEL_OPTIONS = [
  "min",
  "minLength",
  "max",
  "maxLength",
  "required",
  "regex",
  "enum",
  "unique",
  "private",
  "default"
];
var CustomFields = class {
  constructor() {
    this.register = (customFields) => {
      if (Array.isArray(customFields)) {
        customFields.forEach((customField) => {
          this.register(customField);
        });
      } else {
        const { name, pluginId, type, intlLabel, intlDescription, components, options } = customFields;
        (0, import_invariant.default)(name, "A name must be provided");
        (0, import_invariant.default)(type, "A type must be provided");
        (0, import_invariant.default)(intlLabel, "An intlLabel must be provided");
        (0, import_invariant.default)(intlDescription, "An intlDescription must be provided");
        (0, import_invariant.default)(components, "A components object must be provided");
        (0, import_invariant.default)(components.Input, "An Input component must be provided");
        (0, import_invariant.default)(ALLOWED_TYPES.includes(type), `Custom field type: '${type}' is not a valid Strapi type or it can't be used with a Custom Field`);
        const isValidObjectKey = /^(?![0-9])[a-zA-Z0-9$_-]+$/g;
        (0, import_invariant.default)(isValidObjectKey.test(name), `Custom field name: '${name}' is not a valid object key`);
        const allFormOptions = [
          ...(options == null ? void 0 : options.base) || [],
          ...(options == null ? void 0 : options.advanced) || []
        ];
        if (allFormOptions.length) {
          const optionPathValidations = allFormOptions.reduce(optionsValidationReducer, []);
          optionPathValidations.forEach(({ isValidOptionPath, errorMessage }) => {
            (0, import_invariant.default)(isValidOptionPath, errorMessage);
          });
        }
        const uid = pluginId ? `plugin::${pluginId}.${name}` : `global::${name}`;
        const uidAlreadyUsed = Object.prototype.hasOwnProperty.call(this.customFields, uid);
        (0, import_invariant.default)(!uidAlreadyUsed, `Custom field: '${uid}' has already been registered`);
        this.customFields[uid] = customFields;
      }
    };
    this.getAll = () => {
      return this.customFields;
    };
    this.get = (uid) => {
      return this.customFields[uid];
    };
    this.customFields = {};
  }
};
var optionsValidationReducer = (acc, option) => {
  if ("items" in option) {
    return option.items.reduce(optionsValidationReducer, acc);
  }
  if (!option.name) {
    acc.push({
      isValidOptionPath: false,
      errorMessage: "The 'name' property is required on an options object"
    });
  } else {
    acc.push({
      isValidOptionPath: option.name.startsWith("options") || ALLOWED_ROOT_LEVEL_OPTIONS.includes(option.name),
      errorMessage: `'${option.name}' must be prefixed with 'options.'`
    });
  }
  return acc;
};
var Plugin = class {
  getInjectedComponents(containerName, blockName) {
    try {
      return this.injectionZones[containerName][blockName] || [];
    } catch (err) {
      console.error("Cannot get injected component", err);
      return [];
    }
  }
  injectComponent(containerName, blockName, component) {
    try {
      this.injectionZones[containerName][blockName].push(component);
    } catch (err) {
      console.error("Cannot inject component", err);
    }
  }
  constructor(pluginConf) {
    this[L] = true;
    this.apis = pluginConf.apis || {};
    this.initializer = pluginConf.initializer || null;
    this.injectionZones = pluginConf.injectionZones || {};
    this.isReady = pluginConf.isReady !== void 0 ? pluginConf.isReady : true;
    this.name = pluginConf.name;
    this.pluginId = pluginConf.id;
  }
};
var [Provider, useHistory] = createContext("History", {
  history: [],
  currentLocationIndex: 0,
  currentLocation: "",
  canGoBack: false,
  pushState: () => {
    throw new Error("You must use the `HistoryProvider` to access the `pushState` function.");
  },
  goBack: () => {
    throw new Error("You must use the `HistoryProvider` to access the `goBack` function.");
  }
});
var HistoryProvider = ({ children }) => {
  const location = useLocation();
  const navigationType = useNavigationType();
  const navigate = useNavigate();
  const [state, dispatch] = React10.useReducer(reducer$12, {
    history: [],
    currentLocationIndex: 0,
    currentLocation: "",
    canGoBack: false
  });
  const isGoingBack = React10.useRef(false);
  const pushState = React10.useCallback((path) => {
    dispatch({
      type: "PUSH_STATE",
      payload: typeof path === "string" ? {
        to: path,
        search: ""
      } : path
    });
  }, []);
  const goBack = React10.useCallback(() => {
    navigate(-1);
    dispatch({
      type: "GO_BACK"
    });
    isGoingBack.current = true;
  }, [
    navigate
  ]);
  const prevIndex = React10.useRef(state.currentLocationIndex);
  React10.useEffect(() => {
    if (state.currentLocationIndex !== prevIndex.current) {
      dispatch({
        type: "SET_CAN_GO_BACK",
        payload: state.currentLocationIndex > 1 && state.history.length > 1
      });
      prevIndex.current = state.currentLocationIndex;
    }
  }, [
    prevIndex,
    state.currentLocationIndex,
    state.history.length
  ]);
  React10.useLayoutEffect(() => {
    if (isGoingBack.current) {
      isGoingBack.current = false;
    } else if (navigationType === "REPLACE") {
      dispatch({
        type: "REPLACE_STATE",
        payload: {
          to: location.pathname,
          search: location.search
        }
      });
    } else {
      dispatch({
        type: "PUSH_STATE",
        payload: {
          to: location.pathname,
          search: location.search
        }
      });
    }
  }, [
    dispatch,
    location.pathname,
    location.search,
    navigationType
  ]);
  return (0, import_jsx_runtime.jsx)(Provider, {
    pushState,
    goBack,
    ...state,
    children
  });
};
var reducer$12 = (state, action) => fn(state, (draft) => {
  switch (action.type) {
    case "PUSH_STATE": {
      const path = `${action.payload.to}${action.payload.search}`;
      if (state.currentLocationIndex === state.history.length) {
        draft.history = [
          ...state.history,
          path
        ];
      } else {
        draft.history = [
          ...state.history.slice(0, state.currentLocationIndex),
          path
        ];
      }
      draft.currentLocation = path;
      draft.currentLocationIndex += 1;
      break;
    }
    case "REPLACE_STATE": {
      const path = `${action.payload.to}${action.payload.search}`;
      draft.history = [
        ...state.history.slice(0, state.currentLocationIndex - 1),
        path
      ];
      draft.currentLocation = path;
      break;
    }
    case "GO_BACK": {
      const newIndex = state.currentLocationIndex - 1;
      draft.currentLocation = state.history[newIndex - 1];
      draft.currentLocationIndex = newIndex;
      break;
    }
    case "SET_CAN_GO_BACK": {
      draft.canGoBack = action.payload;
      break;
    }
  }
});
var BackButton = React10.forwardRef(({ disabled, fallback = "" }, ref) => {
  const { formatMessage } = useIntl();
  const navigate = useNavigate();
  const canGoBack = useHistory("BackButton", (state) => state.canGoBack);
  const goBack = useHistory("BackButton", (state) => state.goBack);
  const history = useHistory("BackButton", (state) => state.history);
  const currentLocationIndex = useHistory("BackButton", (state) => state.currentLocationIndex);
  const hasFallback = fallback !== "";
  const shouldBeDisabled = disabled || !canGoBack && !hasFallback;
  const handleClick = (e) => {
    e.preventDefault();
    if (canGoBack) {
      goBack();
    } else if (hasFallback) {
      navigate(fallback);
    }
  };
  const historyTo = canGoBack ? history.at(currentLocationIndex - 2) : void 0;
  const toWithFallback = historyTo ?? fallback;
  return (0, import_jsx_runtime.jsx)(Link2, {
    ref,
    tag: NavLink,
    to: toWithFallback,
    onClick: handleClick,
    disabled: shouldBeDisabled,
    "aria-disabled": shouldBeDisabled,
    startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$57, {}),
    children: formatMessage({
      id: "global.back",
      defaultMessage: "Back"
    })
  });
});
var queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      refetchOnWindowFocus: false
    }
  }
});
var Providers = ({ children, strapi, store }) => {
  return (0, import_jsx_runtime.jsx)(StrapiAppProvider, {
    components: strapi.library.components,
    customFields: strapi.customFields,
    fields: strapi.library.fields,
    menu: strapi.router.menu,
    getAdminInjectedComponents: strapi.getAdminInjectedComponents,
    getPlugin: strapi.getPlugin,
    plugins: strapi.plugins,
    rbac: strapi.rbac,
    runHookParallel: strapi.runHookParallel,
    runHookWaterfall: (name, initialValue) => strapi.runHookWaterfall(name, initialValue, store),
    runHookSeries: strapi.runHookSeries,
    settings: strapi.router.settings,
    children: (0, import_jsx_runtime.jsx)(Provider_default, {
      store,
      children: (0, import_jsx_runtime.jsx)(QueryClientProvider, {
        client: queryClient,
        children: (0, import_jsx_runtime.jsx)(AuthProvider, {
          children: (0, import_jsx_runtime.jsx)(HistoryProvider, {
            children: (0, import_jsx_runtime.jsx)(LanguageProvider, {
              messages: strapi.configurations.translations,
              children: (0, import_jsx_runtime.jsx)(Theme, {
                themes: strapi.configurations.themes,
                children: (0, import_jsx_runtime.jsx)(NotificationsProvider, {
                  children: (0, import_jsx_runtime.jsx)(TrackingProvider, {
                    children: (0, import_jsx_runtime.jsx)(GuidedTourProvider, {
                      children: (0, import_jsx_runtime.jsx)(ConfigurationProvider, {
                        defaultAuthLogo: strapi.configurations.authLogo,
                        defaultMenuLogo: strapi.configurations.menuLogo,
                        showTutorials: strapi.configurations.tutorials,
                        showReleaseNotification: strapi.configurations.notifications.releases,
                        children
                      })
                    })
                  })
                })
              })
            })
          })
        })
      })
    })
  });
};
var App = ({ strapi, store }) => {
  (0, import_react10.useEffect)(() => {
    const language = localStorage.getItem(LANGUAGE_LOCAL_STORAGE_KEY) || "en";
    if (language) {
      document.documentElement.lang = language;
    }
  }, []);
  return (0, import_jsx_runtime.jsx)(Providers, {
    strapi,
    store,
    children: (0, import_jsx_runtime.jsx)(import_react10.Suspense, {
      fallback: (0, import_jsx_runtime.jsx)(Page.Loading, {}),
      children: (0, import_jsx_runtime.jsx)(Outlet, {})
    })
  });
};
var useClipboard = () => {
  const copy = (0, import_react10.useCallback)(async (value) => {
    try {
      if (typeof value !== "string" && typeof value !== "number") {
        throw new Error(`Cannot copy typeof ${typeof value} to clipboard, must be a string or number`);
      } else if (value === "") {
        throw new Error(`Cannot copy empty string to clipboard.`);
      }
      const stringifiedValue = value.toString();
      await navigator.clipboard.writeText(stringifiedValue);
      return true;
    } catch (error) {
      if (true) {
        console.warn("Copy failed", error);
      }
      return false;
    }
  }, []);
  return {
    copy
  };
};
var ErrorElement = () => {
  const error = useRouteError();
  const { formatMessage } = useIntl();
  const { copy } = useClipboard();
  if (error instanceof Error) {
    console.error(error);
    const handleClick = async () => {
      await copy(`
\`\`\`
${error.stack}
\`\`\`
      `);
    };
    return (0, import_jsx_runtime.jsx)(Main, {
      height: "100%",
      children: (0, import_jsx_runtime.jsx)(Flex, {
        alignItems: "center",
        height: "100%",
        justifyContent: "center",
        children: (0, import_jsx_runtime.jsxs)(Flex, {
          gap: 7,
          padding: 7,
          direction: "column",
          width: "35%",
          shadow: "tableShadow",
          borderColor: "neutral150",
          background: "neutral0",
          hasRadius: true,
          maxWidth: "512px",
          children: [
            (0, import_jsx_runtime.jsxs)(Flex, {
              direction: "column",
              gap: 2,
              children: [
                (0, import_jsx_runtime.jsx)(ForwardRef$3, {
                  width: "32px",
                  height: "32px",
                  fill: "danger600"
                }),
                (0, import_jsx_runtime.jsx)(Typography, {
                  fontSize: 4,
                  fontWeight: "bold",
                  textAlign: "center",
                  children: formatMessage({
                    id: "app.error",
                    defaultMessage: "Something went wrong"
                  })
                }),
                (0, import_jsx_runtime.jsx)(Typography, {
                  variant: "omega",
                  textAlign: "center",
                  children: formatMessage({
                    id: "app.error.message",
                    defaultMessage: `It seems like there is a bug in your instance, but we've got you covered. Please notify your technical team so they can investigate the source of the problem and report the issue to us by opening a bug report on {link}.`
                  }, {
                    link: (0, import_jsx_runtime.jsx)(Link2, {
                      isExternal: true,
                      // hack to get rid of the current endIcon, which should be removable by using `null`.
                      endIcon: true,
                      href: "https://github.com/strapi/strapi/issues/new?assignees=&labels=&projects=&template=BUG_REPORT.md",
                      children: `Strapi's GitHub`
                    })
                  })
                })
              ]
            }),
            (0, import_jsx_runtime.jsxs)(Flex, {
              gap: 4,
              direction: "column",
              width: "100%",
              children: [
                (0, import_jsx_runtime.jsx)(StyledAlert, {
                  onClose: () => {
                  },
                  width: "100%",
                  closeLabel: "",
                  variant: "danger",
                  children: (0, import_jsx_runtime.jsx)(ErrorType, {
                    children: error.message
                  })
                }),
                (0, import_jsx_runtime.jsx)(Button, {
                  onClick: handleClick,
                  variant: "tertiary",
                  startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$3L, {}),
                  children: formatMessage({
                    id: "app.error.copy",
                    defaultMessage: "Copy to clipboard"
                  })
                })
              ]
            })
          ]
        })
      })
    });
  }
  throw error;
};
var StyledAlert = dt(Alert)`
  & > div:first-child {
    display: none;
  }

  & > button {
    display: none;
  }
`;
var ErrorType = dt(Typography)`
  word-break: break-all;
  color: ${({ theme }) => theme.colors.danger600};
`;
var ActionLayout = ({ startActions, endActions }) => {
  if (!startActions && !endActions) {
    return null;
  }
  return (0, import_jsx_runtime.jsxs)(Flex, {
    justifyContent: "space-between",
    alignItems: "flex-start",
    paddingBottom: 4,
    paddingLeft: 10,
    paddingRight: 10,
    children: [
      (0, import_jsx_runtime.jsx)(Flex, {
        gap: 2,
        wrap: "wrap",
        children: startActions
      }),
      (0, import_jsx_runtime.jsx)(Flex, {
        gap: 2,
        shrink: 0,
        wrap: "wrap",
        children: endActions
      })
    ]
  });
};
var ContentLayout = ({ children }) => {
  return (0, import_jsx_runtime.jsx)(Box, {
    paddingLeft: 10,
    paddingRight: 10,
    children
  });
};
var GridColSize = {
  S: 180,
  M: 250
};
var StyledGrid = dt(Box)`
  display: grid;
  grid-template-columns: repeat(
    auto-fit,
    minmax(${({ $size }) => `${GridColSize[$size]}px`}, 1fr)
  );
  grid-gap: ${({ theme }) => theme.spaces[4]};
`;
var GridLayout = ({ size, children }) => {
  return (0, import_jsx_runtime.jsx)(StyledGrid, {
    $size: size,
    children
  });
};
var useElementOnScreen = (onVisiblityChange, options) => {
  const containerRef = React10.useRef(null);
  React10.useEffect(() => {
    const containerEl = containerRef.current;
    const observer = new IntersectionObserver(([entry]) => {
      onVisiblityChange(entry.isIntersecting);
    }, options);
    if (containerEl) {
      observer.observe(containerRef.current);
    }
    return () => {
      if (containerEl) {
        observer.disconnect();
      }
    };
  }, [
    containerRef,
    options,
    onVisiblityChange
  ]);
  return containerRef;
};
var BaseHeaderLayout = React10.forwardRef(({ navigationAction, primaryAction, secondaryAction, subtitle, title, sticky, width, ...props }, ref) => {
  const isSubtitleString = typeof subtitle === "string";
  if (sticky) {
    return (0, import_jsx_runtime.jsx)(Box, {
      paddingLeft: 6,
      paddingRight: 6,
      paddingTop: 3,
      paddingBottom: 3,
      position: "fixed",
      top: 0,
      right: 0,
      background: "neutral0",
      shadow: "tableShadow",
      width: `${width}px`,
      zIndex: 1,
      "data-strapi-header-sticky": true,
      children: (0, import_jsx_runtime.jsxs)(Flex, {
        justifyContent: "space-between",
        children: [
          (0, import_jsx_runtime.jsxs)(Flex, {
            children: [
              navigationAction && (0, import_jsx_runtime.jsx)(Box, {
                paddingRight: 3,
                children: navigationAction
              }),
              (0, import_jsx_runtime.jsxs)(Box, {
                children: [
                  (0, import_jsx_runtime.jsx)(Typography, {
                    variant: "beta",
                    tag: "h1",
                    ...props,
                    children: title
                  }),
                  isSubtitleString ? (0, import_jsx_runtime.jsx)(Typography, {
                    variant: "pi",
                    textColor: "neutral600",
                    children: subtitle
                  }) : subtitle
                ]
              }),
              secondaryAction ? (0, import_jsx_runtime.jsx)(Box, {
                paddingLeft: 4,
                children: secondaryAction
              }) : null
            ]
          }),
          (0, import_jsx_runtime.jsx)(Flex, {
            children: primaryAction ? (0, import_jsx_runtime.jsx)(Box, {
              paddingLeft: 2,
              children: primaryAction
            }) : void 0
          })
        ]
      })
    });
  }
  return (0, import_jsx_runtime.jsxs)(Box, {
    ref,
    paddingLeft: 10,
    paddingRight: 10,
    paddingBottom: 8,
    paddingTop: navigationAction ? 6 : 8,
    background: "neutral100",
    "data-strapi-header": true,
    children: [
      navigationAction ? (0, import_jsx_runtime.jsx)(Box, {
        paddingBottom: 2,
        children: navigationAction
      }) : null,
      (0, import_jsx_runtime.jsxs)(Flex, {
        justifyContent: "space-between",
        children: [
          (0, import_jsx_runtime.jsxs)(Flex, {
            minWidth: 0,
            children: [
              (0, import_jsx_runtime.jsx)(Typography, {
                tag: "h1",
                variant: "alpha",
                ...props,
                children: title
              }),
              secondaryAction ? (0, import_jsx_runtime.jsx)(Box, {
                paddingLeft: 4,
                children: secondaryAction
              }) : null
            ]
          }),
          primaryAction
        ]
      }),
      isSubtitleString ? (0, import_jsx_runtime.jsx)(Typography, {
        variant: "epsilon",
        textColor: "neutral600",
        tag: "p",
        children: subtitle
      }) : subtitle
    ]
  });
});
var HeaderLayout = (props) => {
  const baseHeaderLayoutRef = React10.useRef(null);
  const [headerSize, setHeaderSize] = React10.useState(null);
  const [isVisible, setIsVisible] = React10.useState(true);
  const containerRef = useElementOnScreen(setIsVisible, {
    root: null,
    rootMargin: "0px",
    threshold: 0
  });
  useResizeObserver(containerRef, () => {
    if (containerRef.current) {
      setHeaderSize(containerRef.current.getBoundingClientRect());
    }
  });
  React10.useEffect(() => {
    if (baseHeaderLayoutRef.current) {
      setHeaderSize(baseHeaderLayoutRef.current.getBoundingClientRect());
    }
  }, [
    baseHeaderLayoutRef
  ]);
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
    children: [
      (0, import_jsx_runtime.jsx)("div", {
        style: {
          height: headerSize == null ? void 0 : headerSize.height
        },
        ref: containerRef,
        children: isVisible && (0, import_jsx_runtime.jsx)(BaseHeaderLayout, {
          ref: baseHeaderLayoutRef,
          ...props
        })
      }),
      !isVisible && (0, import_jsx_runtime.jsx)(BaseHeaderLayout, {
        ...props,
        sticky: true,
        width: headerSize == null ? void 0 : headerSize.width
      })
    ]
  });
};
HeaderLayout.displayName = "HeaderLayout";
var useResizeObserver = (sources, onResize) => {
  const handleResize = useCallbackRef(onResize);
  React10.useLayoutEffect(() => {
    const resizeObs = new ResizeObserver(handleResize);
    if (Array.isArray(sources)) {
      sources.forEach((source) => {
        if (source.current) {
          resizeObs.observe(source.current);
        }
      });
    } else if (sources.current) {
      resizeObs.observe(sources.current);
    }
    return () => {
      resizeObs.disconnect();
    };
  }, [
    sources,
    handleResize
  ]);
};
var GridContainer = dt(Box)`
  display: grid;
  grid-template-columns: ${({ $hasSideNav }) => $hasSideNav ? `auto 1fr` : "1fr"};
`;
var OverflowingItem = dt(Box)`
  overflow-x: hidden;
`;
var RootLayout = ({ sideNav, children }) => {
  return (0, import_jsx_runtime.jsxs)(GridContainer, {
    $hasSideNav: Boolean(sideNav),
    children: [
      sideNav,
      (0, import_jsx_runtime.jsx)(OverflowingItem, {
        paddingBottom: 10,
        children
      })
    ]
  });
};
var Layouts = {
  Root: RootLayout,
  Header: HeaderLayout,
  BaseHeader: BaseHeaderLayout,
  Grid: GridLayout,
  Action: ActionLayout,
  Content: ContentLayout
};
var NotFoundPage = () => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime.jsxs)(Page.Main, {
    labelledBy: "title",
    children: [
      (0, import_jsx_runtime.jsx)(Layouts.Header, {
        id: "title",
        title: formatMessage({
          id: "content-manager.pageNotFound",
          defaultMessage: "Page not found"
        })
      }),
      (0, import_jsx_runtime.jsx)(Layouts.Content, {
        children: (0, import_jsx_runtime.jsx)(EmptyStateLayout, {
          action: (0, import_jsx_runtime.jsx)(LinkButton, {
            tag: Link,
            variant: "secondary",
            endIcon: (0, import_jsx_runtime.jsx)(ForwardRef$55, {}),
            to: "/",
            children: formatMessage({
              id: "app.components.NotFoundPage.back",
              defaultMessage: "Back to homepage"
            })
          }),
          content: formatMessage({
            id: "app.page.not.found",
            defaultMessage: "Oops! We can't seem to find the page you're looging for..."
          }),
          hasRadius: true,
          icon: (0, import_jsx_runtime.jsx)(ForwardRef$F, {
            width: "16rem"
          }),
          shadow: "tableShadow"
        })
      })
    ]
  });
};
var getEERoutes = () => [
  ...window.strapi.features.isEnabled(window.strapi.features.AUDIT_LOGS) ? [
    {
      path: "audit-logs",
      lazy: async () => {
        const { ProtectedListPage } = await import("./ListPage-Beh8uBDE-2HANERMB.js");
        return {
          Component: ProtectedListPage
        };
      }
    }
  ] : [],
  ...window.strapi.features.isEnabled(window.strapi.features.SSO) ? [
    {
      path: "single-sign-on",
      lazy: async () => {
        const { ProtectedSSO } = await import("./SingleSignOnPage-Bqn13t3u-JLB42QH4.js");
        return {
          Component: ProtectedSSO
        };
      }
    }
  ] : []
];
var ERR_MSG = "The Form Component has not been initialised, ensure you are using this hook within a Form component";
var [FormProvider, useForm] = createContext("Form", {
  disabled: false,
  errors: {},
  initialValues: {},
  isSubmitting: false,
  modified: false,
  addFieldRow: () => {
    throw new Error(ERR_MSG);
  },
  moveFieldRow: () => {
    throw new Error(ERR_MSG);
  },
  onChange: () => {
    throw new Error(ERR_MSG);
  },
  removeFieldRow: () => {
    throw new Error(ERR_MSG);
  },
  resetForm: () => {
    throw new Error(ERR_MSG);
  },
  setErrors: () => {
    throw new Error(ERR_MSG);
  },
  setValues: () => {
    throw new Error(ERR_MSG);
  },
  setSubmitting: () => {
    throw new Error(ERR_MSG);
  },
  validate: async () => {
    throw new Error(ERR_MSG);
  },
  values: {}
});
var Form2 = React10.forwardRef(({ disabled = false, method, onSubmit, initialErrors, ...props }, ref) => {
  const formRef = React10.useRef(null);
  const initialValues = React10.useRef(props.initialValues ?? {});
  const [state, dispatch] = React10.useReducer(reducer2, {
    errors: initialErrors ?? {},
    isSubmitting: false,
    values: props.initialValues ?? {}
  });
  React10.useEffect(() => {
    if (!(0, import_isEqual.default)(initialValues.current, props.initialValues)) {
      initialValues.current = props.initialValues ?? {};
      dispatch({
        type: "SET_INITIAL_VALUES",
        payload: props.initialValues ?? {}
      });
    }
  }, [
    props.initialValues
  ]);
  const setErrors = React10.useCallback((errors) => {
    dispatch({
      type: "SET_ERRORS",
      payload: errors
    });
  }, []);
  const setValues = React10.useCallback((values) => {
    dispatch({
      type: "SET_VALUES",
      payload: values
    });
  }, []);
  React10.useEffect(() => {
    if (Object.keys(state.errors).length === 0)
      return;
    const ref2 = setTimeout(() => {
      const [firstError] = formRef.current.querySelectorAll("[data-strapi-field-error]");
      if (firstError) {
        const errorId = firstError.getAttribute("id");
        const formElementInError = formRef.current.querySelector(`[aria-describedby="${errorId}"]`);
        if (formElementInError && formElementInError instanceof HTMLElement) {
          formElementInError.focus();
        }
      }
    });
    return () => clearTimeout(ref2);
  }, [
    state.errors
  ]);
  const validate = React10.useCallback(async (shouldSetErrors = true, options = {}) => {
    setErrors({});
    if (!props.validationSchema && !props.validate) {
      return {
        data: state.values
      };
    }
    try {
      let data;
      if (props.validationSchema) {
        data = await props.validationSchema.validate(state.values, {
          abortEarly: false
        });
      } else if (props.validate) {
        data = await props.validate(state.values, options);
      } else {
        throw new Error("No validation schema or validate function provided");
      }
      return {
        data
      };
    } catch (err) {
      if (isErrorYupValidationError(err)) {
        const errors = getYupValidationErrors(err);
        if (shouldSetErrors) {
          setErrors(errors);
        }
        return {
          errors
        };
      } else {
        if (true) {
          console.warn(`Warning: An unhandled error was caught during validation in <Form validationSchema />`, err);
        }
        throw err;
      }
    }
  }, [
    props,
    setErrors,
    state.values
  ]);
  const handleSubmit = async (e) => {
    e.stopPropagation();
    e.preventDefault();
    if (!onSubmit) {
      return;
    }
    dispatch({
      type: "SUBMIT_ATTEMPT"
    });
    try {
      const { data, errors } = await validate();
      if (errors) {
        setErrors(errors);
        throw new Error("Submission failed");
      }
      await onSubmit(data, {
        setErrors,
        setValues,
        resetForm
      });
      dispatch({
        type: "SUBMIT_SUCCESS"
      });
    } catch (err) {
      dispatch({
        type: "SUBMIT_FAILURE"
      });
      if (err instanceof Error && err.message === "Submission failed") {
        return;
      }
    }
  };
  const modified = React10.useMemo(() => !(0, import_isEqual.default)(initialValues.current, state.values), [
    state.values
  ]);
  const handleChange = useCallbackRef((eventOrPath, v) => {
    if (typeof eventOrPath === "string") {
      dispatch({
        type: "SET_FIELD_VALUE",
        payload: {
          field: eventOrPath,
          value: v
        }
      });
      return;
    }
    const target = eventOrPath.target || eventOrPath.currentTarget;
    const { type, name, id, value, options, multiple } = target;
    const field = name || id;
    if (!field && true) {
      console.warn(`\`onChange\` was called with an event, but you forgot to pass a \`name\` or \`id'\` attribute to your input. The field to update cannot be determined`);
    }
    let val;
    if (/number|range/.test(type)) {
      const parsed = parseFloat(value);
      val = isNaN(parsed) ? "" : parsed;
    } else if (/checkbox/.test(type)) {
      val = !getIn(state.values, field);
    } else if (options && multiple) {
      val = Array.from(options).filter((el) => el.selected).map((el) => el.value);
    } else {
      if (value === "") {
        val = null;
      } else {
        val = value;
      }
    }
    if (field) {
      dispatch({
        type: "SET_FIELD_VALUE",
        payload: {
          field,
          value: val
        }
      });
    }
  });
  const addFieldRow = React10.useCallback((field, value, addAtIndex) => {
    dispatch({
      type: "ADD_FIELD_ROW",
      payload: {
        field,
        value,
        addAtIndex
      }
    });
  }, []);
  const removeFieldRow = React10.useCallback((field, removeAtIndex) => {
    dispatch({
      type: "REMOVE_FIELD_ROW",
      payload: {
        field,
        removeAtIndex
      }
    });
  }, []);
  const moveFieldRow = React10.useCallback((field, fromIndex, toIndex) => {
    dispatch({
      type: "MOVE_FIELD_ROW",
      payload: {
        field,
        fromIndex,
        toIndex
      }
    });
  }, []);
  const resetForm = React10.useCallback(() => {
    dispatch({
      type: "RESET_FORM",
      payload: {
        errors: {},
        isSubmitting: false,
        values: initialValues.current
      }
    });
  }, []);
  const setSubmitting = React10.useCallback((isSubmitting) => {
    dispatch({
      type: "SET_ISSUBMITTING",
      payload: isSubmitting
    });
  }, []);
  const composedRefs = useComposedRefs(formRef, ref);
  return (0, import_jsx_runtime.jsx)(Box, {
    tag: "form",
    ref: composedRefs,
    method,
    noValidate: true,
    onSubmit: handleSubmit,
    width: props.width,
    height: props.height,
    children: (0, import_jsx_runtime.jsx)(FormProvider, {
      disabled,
      onChange: handleChange,
      initialValues: initialValues.current,
      modified,
      addFieldRow,
      moveFieldRow,
      removeFieldRow,
      resetForm,
      setErrors,
      setValues,
      setSubmitting,
      validate,
      ...state,
      children: typeof props.children === "function" ? props.children({
        modified,
        disabled,
        onChange: handleChange,
        ...state,
        setErrors,
        resetForm
      }) : props.children
    })
  });
});
var isErrorYupValidationError = (err) => typeof err === "object" && err !== null && "name" in err && typeof err.name === "string" && err.name === "ValidationError";
var getYupValidationErrors = (err) => {
  let errors = {};
  if (err.inner) {
    if (err.inner.length === 0) {
      return setIn(errors, err.path, err.message);
    }
    for (const error of err.inner) {
      if (!getIn(errors, error.path)) {
        errors = setIn(errors, error.path, error.message);
      }
    }
  }
  return errors;
};
var reducer2 = (state, action) => fn(state, (draft) => {
  var _a, _b, _c, _d, _e, _f;
  switch (action.type) {
    case "SET_INITIAL_VALUES":
      draft.values = action.payload;
      break;
    case "SET_VALUES":
      draft.values = action.payload;
      break;
    case "SUBMIT_ATTEMPT":
      draft.isSubmitting = true;
      break;
    case "SUBMIT_FAILURE":
      draft.isSubmitting = false;
      break;
    case "SUBMIT_SUCCESS":
      draft.isSubmitting = false;
      break;
    case "SET_FIELD_VALUE":
      draft.values = setIn(state.values, action.payload.field, action.payload.value);
      break;
    case "ADD_FIELD_ROW": {
      const currentField = getIn(state.values, action.payload.field, []);
      let position = action.payload.addAtIndex;
      if (position === void 0) {
        position = currentField.length;
      } else if (position < 0) {
        position = 0;
      }
      const [key] = generateNKeysBetween(position > 0 ? (_a = currentField.at(position - 1)) == null ? void 0 : _a.__temp_key__ : null, (_b = currentField.at(position)) == null ? void 0 : _b.__temp_key__, 1);
      draft.values = setIn(state.values, action.payload.field, currentField.toSpliced(position, 0, {
        ...action.payload.value,
        __temp_key__: key
      }));
      break;
    }
    case "MOVE_FIELD_ROW": {
      const { field, fromIndex, toIndex } = action.payload;
      const currentField = [
        ...getIn(state.values, field, [])
      ];
      const currentRow = currentField[fromIndex];
      const startKey = fromIndex > toIndex ? (_c = currentField[toIndex - 1]) == null ? void 0 : _c.__temp_key__ : (_d = currentField[toIndex]) == null ? void 0 : _d.__temp_key__;
      const endKey = fromIndex > toIndex ? (_e = currentField[toIndex]) == null ? void 0 : _e.__temp_key__ : (_f = currentField[toIndex + 1]) == null ? void 0 : _f.__temp_key__;
      const [newKey] = generateNKeysBetween(startKey, endKey, 1);
      currentField.splice(fromIndex, 1);
      currentField.splice(toIndex, 0, {
        ...currentRow,
        __temp_key__: newKey
      });
      draft.values = setIn(state.values, field, currentField);
      break;
    }
    case "REMOVE_FIELD_ROW": {
      const currentField = getIn(state.values, action.payload.field, []);
      let position = action.payload.removeAtIndex;
      if (position === void 0) {
        position = currentField.length - 1;
      } else if (position < 0) {
        position = 0;
      }
      const newValue = setIn(currentField, position.toString(), void 0).filter((val) => val);
      draft.values = setIn(state.values, action.payload.field, newValue.length > 0 ? newValue : []);
      break;
    }
    case "SET_ERRORS":
      if (!(0, import_isEqual.default)(state.errors, action.payload)) {
        draft.errors = action.payload;
      }
      break;
    case "SET_ISSUBMITTING":
      draft.isSubmitting = action.payload;
      break;
    case "RESET_FORM":
      draft.values = action.payload.values;
      draft.errors = action.payload.errors;
      draft.isSubmitting = action.payload.isSubmitting;
      break;
  }
});
function useField(path) {
  const { formatMessage } = useIntl();
  const initialValue = useForm("useField", (state) => getIn(state.initialValues, path));
  const value = useForm("useField", (state) => getIn(state.values, path));
  const handleChange = useForm("useField", (state) => state.onChange);
  const rawError = useForm("useField", (state) => getIn(state.errors, path));
  const error = useForm("useField", (state) => {
    const error2 = getIn(state.errors, path);
    if (isErrorMessageDescriptor(error2)) {
      const { values, ...message } = error2;
      return formatMessage(message, values);
    }
    return error2;
  });
  return {
    initialValue,
    /**
    * Errors can be a string, or a MessageDescriptor, so we need to handle both cases.
    * If it's anything else, we don't return it.
    */
    rawError,
    error: isErrorMessageDescriptor(error) ? formatMessage({
      id: error.id,
      defaultMessage: error.defaultMessage
    }, error.values) : typeof error === "string" ? error : void 0,
    onChange: handleChange,
    value
  };
}
var isErrorMessageDescriptor = (object) => {
  return typeof object === "object" && object !== null && !Array.isArray(object) && "id" in object && "defaultMessage" in object;
};
var Blocker = ({ onProceed = () => {
}, onCancel = () => {
} }) => {
  const { formatMessage } = useIntl();
  const modified = useForm("Blocker", (state) => state.modified);
  const isSubmitting = useForm("Blocker", (state) => state.isSubmitting);
  const blocker = useBlocker(({ currentLocation, nextLocation }) => {
    return !isSubmitting && modified && (currentLocation.pathname !== nextLocation.pathname || currentLocation.search !== nextLocation.search);
  });
  if (blocker.state === "blocked") {
    const handleCancel = (isOpen) => {
      if (!isOpen) {
        onCancel();
        blocker.reset();
      }
    };
    return (0, import_jsx_runtime.jsx)(Dialog.Root, {
      open: true,
      onOpenChange: handleCancel,
      children: (0, import_jsx_runtime.jsxs)(Dialog.Content, {
        children: [
          (0, import_jsx_runtime.jsx)(Dialog.Header, {
            children: formatMessage({
              id: "app.components.ConfirmDialog.title",
              defaultMessage: "Confirmation"
            })
          }),
          (0, import_jsx_runtime.jsx)(Dialog.Body, {
            icon: (0, import_jsx_runtime.jsx)(ForwardRef$3, {
              width: "24px",
              height: "24px",
              fill: "danger600"
            }),
            children: formatMessage({
              id: "global.prompt.unsaved",
              defaultMessage: "You have unsaved changes, are you sure you want to leave?"
            })
          }),
          (0, import_jsx_runtime.jsxs)(Dialog.Footer, {
            children: [
              (0, import_jsx_runtime.jsx)(Dialog.Cancel, {
                children: (0, import_jsx_runtime.jsx)(Button, {
                  variant: "tertiary",
                  children: formatMessage({
                    id: "app.components.Button.cancel",
                    defaultMessage: "Cancel"
                  })
                })
              }),
              (0, import_jsx_runtime.jsx)(Button, {
                onClick: () => {
                  onProceed();
                  blocker.proceed();
                },
                variant: "danger",
                children: formatMessage({
                  id: "app.components.Button.confirm",
                  defaultMessage: "Confirm"
                })
              })
            ]
          })
        ]
      })
    });
  }
  return null;
};
var useFocusInputField = (name) => {
  const { search: searchString } = useLocation();
  const search = (0, import_react10.useMemo)(() => new URLSearchParams(searchString), [
    searchString
  ]);
  const [field, setField] = (0, import_react10.useState)(null);
  (0, import_react10.useEffect)(() => {
    if (search.has("field") && search.get("field") === name && field) {
      field.focus();
      field.scrollIntoView({
        block: "center"
      });
    }
  }, [
    search,
    name,
    field
  ]);
  return setField;
};
var BooleanInput = (0, import_react10.forwardRef)(({ name, required, label, hint, labelAction, ...props }, ref) => {
  const { formatMessage } = useIntl();
  const field = useField(name);
  const fieldRef = useFocusInputField(name);
  const composedRefs = useComposedRefs(ref, fieldRef);
  return (0, import_jsx_runtime.jsxs)(Field.Root, {
    error: field.error,
    name,
    hint,
    required,
    maxWidth: "320px",
    children: [
      (0, import_jsx_runtime.jsx)(Field.Label, {
        action: labelAction,
        children: label
      }),
      (0, import_jsx_runtime.jsx)(Toggle, {
        ref: composedRefs,
        checked: field.value === null ? null : field.value || false,
        offLabel: formatMessage({
          id: "app.components.ToggleCheckbox.off-label",
          defaultMessage: "False"
        }),
        onLabel: formatMessage({
          id: "app.components.ToggleCheckbox.on-label",
          defaultMessage: "True"
        }),
        onChange: field.onChange,
        ...props
      }),
      (0, import_jsx_runtime.jsx)(Field.Hint, {}),
      (0, import_jsx_runtime.jsx)(Field.Error, {})
    ]
  });
});
var MemoizedBooleanInput = (0, import_react10.memo)(BooleanInput);
var CheckboxInput = (0, import_react10.forwardRef)(({ name, required, label, hint, type: _type, ...props }, ref) => {
  const field = useField(name);
  const fieldRef = useFocusInputField(name);
  const composedRefs = useComposedRefs(ref, fieldRef);
  return (0, import_jsx_runtime.jsxs)(Field.Root, {
    error: field.error,
    name,
    hint,
    required,
    children: [
      (0, import_jsx_runtime.jsx)(CheckboxImpl, {
        onCheckedChange: (checked) => field.onChange(name, !!checked),
        ref: composedRefs,
        checked: field.value,
        ...props,
        children: label || props["aria-label"]
      }),
      (0, import_jsx_runtime.jsx)(Field.Hint, {}),
      (0, import_jsx_runtime.jsx)(Field.Error, {})
    ]
  });
});
var MemoizedCheckboxInput = (0, import_react10.memo)(CheckboxInput);
var DateInput = React10.forwardRef(({ name, required, label, hint, labelAction, type: _type, ...props }, ref) => {
  const { formatMessage } = useIntl();
  const field = useField(name);
  const fieldRef = useFocusInputField(name);
  const composedRefs = useComposedRefs(ref, fieldRef);
  const [lastValidDate, setLastValidDate] = React10.useState(null);
  const value = typeof field.value === "string" ? new Date(field.value) : field.value;
  const handleDateChange = (date) => {
    if (!date) {
      field.onChange(name, null);
      setLastValidDate(null);
      return;
    }
    const utcDate = toUTCMidnight(date);
    field.onChange(name, utcDate.toISOString());
    setLastValidDate(utcDate);
  };
  return (0, import_jsx_runtime.jsxs)(Field.Root, {
    error: field.error,
    name,
    hint,
    required,
    children: [
      (0, import_jsx_runtime.jsx)(Field.Label, {
        action: labelAction,
        children: label
      }),
      (0, import_jsx_runtime.jsx)(DatePicker$1, {
        ref: composedRefs,
        clearLabel: formatMessage({
          id: "clearLabel",
          defaultMessage: "Clear"
        }),
        onChange: handleDateChange,
        onClear: () => {
          field.onChange(name, null);
          setLastValidDate(null);
          return;
        },
        onBlur: () => {
          if (field.value && !value) {
            field.onChange(name, (lastValidDate == null ? void 0 : lastValidDate.toISOString()) ?? null);
          }
        },
        value,
        ...props
      }),
      (0, import_jsx_runtime.jsx)(Field.Hint, {}),
      (0, import_jsx_runtime.jsx)(Field.Error, {})
    ]
  });
});
var toUTCMidnight = (date) => {
  return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
};
var MemoizedDateInput = React10.memo(DateInput);
var DateTimeInput = (0, import_react10.forwardRef)(({ name, required, label, hint, labelAction, ...props }, ref) => {
  const { formatMessage } = useIntl();
  const field = useField(name);
  const fieldRef = useFocusInputField(name);
  const composedRefs = useComposedRefs(ref, fieldRef);
  const value = typeof field.value === "string" ? new Date(field.value) : field.value;
  return (0, import_jsx_runtime.jsxs)(Field.Root, {
    error: field.error,
    name,
    hint,
    required,
    children: [
      (0, import_jsx_runtime.jsx)(Field.Label, {
        action: labelAction,
        children: label
      }),
      (0, import_jsx_runtime.jsx)(DateTimePicker, {
        ref: composedRefs,
        clearLabel: formatMessage({
          id: "clearLabel",
          defaultMessage: "Clear"
        }),
        onChange: (date) => {
          field.onChange(name, date ? date.toISOString() : null);
        },
        onClear: () => field.onChange(name, null),
        value,
        ...props
      }),
      (0, import_jsx_runtime.jsx)(Field.Hint, {}),
      (0, import_jsx_runtime.jsx)(Field.Error, {})
    ]
  });
});
var MemoizedDateTimeInput = (0, import_react10.memo)(DateTimeInput);
var EmailInput = (0, import_react10.forwardRef)(({ name, required, label, hint, labelAction, ...props }, ref) => {
  const field = useField(name);
  const fieldRef = useFocusInputField(name);
  const composedRefs = useComposedRefs(ref, fieldRef);
  return (0, import_jsx_runtime.jsxs)(Field.Root, {
    error: field.error,
    name,
    hint,
    required,
    children: [
      (0, import_jsx_runtime.jsx)(Field.Label, {
        action: labelAction,
        children: label
      }),
      (0, import_jsx_runtime.jsx)(TextInput, {
        ref: composedRefs,
        autoComplete: "email",
        onChange: field.onChange,
        value: field.value,
        ...props,
        type: "email"
      }),
      (0, import_jsx_runtime.jsx)(Field.Hint, {}),
      (0, import_jsx_runtime.jsx)(Field.Error, {})
    ]
  });
});
var MemoizedEmailInput = (0, import_react10.memo)(EmailInput);
var EnumerationInput = (0, import_react10.forwardRef)(({ name, required, label, hint, labelAction, options = [], ...props }, ref) => {
  const { formatMessage } = useIntl();
  const field = useField(name);
  const fieldRef = useFocusInputField(name);
  const composedRefs = useComposedRefs(ref, fieldRef);
  return (0, import_jsx_runtime.jsxs)(Field.Root, {
    error: field.error,
    name,
    hint,
    required,
    children: [
      (0, import_jsx_runtime.jsx)(Field.Label, {
        action: labelAction,
        children: label
      }),
      (0, import_jsx_runtime.jsxs)(SingleSelect, {
        ref: composedRefs,
        onChange: (value) => {
          field.onChange(name, value);
        },
        value: field.value,
        ...props,
        children: [
          (0, import_jsx_runtime.jsx)(SingleSelectOption, {
            value: "",
            disabled: required,
            hidden: required,
            children: formatMessage({
              id: "components.InputSelect.option.placeholder",
              defaultMessage: "Choose here"
            })
          }),
          options.map(({ value, label: label2, disabled, hidden }) => {
            return (0, import_jsx_runtime.jsx)(SingleSelectOption, {
              value,
              disabled,
              hidden,
              children: label2 ?? value
            }, value);
          })
        ]
      }),
      (0, import_jsx_runtime.jsx)(Field.Hint, {}),
      (0, import_jsx_runtime.jsx)(Field.Error, {})
    ]
  });
});
var MemoizedEnumerationInput = (0, import_react10.memo)(EnumerationInput);
var JsonInput = React10.forwardRef(({ name, required, label, hint, labelAction, ...props }, ref) => {
  const field = useField(name);
  const fieldRef = useFocusInputField(name);
  const composedRefs = useComposedRefs(ref, fieldRef);
  return (0, import_jsx_runtime.jsxs)(Field.Root, {
    error: field.error,
    name,
    hint,
    required,
    children: [
      (0, import_jsx_runtime.jsx)(Field.Label, {
        action: labelAction,
        children: label
      }),
      (0, import_jsx_runtime.jsx)(JSONInput, {
        ref: composedRefs,
        value: typeof field.value == "object" ? JSON.stringify(field.value, null, 2) : field.value,
        onChange: (json) => {
          const value = required && !json.length ? null : json;
          field.onChange(name, value);
        },
        minHeight: `25.2rem`,
        maxHeight: `50.4rem`,
        ...props
      }),
      (0, import_jsx_runtime.jsx)(Field.Hint, {}),
      (0, import_jsx_runtime.jsx)(Field.Error, {})
    ]
  });
});
var MemoizedJsonInput = React10.memo(JsonInput);
var NumberInputImpl = (0, import_react10.forwardRef)(({ name, required, label, hint, labelAction, type, ...props }, ref) => {
  const field = useField(name);
  const fieldRef = useFocusInputField(name);
  const composedRefs = useComposedRefs(ref, fieldRef);
  return (0, import_jsx_runtime.jsxs)(Field.Root, {
    error: field.error,
    name,
    hint,
    required,
    children: [
      (0, import_jsx_runtime.jsx)(Field.Label, {
        action: labelAction,
        children: label
      }),
      (0, import_jsx_runtime.jsx)(NumberInput, {
        ref: composedRefs,
        onValueChange: (value) => {
          field.onChange(name, value ?? null);
        },
        step: type === "float" || type == "decimal" ? 0.01 : 1,
        value: field.value ?? void 0,
        ...props
      }),
      (0, import_jsx_runtime.jsx)(Field.Hint, {}),
      (0, import_jsx_runtime.jsx)(Field.Error, {})
    ]
  });
});
var MemoizedNumberInput = (0, import_react10.memo)(NumberInputImpl);
var PasswordInput = (0, import_react10.forwardRef)(({ name, required, label, hint, labelAction, ...props }, ref) => {
  const [showPassword, setShowPassword] = (0, import_react10.useState)(false);
  const { formatMessage } = useIntl();
  const field = useField(name);
  const fieldRef = useFocusInputField(name);
  const composedRefs = useComposedRefs(ref, fieldRef);
  return (0, import_jsx_runtime.jsxs)(Field.Root, {
    error: field.error,
    name,
    hint,
    required,
    children: [
      (0, import_jsx_runtime.jsx)(Field.Label, {
        action: labelAction,
        children: label
      }),
      (0, import_jsx_runtime.jsx)(TextInput, {
        ref: composedRefs,
        autoComplete: "password",
        endAction: (0, import_jsx_runtime.jsx)(Field.Action, {
          label: formatMessage({
            id: "Auth.form.password.show-password",
            defaultMessage: "Show password"
          }),
          onClick: () => {
            setShowPassword((prev) => !prev);
          },
          children: showPassword ? (0, import_jsx_runtime.jsx)(ForwardRef$3x, {
            fill: "neutral500"
          }) : (0, import_jsx_runtime.jsx)(ForwardRef$3v, {
            fill: "neutral500"
          })
        }),
        onChange: field.onChange,
        value: field.value,
        ...props,
        type: showPassword ? "text" : "password"
      }),
      (0, import_jsx_runtime.jsx)(Field.Hint, {}),
      (0, import_jsx_runtime.jsx)(Field.Error, {})
    ]
  });
});
var MemoizedPasswordInput = (0, import_react10.memo)(PasswordInput);
var StringInput = (0, import_react10.forwardRef)(({ name, required, label, hint, labelAction, ...props }, ref) => {
  const field = useField(name);
  const fieldRef = useFocusInputField(name);
  const composedRefs = useComposedRefs(ref, fieldRef);
  return (0, import_jsx_runtime.jsxs)(Field.Root, {
    error: field.error,
    name,
    hint,
    required,
    children: [
      (0, import_jsx_runtime.jsx)(Field.Label, {
        action: labelAction,
        children: label
      }),
      (0, import_jsx_runtime.jsx)(TextInput, {
        ref: composedRefs,
        onChange: field.onChange,
        value: field.value ?? "",
        ...props
      }),
      (0, import_jsx_runtime.jsx)(Field.Hint, {}),
      (0, import_jsx_runtime.jsx)(Field.Error, {})
    ]
  });
});
var MemoizedStringInput = (0, import_react10.memo)(StringInput);
var TextareaInput = (0, import_react10.forwardRef)(({ name, required, label, hint, labelAction, ...props }, ref) => {
  const field = useField(name);
  const fieldRef = useFocusInputField(name);
  const composedRefs = useComposedRefs(ref, fieldRef);
  return (0, import_jsx_runtime.jsxs)(Field.Root, {
    error: field.error,
    name,
    hint,
    required,
    children: [
      (0, import_jsx_runtime.jsx)(Field.Label, {
        action: labelAction,
        children: label
      }),
      (0, import_jsx_runtime.jsx)(Textarea, {
        ref: composedRefs,
        onChange: field.onChange,
        value: field.value ?? "",
        ...props
      }),
      (0, import_jsx_runtime.jsx)(Field.Hint, {}),
      (0, import_jsx_runtime.jsx)(Field.Error, {})
    ]
  });
});
var MemoizedTextareaInput = (0, import_react10.memo)(TextareaInput);
var TimeInput = (0, import_react10.forwardRef)(({ name, required, label, hint, labelAction, ...props }, ref) => {
  const { formatMessage } = useIntl();
  const field = useField(name);
  const fieldRef = useFocusInputField(name);
  const composedRefs = useComposedRefs(ref, fieldRef);
  return (0, import_jsx_runtime.jsxs)(Field.Root, {
    error: field.error,
    name,
    hint,
    required,
    children: [
      (0, import_jsx_runtime.jsx)(Field.Label, {
        action: labelAction,
        children: label
      }),
      (0, import_jsx_runtime.jsx)(TimePicker$1, {
        ref: composedRefs,
        clearLabel: formatMessage({
          id: "clearLabel",
          defaultMessage: "Clear"
        }),
        onChange: (time) => {
          field.onChange(name, `${time}:00.000`);
        },
        onClear: () => field.onChange(name, void 0),
        value: field.value ?? "",
        ...props
      }),
      (0, import_jsx_runtime.jsx)(Field.Hint, {}),
      (0, import_jsx_runtime.jsx)(Field.Error, {})
    ]
  });
});
var MemoizedTimeInput = (0, import_react10.memo)(TimeInput);
var InputRenderer = (0, import_react10.memo)((0, import_react10.forwardRef)((props, forwardRef4) => {
  switch (props.type) {
    case "biginteger":
    case "timestamp":
    case "string":
    case "uid":
      return (0, import_jsx_runtime.jsx)(MemoizedStringInput, {
        ref: forwardRef4,
        ...props
      });
    case "boolean":
      return (0, import_jsx_runtime.jsx)(MemoizedBooleanInput, {
        ref: forwardRef4,
        ...props
      });
    case "checkbox":
      return (0, import_jsx_runtime.jsx)(MemoizedCheckboxInput, {
        ref: forwardRef4,
        ...props
      });
    case "datetime":
      return (0, import_jsx_runtime.jsx)(MemoizedDateTimeInput, {
        ref: forwardRef4,
        ...props
      });
    case "date":
      return (0, import_jsx_runtime.jsx)(MemoizedDateInput, {
        ref: forwardRef4,
        ...props
      });
    case "decimal":
    case "float":
    case "integer":
      return (0, import_jsx_runtime.jsx)(MemoizedNumberInput, {
        ref: forwardRef4,
        ...props
      });
    case "json":
      return (0, import_jsx_runtime.jsx)(MemoizedJsonInput, {
        ref: forwardRef4,
        ...props
      });
    case "email":
      return (0, import_jsx_runtime.jsx)(MemoizedEmailInput, {
        ref: forwardRef4,
        ...props
      });
    case "enumeration":
      return (0, import_jsx_runtime.jsx)(MemoizedEnumerationInput, {
        ref: forwardRef4,
        ...props
      });
    case "password":
      return (0, import_jsx_runtime.jsx)(MemoizedPasswordInput, {
        ref: forwardRef4,
        ...props
      });
    case "text":
      return (0, import_jsx_runtime.jsx)(MemoizedTextareaInput, {
        ref: forwardRef4,
        ...props
      });
    case "time":
      return (0, import_jsx_runtime.jsx)(MemoizedTimeInput, {
        ref: forwardRef4,
        ...props
      });
    default:
      return (0, import_jsx_runtime.jsx)(NotSupportedField, {
        ref: forwardRef4,
        ...props
      });
  }
}));
var NotSupportedField = (0, import_react10.forwardRef)(({ label, hint, name, required, type, labelAction }, ref) => {
  const { error } = useField(name);
  const fieldRef = useFocusInputField(name);
  const composedRefs = useComposedRefs(ref, fieldRef);
  return (0, import_jsx_runtime.jsxs)(Field.Root, {
    error,
    name,
    hint,
    required,
    children: [
      (0, import_jsx_runtime.jsx)(Field.Label, {
        action: labelAction,
        children: label
      }),
      (0, import_jsx_runtime.jsx)(TextInput, {
        ref: composedRefs,
        disabled: true,
        placeholder: `Unsupported field type: ${type}`,
        required,
        type: "text",
        value: ""
      }),
      (0, import_jsx_runtime.jsx)(Field.Hint, {}),
      (0, import_jsx_runtime.jsx)(Field.Error, {})
    ]
  });
});
var MemoizedInputRenderer = (0, import_react10.memo)(InputRenderer);
var Img = dt.img`
  height: 7.2rem;
`;
var Logo = () => {
  var _a;
  const { logos: { auth } } = useConfiguration("UnauthenticatedLogo");
  return (0, import_jsx_runtime.jsx)(Img, {
    src: ((_a = auth == null ? void 0 : auth.custom) == null ? void 0 : _a.url) || auth.default,
    "aria-hidden": true,
    alt: ""
  });
};
var Wrapper = dt(Box)`
  margin: 0 auto;
  width: 552px;
`;
var Column = dt(Flex)`
  flex-direction: column;
`;
var LocaleToggle = () => {
  const localeNames = useTypedSelector((state) => state.admin_app.language.localeNames);
  const dispatch = useTypedDispatch();
  const { formatMessage, locale } = useIntl();
  return (0, import_jsx_runtime.jsx)(SingleSelect, {
    "aria-label": formatMessage({
      id: "global.localeToggle.label",
      defaultMessage: "Select interface language"
    }),
    value: locale,
    onChange: (language) => {
      dispatch(setLocale(language));
    },
    children: Object.entries(localeNames).map(([language, name]) => (0, import_jsx_runtime.jsx)(SingleSelectOption, {
      value: language,
      children: name
    }, language))
  });
};
var LayoutContent = ({ children }) => (0, import_jsx_runtime.jsx)(Wrapper, {
  shadow: "tableShadow",
  hasRadius: true,
  paddingTop: 9,
  paddingBottom: 9,
  paddingLeft: 10,
  paddingRight: 10,
  background: "neutral0",
  children
});
var UnauthenticatedLayout = ({ children }) => {
  return (0, import_jsx_runtime.jsxs)("div", {
    children: [
      (0, import_jsx_runtime.jsx)(Flex, {
        tag: "header",
        justifyContent: "flex-end",
        children: (0, import_jsx_runtime.jsx)(Box, {
          paddingTop: 6,
          paddingRight: 8,
          children: (0, import_jsx_runtime.jsx)(LocaleToggle, {})
        })
      }),
      (0, import_jsx_runtime.jsx)(Box, {
        paddingTop: 2,
        paddingBottom: 11,
        children
      })
    ]
  });
};
var errorsTrads = {
  email: {
    id: "components.Input.error.validation.email",
    defaultMessage: "This is not a valid email."
  },
  json: {
    id: "components.Input.error.validation.json",
    defaultMessage: "This doesn't match the JSON format"
  },
  lowercase: {
    id: "components.Input.error.validation.lowercase",
    defaultMessage: "The value must be a lowercase string"
  },
  max: {
    id: "components.Input.error.validation.max",
    defaultMessage: "The value is too high (max: {max})."
  },
  maxLength: {
    id: "components.Input.error.validation.maxLength",
    defaultMessage: "The value is too long (max: {max})."
  },
  min: {
    id: "components.Input.error.validation.min",
    defaultMessage: "The value is too low (min: {min})."
  },
  minLength: {
    id: "components.Input.error.validation.minLength",
    defaultMessage: "The value is too short (min: {min})."
  },
  regex: {
    id: "components.Input.error.validation.regex",
    defaultMessage: "The value does not match the regex."
  },
  required: {
    id: "components.Input.error.validation.required",
    defaultMessage: "This value is required."
  },
  string: {
    id: "components.Input.error.validation.string",
    defaultMessage: "This is not a valid string."
  },
  unique: {
    id: "components.Input.error.validation.unique",
    defaultMessage: "This value is already used."
  },
  integer: {
    id: "component.Input.error.validation.integer",
    defaultMessage: "The value must be an integer"
  }
};
var LOGIN_SCHEMA = create5().shape({
  email: create3().nullable().email({
    id: errorsTrads.email.id,
    defaultMessage: "Not a valid email"
  }).required(errorsTrads.required),
  password: create3().required(errorsTrads.required).nullable(),
  rememberMe: create2().nullable()
});
var Login = ({ children }) => {
  const [apiError, setApiError] = React10.useState();
  const { formatMessage } = useIntl();
  const { search: searchString } = useLocation();
  const query = React10.useMemo(() => new URLSearchParams(searchString), [
    searchString
  ]);
  const navigate = useNavigate();
  const { login: login2 } = useAuth("Login", (auth) => auth);
  const handleLogin = async (body) => {
    setApiError(void 0);
    const res = await login2(body);
    if ("error" in res) {
      const message = res.error.message ?? "Something went wrong";
      if ((0, import_camelCase.default)(message).toLowerCase() === "usernotactive") {
        navigate("/auth/oops");
        return;
      }
      setApiError(message);
    } else {
      const redirectTo = query.get("redirectTo");
      const redirectUrl = redirectTo ? decodeURIComponent(redirectTo) : "/";
      navigate(redirectUrl);
    }
  };
  return (0, import_jsx_runtime.jsx)(UnauthenticatedLayout, {
    children: (0, import_jsx_runtime.jsxs)(Main, {
      children: [
        (0, import_jsx_runtime.jsxs)(LayoutContent, {
          children: [
            (0, import_jsx_runtime.jsxs)(Column, {
              children: [
                (0, import_jsx_runtime.jsx)(Logo, {}),
                (0, import_jsx_runtime.jsx)(Box, {
                  paddingTop: 6,
                  paddingBottom: 1,
                  children: (0, import_jsx_runtime.jsx)(Typography, {
                    variant: "alpha",
                    tag: "h1",
                    children: formatMessage({
                      id: "Auth.form.welcome.title",
                      defaultMessage: "Welcome!"
                    })
                  })
                }),
                (0, import_jsx_runtime.jsx)(Box, {
                  paddingBottom: 7,
                  children: (0, import_jsx_runtime.jsx)(Typography, {
                    variant: "epsilon",
                    textColor: "neutral600",
                    children: formatMessage({
                      id: "Auth.form.welcome.subtitle",
                      defaultMessage: "Log in to your Strapi account"
                    })
                  })
                }),
                apiError ? (0, import_jsx_runtime.jsx)(Typography, {
                  id: "global-form-error",
                  role: "alert",
                  tabIndex: -1,
                  textColor: "danger600",
                  children: apiError
                }) : null
              ]
            }),
            (0, import_jsx_runtime.jsx)(Form2, {
              method: "PUT",
              initialValues: {
                email: "",
                password: "",
                rememberMe: false
              },
              onSubmit: (values) => {
                handleLogin(values);
              },
              validationSchema: LOGIN_SCHEMA,
              children: (0, import_jsx_runtime.jsxs)(Flex, {
                direction: "column",
                alignItems: "stretch",
                gap: 6,
                children: [
                  [
                    {
                      label: formatMessage({
                        id: "Auth.form.email.label",
                        defaultMessage: "Email"
                      }),
                      name: "email",
                      placeholder: formatMessage({
                        id: "Auth.form.email.placeholder",
                        defaultMessage: "kai@doe.com"
                      }),
                      required: true,
                      type: "string"
                    },
                    {
                      label: formatMessage({
                        id: "global.password",
                        defaultMessage: "Password"
                      }),
                      name: "password",
                      required: true,
                      type: "password"
                    },
                    {
                      label: formatMessage({
                        id: "Auth.form.rememberMe.label",
                        defaultMessage: "Remember me"
                      }),
                      name: "rememberMe",
                      type: "checkbox"
                    }
                  ].map((field) => (0, import_jsx_runtime.jsx)(MemoizedInputRenderer, {
                    ...field
                  }, field.name)),
                  (0, import_jsx_runtime.jsx)(Button, {
                    fullWidth: true,
                    type: "submit",
                    children: formatMessage({
                      id: "Auth.form.button.login",
                      defaultMessage: "Login"
                    })
                  })
                ]
              })
            }),
            children
          ]
        }),
        (0, import_jsx_runtime.jsx)(Flex, {
          justifyContent: "center",
          children: (0, import_jsx_runtime.jsx)(Box, {
            paddingTop: 4,
            children: (0, import_jsx_runtime.jsx)(Link2, {
              isExternal: false,
              tag: NavLink,
              to: "/auth/forgot-password",
              children: formatMessage({
                id: "Auth.link.forgot-password",
                defaultMessage: "Forgot your password?"
              })
            })
          })
        })
      ]
    })
  });
};
var ForgotPassword = () => {
  const navigate = useNavigate();
  const { formatMessage } = useIntl();
  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();
  const [forgotPassword, { error }] = useForgotPasswordMutation();
  return (0, import_jsx_runtime.jsx)(UnauthenticatedLayout, {
    children: (0, import_jsx_runtime.jsxs)(Main, {
      children: [
        (0, import_jsx_runtime.jsxs)(LayoutContent, {
          children: [
            (0, import_jsx_runtime.jsxs)(Column, {
              children: [
                (0, import_jsx_runtime.jsx)(Logo, {}),
                (0, import_jsx_runtime.jsx)(Box, {
                  paddingTop: 6,
                  paddingBottom: 7,
                  children: (0, import_jsx_runtime.jsx)(Typography, {
                    tag: "h1",
                    variant: "alpha",
                    children: formatMessage({
                      id: "Auth.form.button.password-recovery",
                      defaultMessage: "Password Recovery"
                    })
                  })
                }),
                error ? (0, import_jsx_runtime.jsx)(Typography, {
                  id: "global-form-error",
                  role: "alert",
                  tabIndex: -1,
                  textColor: "danger600",
                  children: isBaseQueryError(error) ? formatAPIError(error) : formatMessage({
                    id: "notification.error",
                    defaultMessage: "An error occurred"
                  })
                }) : null
              ]
            }),
            (0, import_jsx_runtime.jsx)(Form2, {
              method: "POST",
              initialValues: {
                email: ""
              },
              onSubmit: async (body) => {
                const res = await forgotPassword(body);
                if (!("error" in res)) {
                  navigate("/auth/forgot-password-success");
                }
              },
              validationSchema: create5().shape({
                email: create3().email(errorsTrads.email).required({
                  id: errorsTrads.required.id,
                  defaultMessage: "This field is required."
                }).nullable()
              }),
              children: (0, import_jsx_runtime.jsxs)(Flex, {
                direction: "column",
                alignItems: "stretch",
                gap: 6,
                children: [
                  [
                    {
                      label: formatMessage({
                        id: "Auth.form.email.label",
                        defaultMessage: "Email"
                      }),
                      name: "email",
                      placeholder: formatMessage({
                        id: "Auth.form.email.placeholder",
                        defaultMessage: "kai@doe.com"
                      }),
                      required: true,
                      type: "string"
                    }
                  ].map((field) => (0, import_jsx_runtime.jsx)(MemoizedInputRenderer, {
                    ...field
                  }, field.name)),
                  (0, import_jsx_runtime.jsx)(Button, {
                    type: "submit",
                    fullWidth: true,
                    children: formatMessage({
                      id: "Auth.form.button.forgot-password",
                      defaultMessage: "Send Email"
                    })
                  })
                ]
              })
            })
          ]
        }),
        (0, import_jsx_runtime.jsx)(Flex, {
          justifyContent: "center",
          children: (0, import_jsx_runtime.jsx)(Box, {
            paddingTop: 4,
            children: (0, import_jsx_runtime.jsx)(Link2, {
              tag: NavLink,
              to: "/auth/login",
              children: formatMessage({
                id: "Auth.link.ready",
                defaultMessage: "Ready to sign in?"
              })
            })
          })
        })
      ]
    })
  });
};
var ForgotPasswordSuccess = () => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime.jsx)(UnauthenticatedLayout, {
    children: (0, import_jsx_runtime.jsxs)(Main, {
      children: [
        (0, import_jsx_runtime.jsx)(LayoutContent, {
          children: (0, import_jsx_runtime.jsxs)(Column, {
            children: [
              (0, import_jsx_runtime.jsx)(Logo, {}),
              (0, import_jsx_runtime.jsx)(Box, {
                paddingTop: 6,
                paddingBottom: 7,
                children: (0, import_jsx_runtime.jsx)(Typography, {
                  tag: "h1",
                  variant: "alpha",
                  children: formatMessage({
                    id: "app.containers.AuthPage.ForgotPasswordSuccess.title",
                    defaultMessage: "Email sent"
                  })
                })
              }),
              (0, import_jsx_runtime.jsx)(Typography, {
                children: formatMessage({
                  id: "app.containers.AuthPage.ForgotPasswordSuccess.text.email",
                  defaultMessage: "It can take a few minutes to receive your password recovery link."
                })
              }),
              (0, import_jsx_runtime.jsx)(Box, {
                paddingTop: 4,
                children: (0, import_jsx_runtime.jsx)(Typography, {
                  children: formatMessage({
                    id: "app.containers.AuthPage.ForgotPasswordSuccess.text.contact-admin",
                    defaultMessage: "If you do not receive this link, please contact your administrator."
                  })
                })
              })
            ]
          })
        }),
        (0, import_jsx_runtime.jsx)(Flex, {
          justifyContent: "center",
          children: (0, import_jsx_runtime.jsx)(Box, {
            paddingTop: 4,
            children: (0, import_jsx_runtime.jsx)(Link2, {
              tag: NavLink,
              to: "/auth/login",
              children: formatMessage({
                id: "Auth.link.signin",
                defaultMessage: "Sign in"
              })
            })
          })
        })
      ]
    })
  });
};
var Oops = () => {
  const { formatMessage } = useIntl();
  const { search: searchString } = useLocation();
  const query = React10.useMemo(() => new URLSearchParams(searchString), [
    searchString
  ]);
  const message = query.get("info") || formatMessage({
    id: "Auth.components.Oops.text",
    defaultMessage: "Your account has been suspended."
  });
  return (0, import_jsx_runtime.jsx)(UnauthenticatedLayout, {
    children: (0, import_jsx_runtime.jsxs)(Main, {
      children: [
        (0, import_jsx_runtime.jsx)(LayoutContent, {
          children: (0, import_jsx_runtime.jsxs)(Column, {
            children: [
              (0, import_jsx_runtime.jsx)(Logo, {}),
              (0, import_jsx_runtime.jsx)(Box, {
                paddingTop: 6,
                paddingBottom: 7,
                children: (0, import_jsx_runtime.jsx)(Typography, {
                  tag: "h1",
                  variant: "alpha",
                  children: formatMessage({
                    id: "Auth.components.Oops.title",
                    defaultMessage: "Oops..."
                  })
                })
              }),
              (0, import_jsx_runtime.jsx)(Typography, {
                children: message
              }),
              (0, import_jsx_runtime.jsx)(Box, {
                paddingTop: 4,
                children: (0, import_jsx_runtime.jsx)(Typography, {
                  children: formatMessage({
                    id: "Auth.components.Oops.text.admin",
                    defaultMessage: "If this is a mistake, please contact your administrator."
                  })
                })
              })
            ]
          })
        }),
        (0, import_jsx_runtime.jsx)(Flex, {
          justifyContent: "center",
          children: (0, import_jsx_runtime.jsx)(Box, {
            paddingTop: 4,
            children: (0, import_jsx_runtime.jsx)(Link2, {
              tag: NavLink,
              to: "/auth/login",
              children: formatMessage({
                id: "Auth.link.signin",
                defaultMessage: "Sign in"
              })
            })
          })
        })
      ]
    })
  });
};
var usePersistentState = (key, defaultValue) => {
  const [value, setValue] = (0, import_react10.useState)(() => {
    const stickyValue = window.localStorage.getItem(key);
    if (stickyValue !== null) {
      try {
        return JSON.parse(stickyValue);
      } catch {
        return stickyValue;
      }
    }
    return defaultValue;
  });
  (0, import_react10.useEffect)(() => {
    window.localStorage.setItem(key, JSON.stringify(value));
  }, [
    key,
    value
  ]);
  return [
    value,
    setValue
  ];
};
var FieldWrapper = dt(Field.Root)`
  height: 3.2rem;
  width: 3.2rem;

  > label,
  ~ input {
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }

  > label {
    color: inherit;
    cursor: pointer;
    padding: ${({ theme }) => theme.spaces[2]};
    text-align: center;
    vertical-align: middle;
  }

  &:hover,
  &:focus-within {
    background-color: ${({ theme }) => theme.colors.neutral0};
  }

  &:active,
  &.selected {
    color: ${({ theme }) => theme.colors.primary700};
    background-color: ${({ theme }) => theme.colors.neutral0};
    border-color: ${({ theme }) => theme.colors.primary700};
  }
`;
var delays = {
  postResponse: 90 * 24 * 60 * 60 * 1e3,
  postFirstDismissal: 14 * 24 * 60 * 60 * 1e3,
  postSubsequentDismissal: 90 * 24 * 60 * 60 * 1e3,
  display: 30 * 60 * 1e3
};
var ratingArray = [
  ...Array(11).keys()
];
var checkIfShouldShowSurvey = (settings) => {
  const { enabled, lastResponseDate, firstDismissalDate, lastDismissalDate } = settings;
  if (window.strapi.flags.nps === false) {
    return false;
  }
  if (enabled === false) {
    return false;
  }
  if (lastResponseDate) {
    const timeSinceLastResponse = Date.now() - new Date(lastResponseDate).getTime();
    if (timeSinceLastResponse >= delays.postResponse) {
      return true;
    }
    return false;
  }
  if (lastDismissalDate) {
    const timeSinceLastDismissal = Date.now() - new Date(lastDismissalDate).getTime();
    if (timeSinceLastDismissal >= delays.postSubsequentDismissal) {
      return true;
    }
    return false;
  }
  if (firstDismissalDate) {
    const timeSinceFirstDismissal = Date.now() - new Date(firstDismissalDate).getTime();
    if (timeSinceFirstDismissal >= delays.postFirstDismissal) {
      return true;
    }
    return false;
  }
  return true;
};
var NpsSurvey = () => {
  const { formatMessage } = useIntl();
  const { npsSurveySettings, setNpsSurveySettings } = useNpsSurveySettings();
  const [isFeedbackResponse, setIsFeedbackResponse] = React10.useState(false);
  const { toggleNotification } = useNotification();
  const currentEnvironment = useAppInfo("NpsSurvey", (state) => state.currentEnvironment);
  const strapiVersion = useAppInfo("NpsSurvey", (state) => state.strapiVersion);
  const [surveyIsShown, setSurveyIsShown] = React10.useState(checkIfShouldShowSurvey(npsSurveySettings));
  const [displaySurvey, setDisplaySurvey] = React10.useState(false);
  React10.useEffect(() => {
    const displayTime = setTimeout(() => {
      setDisplaySurvey(true);
    }, delays.display);
    return () => {
      clearTimeout(displayTime);
    };
  }, []);
  const { user } = useAuth("NpsSurvey", (auth) => auth);
  if (!displaySurvey) {
    return null;
  }
  if (!surveyIsShown) {
    return null;
  }
  const handleSubmitResponse = async ({ npsSurveyRating, npsSurveyFeedback }) => {
    try {
      const body = {
        email: typeof user === "object" && user.email ? user.email : "",
        rating: npsSurveyRating,
        comment: npsSurveyFeedback,
        environment: currentEnvironment,
        version: strapiVersion ?? void 0,
        license: window.strapi.projectType,
        isHostedOnStrapiCloud: process.env.STRAPI_HOSTING === "strapi.cloud"
      };
      const res = await fetch("https://analytics.strapi.io/submit-nps", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(body)
      });
      if (!res.ok) {
        throw new Error("Failed to submit NPS survey");
      }
      setNpsSurveySettings((settings) => ({
        ...settings,
        lastResponseDate: (/* @__PURE__ */ new Date()).toString(),
        firstDismissalDate: null,
        lastDismissalDate: null
      }));
      setIsFeedbackResponse(true);
      setTimeout(() => {
        setSurveyIsShown(false);
      }, 3e3);
    } catch (err) {
      toggleNotification({
        type: "danger",
        message: formatMessage({
          id: "notification.error",
          defaultMessage: "An error occurred"
        })
      });
    }
  };
  const handleDismiss = () => {
    setNpsSurveySettings((settings) => {
      const nextSettings = {
        ...settings,
        lastResponseDate: null
      };
      if (settings.firstDismissalDate) {
        nextSettings.lastDismissalDate = (/* @__PURE__ */ new Date()).toString();
      } else {
        nextSettings.firstDismissalDate = (/* @__PURE__ */ new Date()).toString();
      }
      return nextSettings;
    });
    setSurveyIsShown(false);
  };
  return (0, import_jsx_runtime.jsx)(Portal$1, {
    children: (0, import_jsx_runtime.jsx)(Formik, {
      initialValues: {
        npsSurveyFeedback: "",
        npsSurveyRating: null
      },
      onSubmit: handleSubmitResponse,
      validationSchema: create5({
        npsSurveyFeedback: create3(),
        npsSurveyRating: create4().required()
      }),
      children: ({ values, handleChange, setFieldValue, isSubmitting }) => (0, import_jsx_runtime.jsx)(Form, {
        name: "npsSurveyForm",
        children: (0, import_jsx_runtime.jsx)(Flex, {
          hasRadius: true,
          direction: "column",
          padding: 4,
          borderColor: "primary200",
          background: "neutral0",
          shadow: "popupShadow",
          position: "fixed",
          bottom: 0,
          left: "50%",
          transform: "translateX(-50%)",
          zIndex: "200",
          width: "50%",
          children: isFeedbackResponse ? (0, import_jsx_runtime.jsx)(Typography, {
            fontWeight: "semiBold",
            children: formatMessage({
              id: "app.components.NpsSurvey.feedback-response",
              defaultMessage: "Thank you very much for your feedback!"
            })
          }) : (0, import_jsx_runtime.jsxs)(Box, {
            tag: "fieldset",
            width: "100%",
            borderWidth: 0,
            children: [
              (0, import_jsx_runtime.jsxs)(Flex, {
                justifyContent: "space-between",
                width: "100%",
                children: [
                  (0, import_jsx_runtime.jsx)(Box, {
                    marginLeft: "auto",
                    marginRight: "auto",
                    children: (0, import_jsx_runtime.jsx)(Typography, {
                      fontWeight: "semiBold",
                      tag: "legend",
                      children: formatMessage({
                        id: "app.components.NpsSurvey.banner-title",
                        defaultMessage: "How likely are you to recommend Strapi to a friend or colleague?"
                      })
                    })
                  }),
                  (0, import_jsx_runtime.jsx)(IconButton, {
                    onClick: handleDismiss,
                    withTooltip: false,
                    label: formatMessage({
                      id: "app.components.NpsSurvey.dismiss-survey-label",
                      defaultMessage: "Dismiss survey"
                    }),
                    children: (0, import_jsx_runtime.jsx)(ForwardRef$3$, {})
                  })
                ]
              }),
              (0, import_jsx_runtime.jsxs)(Flex, {
                gap: 2,
                marginTop: 2,
                marginBottom: 2,
                justifyContent: "center",
                children: [
                  (0, import_jsx_runtime.jsx)(Typography, {
                    variant: "pi",
                    textColor: "neutral600",
                    children: formatMessage({
                      id: "app.components.NpsSurvey.no-recommendation",
                      defaultMessage: "Not at all likely"
                    })
                  }),
                  ratingArray.map((number) => {
                    return (0, import_jsx_runtime.jsx)(FieldWrapper, {
                      name: "npsSurveyRating",
                      className: values.npsSurveyRating === number ? "selected" : void 0,
                      hasRadius: true,
                      background: "primary100",
                      borderColor: "primary200",
                      color: "primary600",
                      position: "relative",
                      cursor: "pointer",
                      children: (0, import_jsx_runtime.jsxs)(Field.Label, {
                        children: [
                          (0, import_jsx_runtime.jsx)(VisuallyHidden, {
                            children: (0, import_jsx_runtime.jsx)(Field.Input, {
                              type: "radio",
                              checked: values.npsSurveyRating === number,
                              onChange: (e) => setFieldValue("npsSurveyRating", parseInt(e.target.value, 10)),
                              value: number
                            })
                          }),
                          number
                        ]
                      })
                    }, number);
                  }),
                  (0, import_jsx_runtime.jsx)(Typography, {
                    variant: "pi",
                    textColor: "neutral600",
                    children: formatMessage({
                      id: "app.components.NpsSurvey.happy-to-recommend",
                      defaultMessage: "Extremely likely"
                    })
                  })
                ]
              }),
              values.npsSurveyRating !== null && (0, import_jsx_runtime.jsxs)(Flex, {
                direction: "column",
                children: [
                  (0, import_jsx_runtime.jsx)(Box, {
                    marginTop: 2,
                    children: (0, import_jsx_runtime.jsx)(Field.Label, {
                      fontWeight: "semiBold",
                      fontSize: 2,
                      children: formatMessage({
                        id: "app.components.NpsSurvey.feedback-question",
                        defaultMessage: "Do you have any suggestion for improvements?"
                      })
                    })
                  }),
                  (0, import_jsx_runtime.jsx)(Box, {
                    width: "62%",
                    marginTop: 3,
                    marginBottom: 4,
                    children: (0, import_jsx_runtime.jsx)(Textarea, {
                      id: "npsSurveyFeedback",
                      width: "100%",
                      onChange: handleChange,
                      value: values.npsSurveyFeedback
                    })
                  }),
                  (0, import_jsx_runtime.jsx)(Button, {
                    marginBottom: 2,
                    type: "submit",
                    loading: isSubmitting,
                    children: formatMessage({
                      id: "app.components.NpsSurvey.submit-feedback",
                      defaultMessage: "Submit Feedback"
                    })
                  })
                ]
              })
            ]
          })
        })
      })
    })
  });
};
function useNpsSurveySettings() {
  const [npsSurveySettings, setNpsSurveySettings] = usePersistentState("STRAPI_NPS_SURVEY_SETTINGS", {
    enabled: true,
    lastResponseDate: null,
    firstDismissalDate: null,
    lastDismissalDate: null
  });
  return {
    npsSurveySettings,
    setNpsSurveySettings
  };
}
var REGISTER_USER_SCHEMA = create5().shape({
  firstname: create3().trim().required(errorsTrads.required).nullable(),
  lastname: create3().nullable(),
  password: create3().min(8, {
    id: errorsTrads.minLength.id,
    defaultMessage: "Password must be at least 8 characters",
    values: {
      min: 8
    }
  }).matches(/[a-z]/, {
    message: {
      id: "components.Input.error.contain.lowercase",
      defaultMessage: "Password must contain at least 1 lowercase letter"
    }
  }).matches(/[A-Z]/, {
    message: {
      id: "components.Input.error.contain.uppercase",
      defaultMessage: "Password must contain at least 1 uppercase letter"
    }
  }).matches(/\d/, {
    message: {
      id: "components.Input.error.contain.number",
      defaultMessage: "Password must contain at least 1 number"
    }
  }).required({
    id: errorsTrads.required.id,
    defaultMessage: "Password is required"
  }).nullable(),
  confirmPassword: create3().required({
    id: errorsTrads.required.id,
    defaultMessage: "Confirm password is required"
  }).oneOf([
    create("password"),
    null
  ], {
    id: "components.Input.error.password.noMatch",
    defaultMessage: "Passwords must match"
  }).nullable(),
  registrationToken: create3().required({
    id: errorsTrads.required.id,
    defaultMessage: "Registration token is required"
  })
});
var REGISTER_ADMIN_SCHEMA = create5().shape({
  firstname: create3().trim().required({
    id: errorsTrads.required.id,
    defaultMessage: "Firstname is required"
  }).nullable(),
  lastname: create3().nullable(),
  password: create3().min(8, {
    id: errorsTrads.minLength.id,
    defaultMessage: "Password must be at least 8 characters",
    values: {
      min: 8
    }
  }).matches(/[a-z]/, {
    message: {
      id: "components.Input.error.contain.lowercase",
      defaultMessage: "Password must contain at least 1 lowercase letter"
    }
  }).matches(/[A-Z]/, {
    message: {
      id: "components.Input.error.contain.uppercase",
      defaultMessage: "Password must contain at least 1 uppercase letter"
    }
  }).matches(/\d/, {
    message: {
      id: "components.Input.error.contain.number",
      defaultMessage: "Password must contain at least 1 number"
    }
  }).required({
    id: errorsTrads.required.id,
    defaultMessage: "Password is required"
  }).nullable(),
  confirmPassword: create3().required({
    id: errorsTrads.required,
    defaultMessage: "Confirm password is required"
  }).nullable().oneOf([
    create("password"),
    null
  ], {
    id: "components.Input.error.password.noMatch",
    defaultMessage: "Passwords must match"
  }),
  email: create3().email({
    id: errorsTrads.email.id,
    defaultMessage: "Not a valid email"
  }).strict().lowercase({
    id: errorsTrads.lowercase.id,
    defaultMessage: "Email must be lowercase"
  }).required({
    id: errorsTrads.required.id,
    defaultMessage: "Email is required"
  }).nullable()
});
var Register = ({ hasAdmin }) => {
  const { toggleNotification } = useNotification();
  const navigate = useNavigate();
  const [submitCount, setSubmitCount] = React10.useState(0);
  const [apiError, setApiError] = React10.useState();
  const { trackUsage } = useTracking();
  const { formatMessage } = useIntl();
  const setSkipped = useGuidedTour("Register", (state) => state.setSkipped);
  const { search: searchString } = useLocation();
  const query = React10.useMemo(() => new URLSearchParams(searchString), [
    searchString
  ]);
  const match = useMatch("/auth/:authType");
  const { _unstableFormatAPIError: formatAPIError, _unstableFormatValidationErrors: formatValidationErrors } = useAPIErrorHandler();
  const { setNpsSurveySettings } = useNpsSurveySettings();
  const registrationToken = query.get("registrationToken");
  const { data: userInfo, error } = useGetRegistrationInfoQuery(registrationToken, {
    skip: !registrationToken
  });
  React10.useEffect(() => {
    if (error) {
      const message = isBaseQueryError(error) ? formatAPIError(error) : error.message ?? "";
      toggleNotification({
        type: "danger",
        message
      });
      navigate(`/auth/oops?info=${encodeURIComponent(message)}`);
    }
  }, [
    error,
    formatAPIError,
    navigate,
    toggleNotification
  ]);
  const [registerAdmin] = useRegisterAdminMutation();
  const [registerUser] = useRegisterUserMutation();
  const dispatch = useTypedDispatch();
  const handleRegisterAdmin = async ({ news, ...body }, setFormErrors) => {
    const res = await registerAdmin(body);
    if ("data" in res) {
      dispatch(login({
        token: res.data.token
      }));
      const { roles } = res.data.user;
      if (roles) {
        const isUserSuperAdmin = roles.find(({ code }) => code === "strapi-super-admin");
        if (isUserSuperAdmin) {
          localStorage.setItem("GUIDED_TOUR_SKIPPED", JSON.stringify(false));
          setSkipped(false);
          trackUsage("didLaunchGuidedtour");
        }
      }
      if (news) {
        setNpsSurveySettings((s) => ({
          ...s,
          enabled: true
        }));
        navigate({
          pathname: "/usecase",
          search: `?hasAdmin=${true}`
        });
      } else {
        navigate("/");
      }
    } else {
      if (isBaseQueryError(res.error)) {
        trackUsage("didNotCreateFirstAdmin");
        if (res.error.name === "ValidationError") {
          setFormErrors(formatValidationErrors(res.error));
          return;
        }
        setApiError(formatAPIError(res.error));
      }
    }
  };
  const handleRegisterUser = async ({ news, ...body }, setFormErrors) => {
    const res = await registerUser(body);
    if ("data" in res) {
      dispatch(login({
        token: res.data.token
      }));
      if (news) {
        setNpsSurveySettings((s) => ({
          ...s,
          enabled: true
        }));
        navigate({
          pathname: "/usecase",
          search: `?hasAdmin=${hasAdmin}`
        });
      } else {
        navigate("/");
      }
    } else {
      if (isBaseQueryError(res.error)) {
        trackUsage("didNotCreateFirstAdmin");
        if (res.error.name === "ValidationError") {
          setFormErrors(formatValidationErrors(res.error));
          return;
        }
        setApiError(formatAPIError(res.error));
      }
    }
  };
  if (!match || match.params.authType !== "register" && match.params.authType !== "register-admin") {
    return (0, import_jsx_runtime.jsx)(Navigate, {
      to: "/"
    });
  }
  const isAdminRegistration = match.params.authType === "register-admin";
  const schema = isAdminRegistration ? REGISTER_ADMIN_SCHEMA : REGISTER_USER_SCHEMA;
  return (0, import_jsx_runtime.jsx)(UnauthenticatedLayout, {
    children: (0, import_jsx_runtime.jsxs)(LayoutContent, {
      children: [
        (0, import_jsx_runtime.jsxs)(Flex, {
          direction: "column",
          alignItems: "center",
          gap: 3,
          children: [
            (0, import_jsx_runtime.jsx)(Logo, {}),
            (0, import_jsx_runtime.jsx)(Typography, {
              tag: "h1",
              variant: "alpha",
              textAlign: "center",
              children: formatMessage({
                id: "Auth.form.welcome.title",
                defaultMessage: "Welcome to Strapi!"
              })
            }),
            (0, import_jsx_runtime.jsx)(Typography, {
              variant: "epsilon",
              textColor: "neutral600",
              textAlign: "center",
              children: formatMessage({
                id: "Auth.form.register.subtitle",
                defaultMessage: "Credentials are only used to authenticate in Strapi. All saved data will be stored in your database."
              })
            }),
            apiError ? (0, import_jsx_runtime.jsx)(Typography, {
              id: "global-form-error",
              role: "alert",
              tabIndex: -1,
              textColor: "danger600",
              children: apiError
            }) : null
          ]
        }),
        (0, import_jsx_runtime.jsx)(Form2, {
          method: "POST",
          initialValues: {
            firstname: (userInfo == null ? void 0 : userInfo.firstname) || "",
            lastname: (userInfo == null ? void 0 : userInfo.lastname) || "",
            email: (userInfo == null ? void 0 : userInfo.email) || "",
            password: "",
            confirmPassword: "",
            registrationToken: registrationToken || void 0,
            news: false
          },
          onSubmit: async (data, helpers) => {
            const normalizedData = normalizeData(data);
            try {
              await schema.validate(normalizedData, {
                abortEarly: false
              });
              if (submitCount > 0 && isAdminRegistration) {
                trackUsage("didSubmitWithErrorsFirstAdmin", {
                  count: submitCount.toString()
                });
              }
              if (normalizedData.registrationToken) {
                handleRegisterUser({
                  userInfo: (0, import_omit.default)(normalizedData, [
                    "registrationToken",
                    "confirmPassword",
                    "email",
                    "news"
                  ]),
                  registrationToken: normalizedData.registrationToken,
                  news: normalizedData.news
                }, helpers.setErrors);
              } else {
                await handleRegisterAdmin((0, import_omit.default)(normalizedData, [
                  "registrationToken",
                  "confirmPassword"
                ]), helpers.setErrors);
              }
            } catch (err) {
              if (err instanceof ValidationError) {
                helpers.setErrors(err.inner.reduce((acc, { message, path }) => {
                  if (path && typeof message === "object") {
                    acc[path] = formatMessage(message);
                  }
                  return acc;
                }, {}));
              }
              setSubmitCount(submitCount + 1);
            }
          },
          children: (0, import_jsx_runtime.jsxs)(Flex, {
            direction: "column",
            alignItems: "stretch",
            gap: 6,
            marginTop: 7,
            children: [
              (0, import_jsx_runtime.jsx)(Grid.Root, {
                gap: 4,
                children: [
                  {
                    label: formatMessage({
                      id: "Auth.form.firstname.label",
                      defaultMessage: "Firstname"
                    }),
                    name: "firstname",
                    required: true,
                    size: 6,
                    type: "string"
                  },
                  {
                    label: formatMessage({
                      id: "Auth.form.lastname.label",
                      defaultMessage: "Lastname"
                    }),
                    name: "lastname",
                    size: 6,
                    type: "string"
                  },
                  {
                    disabled: !isAdminRegistration,
                    label: formatMessage({
                      id: "Auth.form.email.label",
                      defaultMessage: "Email"
                    }),
                    name: "email",
                    required: true,
                    size: 12,
                    type: "email"
                  },
                  {
                    hint: formatMessage({
                      id: "Auth.form.password.hint",
                      defaultMessage: "Must be at least 8 characters, 1 uppercase, 1 lowercase & 1 number"
                    }),
                    label: formatMessage({
                      id: "global.password",
                      defaultMessage: "Password"
                    }),
                    name: "password",
                    required: true,
                    size: 12,
                    type: "password"
                  },
                  {
                    label: formatMessage({
                      id: "Auth.form.confirmPassword.label",
                      defaultMessage: "Confirm Password"
                    }),
                    name: "confirmPassword",
                    required: true,
                    size: 12,
                    type: "password"
                  },
                  {
                    label: formatMessage({
                      id: "Auth.form.register.news.label",
                      defaultMessage: "Keep me updated about new features & upcoming improvements (by doing this you accept the {terms} and the {policy})."
                    }, {
                      terms: (0, import_jsx_runtime.jsx)(A, {
                        target: "_blank",
                        href: "https://strapi.io/terms",
                        rel: "noreferrer",
                        children: formatMessage({
                          id: "Auth.privacy-policy-agreement.terms",
                          defaultMessage: "terms"
                        })
                      }),
                      policy: (0, import_jsx_runtime.jsx)(A, {
                        target: "_blank",
                        href: "https://strapi.io/privacy",
                        rel: "noreferrer",
                        children: formatMessage({
                          id: "Auth.privacy-policy-agreement.policy",
                          defaultMessage: "policy"
                        })
                      })
                    }),
                    name: "news",
                    size: 12,
                    type: "checkbox"
                  }
                ].map(({ size, ...field }) => (0, import_jsx_runtime.jsx)(Grid.Item, {
                  col: size,
                  direction: "column",
                  alignItems: "stretch",
                  children: (0, import_jsx_runtime.jsx)(MemoizedInputRenderer, {
                    ...field
                  })
                }, field.name))
              }),
              (0, import_jsx_runtime.jsx)(Button, {
                fullWidth: true,
                size: "L",
                type: "submit",
                children: formatMessage({
                  id: "Auth.form.button.register",
                  defaultMessage: "Let's start"
                })
              })
            ]
          })
        }),
        (match == null ? void 0 : match.params.authType) === "register" && (0, import_jsx_runtime.jsx)(Box, {
          paddingTop: 4,
          children: (0, import_jsx_runtime.jsx)(Flex, {
            justifyContent: "center",
            children: (0, import_jsx_runtime.jsx)(Link2, {
              tag: NavLink,
              to: "/auth/login",
              children: formatMessage({
                id: "Auth.link.signin.account",
                defaultMessage: "Already have an account?"
              })
            })
          })
        })
      ]
    })
  });
};
function normalizeData(data) {
  return Object.entries(data).reduce((acc, [key, value]) => {
    if (![
      "password",
      "confirmPassword"
    ].includes(key) && typeof value === "string") {
      acc[key] = value.trim();
      if (key === "lastname") {
        acc[key] = value || void 0;
      }
    } else {
      acc[key] = value;
    }
    return acc;
  }, {});
}
var A = dt.a`
  color: ${({ theme }) => theme.colors.primary600};
`;
var RESET_PASSWORD_SCHEMA = create5().shape({
  password: create3().min(8, {
    id: errorsTrads.minLength.id,
    defaultMessage: "Password must be at least 8 characters",
    values: {
      min: 8
    }
  }).matches(/[a-z]/, {
    message: {
      id: "components.Input.error.contain.lowercase",
      defaultMessage: "Password must contain at least 1 lowercase letter"
    }
  }).matches(/[A-Z]/, {
    message: {
      id: "components.Input.error.contain.uppercase",
      defaultMessage: "Password must contain at least 1 uppercase letter"
    }
  }).matches(/\d/, {
    message: {
      id: "components.Input.error.contain.number",
      defaultMessage: "Password must contain at least 1 number"
    }
  }).required({
    id: errorsTrads.required.id,
    defaultMessage: "Password is required"
  }).nullable(),
  confirmPassword: create3().required({
    id: errorsTrads.required.id,
    defaultMessage: "Confirm password is required"
  }).oneOf([
    create("password"),
    null
  ], {
    id: "components.Input.error.password.noMatch",
    defaultMessage: "Passwords must match"
  }).nullable()
});
var ResetPassword = () => {
  const { formatMessage } = useIntl();
  const dispatch = useTypedDispatch();
  const navigate = useNavigate();
  const { search: searchString } = useLocation();
  const query = React10.useMemo(() => new URLSearchParams(searchString), [
    searchString
  ]);
  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();
  const [resetPassword, { error }] = useResetPasswordMutation();
  const handleSubmit = async (body) => {
    const res = await resetPassword(body);
    if ("data" in res) {
      dispatch(login({
        token: res.data.token
      }));
      navigate("/");
    }
  };
  if (!query.get("code")) {
    return (0, import_jsx_runtime.jsx)(Navigate, {
      to: "/auth/login"
    });
  }
  return (0, import_jsx_runtime.jsx)(UnauthenticatedLayout, {
    children: (0, import_jsx_runtime.jsxs)(Main, {
      children: [
        (0, import_jsx_runtime.jsxs)(LayoutContent, {
          children: [
            (0, import_jsx_runtime.jsxs)(Column, {
              children: [
                (0, import_jsx_runtime.jsx)(Logo, {}),
                (0, import_jsx_runtime.jsx)(Box, {
                  paddingTop: 6,
                  paddingBottom: 7,
                  children: (0, import_jsx_runtime.jsx)(Typography, {
                    tag: "h1",
                    variant: "alpha",
                    children: formatMessage({
                      id: "global.reset-password",
                      defaultMessage: "Reset password"
                    })
                  })
                }),
                error ? (0, import_jsx_runtime.jsx)(Typography, {
                  id: "global-form-error",
                  role: "alert",
                  tabIndex: -1,
                  textColor: "danger600",
                  children: isBaseQueryError(error) ? formatAPIError(error) : formatMessage({
                    id: "notification.error",
                    defaultMessage: "An error occurred"
                  })
                }) : null
              ]
            }),
            (0, import_jsx_runtime.jsx)(Form2, {
              method: "POST",
              initialValues: {
                password: "",
                confirmPassword: ""
              },
              onSubmit: (values) => {
                handleSubmit({
                  password: values.password,
                  resetPasswordToken: query.get("code")
                });
              },
              validationSchema: RESET_PASSWORD_SCHEMA,
              children: (0, import_jsx_runtime.jsxs)(Flex, {
                direction: "column",
                alignItems: "stretch",
                gap: 6,
                children: [
                  [
                    {
                      hint: formatMessage({
                        id: "Auth.form.password.hint",
                        defaultMessage: "Password must contain at least 8 characters, 1 uppercase, 1 lowercase and 1 number"
                      }),
                      label: formatMessage({
                        id: "global.password",
                        defaultMessage: "Password"
                      }),
                      name: "password",
                      required: true,
                      type: "password"
                    },
                    {
                      label: formatMessage({
                        id: "Auth.form.confirmPassword.label",
                        defaultMessage: "Confirm Password"
                      }),
                      name: "confirmPassword",
                      required: true,
                      type: "password"
                    }
                  ].map((field) => (0, import_jsx_runtime.jsx)(MemoizedInputRenderer, {
                    ...field
                  }, field.name)),
                  (0, import_jsx_runtime.jsx)(Button, {
                    fullWidth: true,
                    type: "submit",
                    children: formatMessage({
                      id: "global.change-password",
                      defaultMessage: "Change password"
                    })
                  })
                ]
              })
            })
          ]
        }),
        (0, import_jsx_runtime.jsx)(Flex, {
          justifyContent: "center",
          children: (0, import_jsx_runtime.jsx)(Box, {
            paddingTop: 4,
            children: (0, import_jsx_runtime.jsx)(Link2, {
              tag: NavLink,
              to: "/auth/login",
              children: formatMessage({
                id: "Auth.link.ready",
                defaultMessage: "Ready to sign in?"
              })
            })
          })
        })
      ]
    })
  });
};
var FORMS = {
  "forgot-password": ForgotPassword,
  "forgot-password-success": ForgotPasswordSuccess,
  // the `Component` attribute is set after all forms and CE/EE components are loaded, but since we
  // are here outside of a React component we can not use the hook directly
  login: () => null,
  oops: Oops,
  register: Register,
  "register-admin": Register,
  "reset-password": ResetPassword,
  providers: () => null
};
var AuthPage = () => {
  const { search } = useLocation();
  const match = useMatch("/auth/:authType");
  const authType = match == null ? void 0 : match.params.authType;
  const { data } = useInitQuery();
  const { hasAdmin } = data ?? {};
  const Login$1 = useEnterprise(Login, async () => (await import("./Login-5ByBaKI3-7MNCM6IU.js")).LoginEE);
  const forms = useEnterprise(FORMS, async () => (await import("./constants-DoArvzRr-E44SXHBC.js")).FORMS, {
    combine(ceForms, eeForms) {
      return {
        ...ceForms,
        ...eeForms
      };
    },
    defaultValue: FORMS
  });
  const { token } = useAuth("AuthPage", (auth) => auth);
  if (!authType || !forms) {
    return (0, import_jsx_runtime.jsx)(Navigate, {
      to: "/"
    });
  }
  const Component2 = forms[authType];
  if (!Component2) {
    return (0, import_jsx_runtime.jsx)(Navigate, {
      to: "/"
    });
  }
  if (authType !== "register-admin" && authType !== "register" && token) {
    return (0, import_jsx_runtime.jsx)(Navigate, {
      to: "/"
    });
  }
  if (hasAdmin && authType === "register-admin" && token) {
    return (0, import_jsx_runtime.jsx)(Navigate, {
      to: "/"
    });
  }
  if (!hasAdmin && authType !== "register-admin") {
    return (0, import_jsx_runtime.jsx)(Navigate, {
      to: {
        pathname: "/auth/register-admin",
        // Forward the `?redirectTo` from /auth/login
        // /abc => /auth/login?redirectTo=%2Fabc => /auth/register-admin?redirectTo=%2Fabc
        search
      }
    });
  }
  if (Login$1 && authType === "login") {
    return (0, import_jsx_runtime.jsx)(Login$1, {});
  } else if (authType === "login" && !Login$1) {
    return null;
  }
  return (0, import_jsx_runtime.jsx)(Component2, {
    hasAdmin
  });
};
var ROUTES_CE = [
  {
    lazy: async () => {
      const { ProtectedListPage } = await import("./ListPage-Czwak48Z-N6DUDFT5.js");
      return {
        Component: ProtectedListPage
      };
    },
    path: "roles"
  },
  {
    lazy: async () => {
      const { ProtectedCreatePage } = await import("./CreatePage-0PdN9Fyc-MMPDFZD5.js");
      return {
        Component: ProtectedCreatePage
      };
    },
    path: "roles/duplicate/:id"
  },
  {
    lazy: async () => {
      const { ProtectedCreatePage } = await import("./CreatePage-0PdN9Fyc-MMPDFZD5.js");
      return {
        Component: ProtectedCreatePage
      };
    },
    path: "roles/new"
  },
  {
    lazy: async () => {
      const { ProtectedEditPage } = await import("./EditPage-BazkPM17-HHBQRHZZ.js");
      return {
        Component: ProtectedEditPage
      };
    },
    path: "roles/:id"
  },
  {
    lazy: async () => {
      const { ProtectedListPage } = await import("./ListPage-BtMdu1eQ-MLJQRLAI.js");
      return {
        Component: ProtectedListPage
      };
    },
    path: "users"
  },
  {
    lazy: async () => {
      const { ProtectedEditPage } = await import("./EditPage-LRn1-C88-PPLTETEN.js");
      return {
        Component: ProtectedEditPage
      };
    },
    path: "users/:id"
  },
  {
    lazy: async () => {
      const { ProtectedCreatePage } = await import("./CreatePage-DojcQqvH-2RADJOI7.js");
      return {
        Component: ProtectedCreatePage
      };
    },
    path: "webhooks/create"
  },
  {
    lazy: async () => {
      const { ProtectedEditPage } = await import("./EditPage-BNZ90ISm-KTMZUUPV.js").then(function(n) {
        return n.b;
      });
      return {
        Component: ProtectedEditPage
      };
    },
    path: "webhooks/:id"
  },
  {
    lazy: async () => {
      const { ProtectedListPage } = await import("./ListPage-CENQarKY-OQ3J7BWL.js");
      return {
        Component: ProtectedListPage
      };
    },
    path: "webhooks"
  },
  {
    lazy: async () => {
      const { ProtectedListView } = await import("./ListView-Q2AO0JSX-CQEHELKT.js");
      return {
        Component: ProtectedListView
      };
    },
    path: "api-tokens"
  },
  {
    lazy: async () => {
      const { ProtectedCreateView } = await import("./CreateView-DB0xD4f5-AKG3N3ZJ.js");
      return {
        Component: ProtectedCreateView
      };
    },
    path: "api-tokens/create"
  },
  {
    lazy: async () => {
      const { ProtectedEditView } = await import("./EditViewPage-BE_u8pQP-6GF55BQR.js");
      return {
        Component: ProtectedEditView
      };
    },
    path: "api-tokens/:id"
  },
  {
    lazy: async () => {
      const { ProtectedCreateView } = await import("./CreateView-BuN2a7bo-ITCZ3YV6.js");
      return {
        Component: ProtectedCreateView
      };
    },
    path: "transfer-tokens/create"
  },
  {
    lazy: async () => {
      const { ProtectedListView } = await import("./ListView-CajksON_-J5D6ILVR.js");
      return {
        Component: ProtectedListView
      };
    },
    path: "transfer-tokens"
  },
  {
    lazy: async () => {
      const { ProtectedEditView } = await import("./EditView-CgMgqsza-MLCZW7HI.js");
      return {
        Component: ProtectedEditView
      };
    },
    path: "transfer-tokens/:id"
  },
  {
    lazy: async () => {
      const { ProtectedInstalledPlugins } = await import("./InstalledPlugins-B4gyKUHh-7GUOAEMA.js");
      return {
        Component: ProtectedInstalledPlugins
      };
    },
    path: "list-plugins"
  },
  {
    lazy: async () => {
      const { PurchaseAuditLogs } = await import("./PurchaseAuditLogs-McvZESGI-WG6HMOGE.js");
      return {
        Component: PurchaseAuditLogs
      };
    },
    path: "purchase-audit-logs"
  },
  {
    lazy: async () => {
      const { PurchaseSingleSignOn } = await import("./PurchaseSingleSignOn-BUB9Irlt-PJLSKYUZ.js");
      return {
        Component: PurchaseSingleSignOn
      };
    },
    path: "purchase-single-sign-on"
  },
  {
    lazy: async () => {
      const { PurchaseContentHistory } = await import("./PurchaseContentHistory-pb7RDvhZ-WNQGAOM5.js");
      return {
        Component: PurchaseContentHistory
      };
    },
    path: "purchase-content-history"
  }
];
var getImmutableRoutes = () => [
  {
    path: "usecase",
    lazy: async () => {
      const { PrivateUseCasePage } = await import("./UseCasePage-Y_h0Fbiv-K6RUG3PF.js");
      return {
        Component: PrivateUseCasePage
      };
    }
  },
  // this needs to go before auth/:authType because otherwise it won't match the route
  ...getEERoutes$1(),
  {
    path: "auth/:authType",
    element: (0, import_jsx_runtime.jsx)(AuthPage, {})
  }
];
var getInitialRoutes = () => [
  {
    index: true,
    lazy: async () => {
      const { HomePage } = await import("./HomePage-CFTx_SgI-QI6ACVOI.js");
      return {
        Component: HomePage
      };
    }
  },
  {
    path: "me",
    lazy: async () => {
      const { ProfilePage } = await import("./ProfilePage-Do6nPMsx-YL5BYVDH.js");
      return {
        Component: ProfilePage
      };
    }
  },
  {
    path: "marketplace",
    lazy: async () => {
      const { ProtectedMarketplacePage } = await import("./MarketplacePage-BrHNQ8SG-IAP5FMFA.js");
      return {
        Component: ProtectedMarketplacePage
      };
    }
  },
  {
    path: "settings/*",
    lazy: async () => {
      const { Layout } = await import("./Layout-B_xkPr1q-QIAOKB6M.js");
      return {
        Component: Layout
      };
    },
    children: [
      {
        path: "application-infos",
        lazy: async () => {
          const { ApplicationInfoPage } = await import("./ApplicationInfoPage-Ch6hKH4Y-LMDISVK4.js");
          return {
            Component: ApplicationInfoPage
          };
        }
      },
      // ...Object.values(this.settings).flatMap(({ links }) =>
      //   links.map(({ to, Component }) => ({
      //     path: `${to}/*`,
      //     element: (
      //       <React.Suspense fallback={<Page.Loading />}>
      //         <Component />
      //       </React.Suspense>
      //     ),
      //   }))
      // ),
      ...[
        ...getEERoutes(),
        ...ROUTES_CE
      ].filter((route, index, refArray) => refArray.findIndex((obj) => obj.path === route.path) === index)
    ]
  }
];
var Router = class {
  get routes() {
    return this._routes;
  }
  get menu() {
    return this._menu;
  }
  get settings() {
    return this._settings;
  }
  /**
  * @internal This method is used internally by Strapi to create the router.
  * It should not be used by plugins, doing so will likely break the application.
  */
  createRouter(strapi, { memory, ...opts } = {}) {
    const routes = [
      {
        path: "/*",
        errorElement: (0, import_jsx_runtime.jsx)(Provider_default, {
          store: strapi.store,
          children: (0, import_jsx_runtime.jsx)(LanguageProvider, {
            messages: strapi.configurations.translations,
            children: (0, import_jsx_runtime.jsx)(Theme, {
              themes: strapi.configurations.themes,
              children: (0, import_jsx_runtime.jsx)(ErrorElement, {})
            })
          })
        }),
        element: (0, import_jsx_runtime.jsx)(App, {
          strapi,
          store: strapi.store
        }),
        children: [
          ...getImmutableRoutes(),
          {
            path: "/*",
            lazy: async () => {
              const { PrivateAdminLayout } = await import("./AuthenticatedLayout-BNWCtSH2-MU5XF6RV.js");
              return {
                Component: PrivateAdminLayout
              };
            },
            children: [
              ...this.routes,
              {
                path: "*",
                element: (0, import_jsx_runtime.jsx)(NotFoundPage, {})
              }
            ]
          }
        ]
      }
    ];
    if (memory) {
      this.router = createMemoryRouter(routes, opts);
    } else {
      this.router = createBrowserRouter(routes, opts);
    }
    return this.router;
  }
  addSettingsLink(section, link) {
    var _a, _b, _c, _d;
    if (typeof section === "object" && "links" in section) {
      (0, import_invariant.default)(section.id, "section.id should be defined");
      (0, import_invariant.default)(((_a = section.intlLabel) == null ? void 0 : _a.id) && ((_b = section.intlLabel) == null ? void 0 : _b.defaultMessage), "section.intlLabel should be defined");
      (0, import_invariant.default)(this.settings[section.id] === void 0, "A similar section already exists");
      (0, import_invariant.default)(Array.isArray(section.links), "TypeError expected links to be an array");
      this.settings[section.id] = {
        ...section,
        links: []
      };
      section.links.forEach((link2) => {
        this.createSettingsLink(section.id, link2);
      });
    } else if (typeof section === "object" && link) {
      (0, import_invariant.default)(section.id, "section.id should be defined");
      (0, import_invariant.default)(((_c = section.intlLabel) == null ? void 0 : _c.id) && ((_d = section.intlLabel) == null ? void 0 : _d.defaultMessage), "section.intlLabel should be defined");
      (0, import_invariant.default)(this.settings[section.id] === void 0, "A similar section already exists");
      this.settings[section.id] = {
        ...section,
        links: []
      };
      if (Array.isArray(link)) {
        link.forEach((l) => this.createSettingsLink(section.id, l));
      } else {
        this.createSettingsLink(section.id, link);
      }
    } else if (typeof section === "string" && link) {
      if (Array.isArray(link)) {
        link.forEach((l) => this.createSettingsLink(section, l));
      } else {
        this.createSettingsLink(section, link);
      }
    } else {
      throw new Error("Invalid arguments provided to addSettingsLink, at minimum a sectionId and link are required.");
    }
  }
  /**
  * @alpha
  * @description Adds a route or an array of routes to the router.
  * Otherwise, pass a function that receives the current routes and
  * returns the new routes in a reducer like fashion.
  */
  addRoute(route) {
    if (Array.isArray(route)) {
      this._routes = [
        ...this._routes,
        ...route
      ];
    } else if (typeof route === "object" && route !== null) {
      this._routes.push(route);
    } else if (typeof route === "function") {
      this._routes = route(this._routes);
    } else {
      throw new Error(`Expected the \`route\` passed to \`addRoute\` to be an array or a function, but received ${getPrintableType(route)}`);
    }
  }
  constructor(initialRoutes) {
    this._routes = [];
    this.router = null;
    this._menu = [];
    this._settings = {
      global: {
        id: "global",
        intlLabel: {
          id: "Settings.global",
          defaultMessage: "Global Settings"
        },
        links: []
      }
    };
    this.addMenuLink = (link) => {
      var _a, _b;
      (0, import_invariant.default)(link.to, `[${link.intlLabel.defaultMessage}]: link.to should be defined`);
      (0, import_invariant.default)(typeof link.to === "string", `[${link.intlLabel.defaultMessage}]: Expected link.to to be a string instead received ${typeof link.to}`);
      (0, import_invariant.default)(((_a = link.intlLabel) == null ? void 0 : _a.id) && ((_b = link.intlLabel) == null ? void 0 : _b.defaultMessage), `[${link.intlLabel.defaultMessage}]: link.intlLabel.id & link.intlLabel.defaultMessage should be defined`);
      (0, import_invariant.default)(!link.Component || link.Component && typeof link.Component === "function", `[${link.intlLabel.defaultMessage}]: link.Component must be a function returning a Promise that returns a default component. Please use: \`Component: () => import(path)\` instead.`);
      if (!link.Component || link.Component && typeof link.Component === "function" && // @ts-expect-error – shh
      link.Component[Symbol.toStringTag] === "AsyncFunction") {
        console.warn(`
      [${link.intlLabel.defaultMessage}]: [deprecated] addMenuLink() was called with an async Component from the plugin "${link.intlLabel.defaultMessage}". This will be removed in the future. Please use: \`Component: () => import(path)\` ensuring you return a default export instead.
      `.trim());
      }
      if (link.to.startsWith("/")) {
        console.warn(`[${link.intlLabel.defaultMessage}]: the \`to\` property of your menu link is an absolute path, it should be relative to the root of the application. This has been corrected for you but will be removed in a future version of Strapi.`);
        link.to = link.to.slice(1);
      }
      const { Component: Component2, ...restLink } = link;
      if (Component2) {
        this._routes.push({
          path: `${link.to}/*`,
          lazy: async () => {
            const mod = await Component2();
            if ("default" in mod) {
              return {
                Component: mod.default
              };
            } else {
              return {
                Component: mod
              };
            }
          }
        });
      }
      this.menu.push(restLink);
    };
    this.createSettingsLink = (sectionId, link) => {
      var _a, _b;
      (0, import_invariant.default)(this._settings[sectionId], "The section does not exist");
      (0, import_invariant.default)(link.id, `[${link.intlLabel.defaultMessage}]: link.id should be defined`);
      (0, import_invariant.default)(((_a = link.intlLabel) == null ? void 0 : _a.id) && ((_b = link.intlLabel) == null ? void 0 : _b.defaultMessage), `[${link.intlLabel.defaultMessage}]: link.intlLabel.id & link.intlLabel.defaultMessage`);
      (0, import_invariant.default)(link.to, `[${link.intlLabel.defaultMessage}]: link.to should be defined`);
      (0, import_invariant.default)(!link.Component || link.Component && typeof link.Component === "function", `[${link.intlLabel.defaultMessage}]: link.Component must be a function returning a Promise. Please use: \`Component: () => import(path)\` instead.`);
      if (!link.Component || link.Component && typeof link.Component === "function" && // @ts-expect-error – shh
      link.Component[Symbol.toStringTag] === "AsyncFunction") {
        console.warn(`
      [${link.intlLabel.defaultMessage}]: [deprecated] addSettingsLink() was called with an async Component from the plugin "${link.intlLabel.defaultMessage}". This will be removed in the future. Please use: \`Component: () => import(path)\` ensuring you return a default export instead.
      `.trim());
      }
      if (link.to.startsWith("/")) {
        console.warn(`[${link.intlLabel.defaultMessage}]: the \`to\` property of your settings link is an absolute path. It should be relative to \`/settings\`. This has been corrected for you but will be removed in a future version of Strapi.`);
        link.to = link.to.slice(1);
      }
      if (link.to.split("/")[0] === "settings") {
        console.warn(`[${link.intlLabel.defaultMessage}]: the \`to\` property of your settings link has \`settings\` as the first part of it's path. It should be relative to \`settings\` and therefore, not include it. This has been corrected for you but will be removed in a future version of Strapi.`);
        link.to = link.to.split("/").slice(1).join("/");
      }
      const { Component: Component2, ...restLink } = link;
      const settingsIndex = this._routes.findIndex((route) => route.path === "settings/*");
      if (!settingsIndex) {
        console.warn("A third party plugin has removed the settings section, the settings link cannot be added.");
        return;
      } else if (!this._routes[settingsIndex].children) {
        this._routes[settingsIndex].children = [];
      }
      if (Component2) {
        this._routes[settingsIndex].children.push({
          path: `${link.to}/*`,
          lazy: async () => {
            const mod = await Component2();
            if ("default" in mod) {
              return {
                Component: mod.default
              };
            } else {
              return {
                Component: mod
              };
            }
          }
        });
      }
      this._settings[sectionId].links.push(restLink);
    };
    this._routes = initialRoutes;
  }
};
var getPrintableType = (value) => {
  const nativeType = typeof value;
  if (nativeType === "object") {
    if (value === null)
      return "null";
    if (Array.isArray(value))
      return "array";
    if (value instanceof Object && value.constructor.name !== "Object") {
      return value.constructor.name;
    }
  }
  return nativeType;
};
var staticReducers = {
  [adminApi.reducerPath]: adminApi.reducer,
  admin_app: reducer$1
};
var injectReducerStoreEnhancer = (appReducers) => (next) => (...args) => {
  const store = next(...args);
  const asyncReducers = {};
  return {
    ...store,
    asyncReducers,
    injectReducer: (key, asyncReducer) => {
      asyncReducers[key] = asyncReducer;
      store.replaceReducer(
        // @ts-expect-error we dynamically add reducers which makes the types uncomfortable.
        combineReducers({
          ...appReducers,
          ...asyncReducers
        })
      );
    }
  };
};
var configureStoreImpl = (preloadedState = {}, appMiddlewares = [], injectedReducers = {}) => {
  const coreReducers = {
    ...staticReducers,
    ...injectedReducers
  };
  const defaultMiddlewareOptions = {};
  if (false) {
    defaultMiddlewareOptions.serializableCheck = false;
    defaultMiddlewareOptions.immutableCheck = false;
  }
  const store = configureStore({
    preloadedState: {
      admin_app: preloadedState.admin_app
    },
    reducer: coreReducers,
    devTools: true,
    middleware: (getDefaultMiddleware) => [
      ...getDefaultMiddleware(defaultMiddlewareOptions),
      rtkQueryUnauthorizedMiddleware,
      adminApi.middleware,
      ...appMiddlewares.map((m) => m())
    ],
    enhancers: [
      injectReducerStoreEnhancer(coreReducers)
    ]
  });
  return store;
};
var rtkQueryUnauthorizedMiddleware = ({ dispatch }) => (next) => (action) => {
  var _a;
  if (isRejected(action) && ((_a = action.payload) == null ? void 0 : _a.status) === 401) {
    dispatch(logout());
    window.location.href = "/admin/auth/login";
    return;
  }
  return next(action);
};
var getBasename = () => (process.env.ADMIN_PATH ?? "").replace(window.location.origin, "");
var createHook = () => {
  const _handlers = [];
  return {
    register(fn2) {
      _handlers.push(fn2);
    },
    delete(handler) {
      _handlers.splice(_handlers.indexOf(handler), 1);
    },
    runWaterfall(args, store) {
      return _handlers.reduce((acc, fn2) => fn2(acc, store), args);
    },
    async runWaterfallAsync(args, store) {
      let result = args;
      for (const fn2 of _handlers) {
        result = await fn2(result, store);
      }
      return result;
    },
    runSeries(...args) {
      return _handlers.map((fn2) => fn2(...args));
    },
    async runSeriesAsync(...args) {
      const result = [];
      for (const fn2 of _handlers) {
        result.push(await fn2(...args));
      }
      return result;
    },
    runParallel(...args) {
      return Promise.all(_handlers.map((fn2) => {
        return fn2(...args);
      }));
    }
  };
};
var languageNativeNames = {
  ar: "العربية",
  ca: "Català",
  cs: "Čeština",
  de: "Deutsch",
  dk: "Dansk",
  en: "English",
  "en-GB": "English (United Kingdom)",
  es: "Español",
  eu: "Euskara",
  uz: "O`zbekcha",
  ro: "Română",
  fr: "Français",
  gu: "Gujarati",
  he: "עברית",
  hu: "Magyar",
  id: "Indonesian",
  it: "Italiano",
  ja: "日本語",
  ko: "한국어",
  ml: "Malayalam",
  ms: "Melayu",
  nl: "Nederlands",
  no: "Norwegian",
  pl: "Polski",
  "pt-BR": "Português (Brasil)",
  pt: "Português (Portugal)",
  ru: "Русский",
  sk: "Slovenčina",
  sv: "Swedish",
  th: "ไทย",
  tr: "Türkçe",
  uk: "Українська",
  vi: "Tiếng Việt",
  "zh-Hans": "中文 (简体)",
  zh: "中文 (繁體)",
  sa: "संस्कृत",
  hi: "हिन्दी"
};
function __variableDynamicImportRuntime1__(path) {
  switch (path) {
    case "./translations/ar.json":
      return import("./ar-DIoaNhYi-OXJCLZR5.js");
    case "./translations/ca.json":
      return import("./ca-CiTVrP0z-OFI7BVFO.js");
    case "./translations/cs.json":
      return import("./cs-D7xysdyX-DDUFWG23.js");
    case "./translations/de.json":
      return import("./de-BWQ7SIyM-HZX445HQ.js");
    case "./translations/dk.json":
      return import("./dk-7AZJZW29-HMJXFUPJ.js");
    case "./translations/en.json":
      return import("./en-CRu3-kTC-AWHH2GR5.js");
    case "./translations/es.json":
      return import("./es-DlUN520X-UZDCWUG7.js");
    case "./translations/eu.json":
      return import("./eu-BjPzWjP--GRFBDVF4.js");
    case "./translations/fr.json":
      return import("./fr-D-lfObnF-WAEHJ5LD.js");
    case "./translations/gu.json":
      return import("./gu-DMqR9PzV-UX6VMPKL.js");
    case "./translations/he.json":
      return import("./he-DfIYPy4g-7FXMIIGC.js");
    case "./translations/hi.json":
      return import("./hi-C1bRwQm3-F22IDJJE.js");
    case "./translations/hu.json":
      return import("./hu-DTUInqNe-IKJCF4MT.js");
    case "./translations/id.json":
      return import("./id-CLj6OS01-X3HDQXIF.js");
    case "./translations/it.json":
      return import("./it-CI4iXN-s-C3SL63C3.js");
    case "./translations/ja.json":
      return import("./ja-XD0qdvmh-2XX6OMIN.js");
    case "./translations/ko.json":
      return import("./ko-CAChQtgZ-PWKSBDIP.js");
    case "./translations/ml.json":
      return import("./ml-OZdE-Rdf-3C356TCM.js");
    case "./translations/ms.json":
      return import("./ms-CWDO45lu-4I5QWKPM.js");
    case "./translations/nl.json":
      return import("./nl-BRq2PB1q-P2MMAD3Y.js");
    case "./translations/no.json":
      return import("./no-BtzfHZUH-S5Q5ME4G.js");
    case "./translations/pl.json":
      return import("./pl-BsvtDLRo-XO6M2Q4J.js");
    case "./translations/pt-BR.json":
      return import("./pt-BR-DBqHmqA5-GVGCXWIO.js");
    case "./translations/pt.json":
      return import("./pt-wKaSOdHh-KBFI3JBX.js");
    case "./translations/ru.json":
      return import("./ru-C13N1yaO-Q4JLOI2R.js");
    case "./translations/sa.json":
      return import("./sa-BS5xpa-V-SJ74ZK3W.js");
    case "./translations/sk.json":
      return import("./sk-Yv9s7dUn-BBEDXFPW.js");
    case "./translations/sv.json":
      return import("./sv-CaQpgtnl-S5OFDOOP.js");
    case "./translations/th.json":
      return import("./th-Mav5tUMF-XHJXAXZ7.js");
    case "./translations/tr.json":
      return import("./tr-DZnC0Jye-7MKKXB62.js");
    case "./translations/uk.json":
      return import("./uk-Cb6a0PAZ-JZLFPBCR.js");
    case "./translations/vi.json":
      return import("./vi-r6WrFGyI-KPDC5EQ4.js");
    case "./translations/zh-Hans.json":
      return import("./zh-Hans-BmHHqjob-P3LN2MCY.js");
    case "./translations/zh.json":
      return import("./zh-CIjQrG_x-GPRFAMPQ.js");
    default:
      return new Promise(function(resolve, reject) {
        (typeof queueMicrotask === "function" ? queueMicrotask : setTimeout)(
          reject.bind(null, new Error("Unknown variable dynamic import: " + path))
        );
      });
  }
}
function __variableDynamicImportRuntime0__(path) {
  switch (path) {
    case "./translations/en-GB.js":
      return import("./en-GB-DZyWkup_-NKAASPAW.js");
    default:
      return new Promise(function(resolve, reject) {
        (typeof queueMicrotask === "function" ? queueMicrotask : setTimeout)(
          reject.bind(null, new Error("Unknown variable dynamic import: " + path))
        );
      });
  }
}
var { INJECT_COLUMN_IN_TABLE, MUTATE_COLLECTION_TYPES_LINKS, MUTATE_EDIT_VIEW_LAYOUT, MUTATE_SINGLE_TYPES_LINKS } = HOOKS;
var StrapiApp = class {
  async bootstrap(customBootstrap) {
    Object.keys(this.appPlugins).forEach((plugin) => {
      const bootstrap = this.appPlugins[plugin].bootstrap;
      if (bootstrap) {
        bootstrap({
          addSettingsLink: this.addSettingsLink,
          addSettingsLinks: this.addSettingsLinks,
          getPlugin: this.getPlugin,
          registerHook: this.registerHook
        });
      }
    });
    if ((0, import_isFunction.default)(customBootstrap)) {
      customBootstrap({
        addComponents: this.addComponents,
        addFields: this.addFields,
        addMenuLink: this.addMenuLink,
        addReducers: this.addReducers,
        addSettingsLink: this.addSettingsLink,
        addSettingsLinks: this.addSettingsLinks,
        getPlugin: this.getPlugin,
        registerHook: this.registerHook
      });
    }
  }
  async register(customRegister) {
    Object.keys(this.appPlugins).forEach((plugin) => {
      this.appPlugins[plugin].register(this);
    });
    if ((0, import_isFunction.default)(customRegister)) {
      customRegister(this);
    }
  }
  async loadAdminTrads() {
    const adminLocales = await Promise.all(this.configurations.locales.map(async (locale) => {
      try {
        const { default: data } = await __variableDynamicImportRuntime0__(`./translations/${locale}.js`);
        return {
          data,
          locale
        };
      } catch {
        try {
          const { default: data } = await __variableDynamicImportRuntime1__(`./translations/${locale}.json`);
          return {
            data,
            locale
          };
        } catch {
          return {
            data: null,
            locale
          };
        }
      }
    }));
    return adminLocales.reduce((acc, current) => {
      if (current.data) {
        acc[current.locale] = current.data;
      }
      return acc;
    }, {});
  }
  /**
  * Load the application's translations and merged the custom translations
  * with the default ones.
  */
  async loadTrads(customTranslations = {}) {
    const adminTranslations = await this.loadAdminTrads();
    const arrayOfPromises = Object.keys(this.appPlugins).map((plugin) => {
      const registerTrads = this.appPlugins[plugin].registerTrads;
      if (registerTrads) {
        return registerTrads({
          locales: this.configurations.locales
        });
      }
      return null;
    }).filter((a) => a);
    const pluginsTrads = await Promise.all(arrayOfPromises);
    const mergedTrads = pluginsTrads.reduce((acc, currentPluginTrads) => {
      const pluginTrads = currentPluginTrads.reduce((acc1, current) => {
        acc1[current.locale] = current.data;
        return acc1;
      }, {});
      Object.keys(pluginTrads).forEach((locale) => {
        acc[locale] = {
          ...acc[locale],
          ...pluginTrads[locale]
        };
      });
      return acc;
    }, {});
    const translations = this.configurations.locales.reduce((acc, current) => {
      acc[current] = {
        ...adminTranslations[current],
        ...mergedTrads[current] || {},
        ...customTranslations[current] ?? {}
      };
      return acc;
    }, {});
    this.configurations.translations = translations;
    return Promise.resolve();
  }
  render() {
    const localeNames = (0, import_pick.default)(languageNativeNames, this.configurations.locales || []);
    const locale = localStorage.getItem(LANGUAGE_LOCAL_STORAGE_KEY) || "en";
    this.store = configureStoreImpl({
      admin_app: {
        permissions: (0, import_merge.default)({}, ADMIN_PERMISSIONS_CE, ADMIN_PERMISSIONS_EE),
        theme: {
          availableThemes: [],
          currentTheme: localStorage.getItem(THEME_LOCAL_STORAGE_KEY) || "system"
        },
        language: {
          locale: localeNames[locale] ? locale : "en",
          localeNames
        },
        token: getStoredToken()
      }
    }, this.middlewares, this.reducers);
    const router = this.router.createRouter(this, {
      basename: getBasename()
    });
    return (0, import_jsx_runtime.jsx)(RouterProvider, {
      router
    });
  }
  constructor({ config, appPlugins } = {}) {
    this.plugins = {};
    this.hooksDict = {};
    this.admin = {
      injectionZones: {}
    };
    this.translations = {};
    this.configurations = {
      authLogo: img,
      head: {
        favicon: ""
      },
      locales: [
        "en"
      ],
      menuLogo: img,
      notifications: {
        releases: true
      },
      themes: {
        light: lightTheme,
        dark: darkTheme
      },
      translations: {},
      tutorials: true
    };
    this.rbac = new RBAC();
    this.library = {
      components: {},
      fields: {}
    };
    this.middlewares = [];
    this.reducers = {};
    this.store = null;
    this.customFields = new CustomFields();
    this.addComponents = (components) => {
      if (Array.isArray(components)) {
        components.map((comp) => {
          (0, import_invariant.default)(comp.Component, "A Component must be provided");
          (0, import_invariant.default)(comp.name, "A type must be provided");
          this.library.components[comp.name] = comp.Component;
        });
      } else {
        (0, import_invariant.default)(components.Component, "A Component must be provided");
        (0, import_invariant.default)(components.name, "A type must be provided");
        this.library.components[components.name] = components.Component;
      }
    };
    this.addFields = (fields) => {
      if (Array.isArray(fields)) {
        fields.map((field) => {
          (0, import_invariant.default)(field.Component, "A Component must be provided");
          (0, import_invariant.default)(field.type, "A type must be provided");
          this.library.fields[field.type] = field.Component;
        });
      } else {
        (0, import_invariant.default)(fields.Component, "A Component must be provided");
        (0, import_invariant.default)(fields.type, "A type must be provided");
        this.library.fields[fields.type] = fields.Component;
      }
    };
    this.addMiddlewares = (middlewares) => {
      middlewares.forEach((middleware) => {
        this.middlewares.push(middleware);
      });
    };
    this.addRBACMiddleware = (m) => {
      if (Array.isArray(m)) {
        this.rbac.use(m);
      } else {
        this.rbac.use(m);
      }
    };
    this.addReducers = (reducers) => {
      Object.entries(reducers).forEach(([name, reducer3]) => {
        this.reducers[name] = reducer3;
      });
    };
    this.addMenuLink = (link) => this.router.addMenuLink(link);
    this.addSettingsLinks = (sectionId, links) => {
      (0, import_invariant.default)(Array.isArray(links), "TypeError expected links to be an array");
      this.router.addSettingsLink(sectionId, links);
    };
    this.createSettingSection = (section, links) => this.router.addSettingsLink(section, links);
    this.addSettingsLink = (sectionId, link) => {
      this.router.addSettingsLink(sectionId, link);
    };
    this.createCustomConfigurations = (customConfig) => {
      var _a, _b, _c, _d, _e;
      if (customConfig.locales) {
        this.configurations.locales = [
          "en",
          ...((_a = customConfig.locales) == null ? void 0 : _a.filter((loc) => loc !== "en")) || []
        ];
      }
      if ((_b = customConfig.auth) == null ? void 0 : _b.logo) {
        this.configurations.authLogo = customConfig.auth.logo;
      }
      if ((_c = customConfig.menu) == null ? void 0 : _c.logo) {
        this.configurations.menuLogo = customConfig.menu.logo;
      }
      if ((_d = customConfig.head) == null ? void 0 : _d.favicon) {
        this.configurations.head.favicon = customConfig.head.favicon;
      }
      if (customConfig.theme) {
        const darkTheme2 = customConfig.theme.dark;
        const lightTheme2 = customConfig.theme.light;
        if (!darkTheme2 && !lightTheme2) {
          console.warn(`[deprecated] In future versions, Strapi will stop supporting this theme customization syntax. The theme configuration accepts a light and a dark key to customize each theme separately. See https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#theme-extension.`.trim());
          (0, import_merge.default)(this.configurations.themes.light, customConfig.theme);
        }
        if (lightTheme2)
          (0, import_merge.default)(this.configurations.themes.light, lightTheme2);
        if (darkTheme2)
          (0, import_merge.default)(this.configurations.themes.dark, darkTheme2);
      }
      if (((_e = customConfig.notifications) == null ? void 0 : _e.releases) !== void 0) {
        this.configurations.notifications.releases = customConfig.notifications.releases;
      }
      if (customConfig.tutorials !== void 0) {
        this.configurations.tutorials = customConfig.tutorials;
      }
    };
    this.createHook = (name) => {
      this.hooksDict[name] = createHook();
    };
    this.getAdminInjectedComponents = (moduleName, containerName, blockName) => {
      try {
        return this.admin.injectionZones[moduleName][containerName][blockName] || [];
      } catch (err) {
        console.error("Cannot get injected component", err);
        return [];
      }
    };
    this.getPlugin = (pluginId) => this.plugins[pluginId];
    this.registerHook = (name, fn2) => {
      (0, import_invariant.default)(this.hooksDict[name], `The hook ${name} is not defined. You are trying to register a hook that does not exist in the application.`);
      this.hooksDict[name].register(fn2);
    };
    this.registerPlugin = (pluginConf) => {
      const plugin = new Plugin(pluginConf);
      this.plugins[plugin.pluginId] = plugin;
    };
    this.runHookSeries = (name, asynchronous = false) => asynchronous ? this.hooksDict[name].runSeriesAsync() : this.hooksDict[name].runSeries();
    this.runHookWaterfall = (name, initialValue, store) => {
      return this.hooksDict[name].runWaterfall(initialValue, store);
    };
    this.runHookParallel = (name) => this.hooksDict[name].runParallel();
    this.appPlugins = appPlugins || {};
    this.createCustomConfigurations(config ?? {});
    this.createHook(INJECT_COLUMN_IN_TABLE);
    this.createHook(MUTATE_COLLECTION_TYPES_LINKS);
    this.createHook(MUTATE_SINGLE_TYPES_LINKS);
    this.createHook(MUTATE_EDIT_VIEW_LAYOUT);
    this.router = new Router(getInitialRoutes());
  }
};
var renderAdmin = async (mountNode, { plugins, customisations, features }) => {
  var _a, _b;
  if (!mountNode) {
    throw new Error("[@strapi/admin]: Could not find the root element to mount the admin app");
  }
  window.strapi = {
    /**
    * This ENV variable is passed from the strapi instance, by default no url is set
    * in the config and therefore the instance returns you an empty string so URLs are relative.
    *
    * To ensure that the backendURL is always set, we use the window.location.origin as a fallback.
    */
    backendURL: createAbsoluteUrl(process.env.STRAPI_ADMIN_BACKEND_URL),
    isEE: false,
    telemetryDisabled: process.env.STRAPI_TELEMETRY_DISABLED === "true",
    future: {
      isEnabled: (name) => {
        var _a2;
        return ((_a2 = features == null ? void 0 : features.future) == null ? void 0 : _a2[name]) === true;
      }
    },
    // @ts-expect-error – there's pollution from the global scope of Node.
    features: {
      SSO: "sso",
      AUDIT_LOGS: "audit-logs",
      REVIEW_WORKFLOWS: "review-workflows",
      /**
      * If we don't get the license then we know it's not EE
      * so no feature is enabled.
      */
      isEnabled: () => false
    },
    projectType: "Community",
    flags: {
      nps: false,
      promoteEE: true
    }
  };
  const { get } = getFetchClient();
  try {
    const { data: { data: { isEE, features: features2, flags } } } = await get("/admin/project-type");
    window.strapi.isEE = isEE;
    window.strapi.flags = flags;
    window.strapi.features = {
      ...window.strapi.features,
      isEnabled: (featureName) => features2.some((feature) => feature.name === featureName)
    };
    window.strapi.projectType = isEE ? "Enterprise" : "Community";
  } catch (err) {
    console.error(err);
  }
  const app = new StrapiApp({
    config: customisations == null ? void 0 : customisations.config,
    appPlugins: plugins
  });
  await app.register(customisations == null ? void 0 : customisations.register);
  await app.bootstrap(customisations == null ? void 0 : customisations.bootstrap);
  await app.loadTrads((_a = customisations == null ? void 0 : customisations.config) == null ? void 0 : _a.translations);
  (0, import_client.createRoot)(mountNode).render(app.render());
  if (typeof module !== "undefined" && module && "hot" in module && typeof module.hot === "object" && module.hot !== null && "accept" in module.hot && typeof module.hot.accept === "function") {
    module.hot.accept();
  }
  if (typeof ((_b = import.meta.hot) == null ? void 0 : _b.accept) === "function") {
    import.meta.hot.accept();
  }
};
var ConfirmDialog = ({ children, icon = (0, import_jsx_runtime.jsx)(StyledWarning, {}), onConfirm, variant = "danger-light", startAction, endAction, title }) => {
  const { formatMessage } = useIntl();
  const [isConfirming, setIsConfirming] = React10.useState(false);
  const content = children || formatMessage({
    id: "app.confirm.body",
    defaultMessage: "Are you sure?"
  });
  const handleConfirm = async (e) => {
    if (!onConfirm) {
      return;
    }
    try {
      setIsConfirming(true);
      await onConfirm(e);
    } finally {
      setIsConfirming(false);
    }
  };
  return (0, import_jsx_runtime.jsxs)(Dialog.Content, {
    children: [
      (0, import_jsx_runtime.jsx)(Dialog.Header, {
        children: title || formatMessage({
          id: "app.components.ConfirmDialog.title",
          defaultMessage: "Confirmation"
        })
      }),
      (0, import_jsx_runtime.jsx)(Dialog.Body, {
        icon,
        children: content
      }),
      (0, import_jsx_runtime.jsxs)(Dialog.Footer, {
        children: [
          startAction || (0, import_jsx_runtime.jsx)(Dialog.Cancel, {
            children: (0, import_jsx_runtime.jsx)(Button, {
              fullWidth: true,
              variant: "tertiary",
              onClick: (e) => {
                e.stopPropagation();
              },
              children: formatMessage({
                id: "app.components.Button.cancel",
                defaultMessage: "Cancel"
              })
            })
          }),
          endAction || (0, import_jsx_runtime.jsx)(Dialog.Action, {
            children: (0, import_jsx_runtime.jsx)(Button, {
              fullWidth: true,
              onClick: handleConfirm,
              variant,
              loading: isConfirming,
              children: formatMessage({
                id: "app.components.Button.confirm",
                defaultMessage: "Confirm"
              })
            })
          })
        ]
      })
    ]
  });
};
var StyledWarning = dt(ForwardRef$3)`
  width: 24px;
  height: 24px;

  path {
    fill: ${({ theme }) => theme.colors.danger600};
  }
`;
var useIsMounted = () => {
  const isMounted = React10.useRef(false);
  React10.useLayoutEffect(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  return isMounted;
};
var useForceUpdate = () => {
  const [tick, update] = React10.useState();
  const isMounted = useIsMounted();
  const forceUpdate = React10.useCallback(() => {
    if (isMounted.current) {
      update(Math.random());
    }
  }, [
    isMounted,
    update
  ]);
  return [
    tick,
    forceUpdate
  ];
};
var useThrottledCallback = (callback, wait, options) => {
  const throttledCallback = (0, import_react10.useMemo)(() => (0, import_throttle.default)(callback, wait, options), [
    callback,
    options,
    wait
  ]);
  return throttledCallback;
};
var requestIdleCallbackShim = (callback) => {
  const start = Date.now();
  return setTimeout(() => {
    callback({
      didTimeout: false,
      timeRemaining() {
        return Math.max(0, Date.now() - start);
      }
    });
  }, 1);
};
var _requestIdleCallback = typeof requestIdleCallback === "undefined" ? requestIdleCallbackShim : requestIdleCallback;
var cancelIdleCallbackShim = (handle) => {
  return clearTimeout(handle);
};
var _cancelIdleCallback = typeof cancelIdleCallback === "undefined" ? cancelIdleCallbackShim : cancelIdleCallback;
var DescriptionComponentRenderer = ({ children, props, descriptions }) => {
  const statesRef = React10.useRef({});
  const [tick, forceUpdate] = useForceUpdate();
  const requestHandle = React10.useRef(null);
  const requestUpdate = React10.useCallback(() => {
    if (requestHandle.current) {
      _cancelIdleCallback(requestHandle.current);
    }
    requestHandle.current = _requestIdleCallback(() => {
      requestHandle.current = null;
      forceUpdate();
    });
  }, [
    forceUpdate
  ]);
  const throttledRequestUpdate = useThrottledCallback(requestUpdate, 60, {
    trailing: true
  });
  const update = React10.useCallback((id, description) => {
    if (description === null) {
      delete statesRef.current[id];
    } else {
      const current = statesRef.current[id];
      statesRef.current[id] = {
        ...current,
        value: {
          ...description,
          id
        }
      };
    }
    throttledRequestUpdate();
  }, [
    throttledRequestUpdate
  ]);
  const ids2 = React10.useMemo(() => descriptions.map((description) => getCompId(description)), [
    descriptions
  ]);
  const states = React10.useMemo(
    () => ids2.map((id) => {
      var _a;
      return (_a = statesRef.current[id]) == null ? void 0 : _a.value;
    }).filter((state) => state !== null && state !== void 0),
    /**
    * we leave tick in the deps to ensure the memo is recalculated when the `update` function  is called.
    * the `ids` will most likely be stable unless we get new actions, but we can't respond to the Description
    * Component changing the ref data in any other way.
    */
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      ids2,
      tick
    ]
  );
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
    children: [
      descriptions.map((description) => {
        const key = getCompId(description);
        return (0, import_jsx_runtime.jsx)(Description, {
          id: key,
          description,
          props,
          update
        }, key);
      }),
      children(states)
    ]
  });
};
var Description = React10.memo(({ description, id, props, update }) => {
  const comp = description(props);
  useShallowCompareEffect(() => {
    update(id, comp);
    return () => {
      update(id, null);
    };
  }, comp);
  return null;
}, (prev, next) => (0, import_isEqual.default)(prev.props, next.props));
var ids = /* @__PURE__ */ new WeakMap();
var counter = 0;
function getCompId(comp) {
  const cachedId = ids.get(comp);
  if (cachedId)
    return cachedId;
  const id = `${comp.name || comp.displayName || "<anonymous>"}-${counter++}`;
  ids.set(comp, id);
  return id;
}
var useShallowCompareMemoize = (value) => {
  const ref = React10.useRef(void 0);
  if (!(0, import_isEqual.default)(value, ref.current)) {
    ref.current = value;
  }
  return [
    ref.current
  ];
};
var useShallowCompareEffect = (callback, dependencies) => {
  React10.useEffect(callback, useShallowCompareMemoize(dependencies));
};
var BASE_FILTERS = [
  {
    label: {
      id: "components.FilterOptions.FILTER_TYPES.$eq",
      defaultMessage: "is"
    },
    value: "$eq"
  },
  {
    label: {
      id: "components.FilterOptions.FILTER_TYPES.$ne",
      defaultMessage: "is not"
    },
    value: "$ne"
  },
  {
    label: {
      id: "components.FilterOptions.FILTER_TYPES.$null",
      defaultMessage: "is null"
    },
    value: "$null"
  },
  {
    label: {
      id: "components.FilterOptions.FILTER_TYPES.$notNull",
      defaultMessage: "is not null"
    },
    value: "$notNull"
  }
];
var NUMERIC_FILTERS = [
  {
    label: {
      id: "components.FilterOptions.FILTER_TYPES.$gt",
      defaultMessage: "is greater than"
    },
    value: "$gt"
  },
  {
    label: {
      id: "components.FilterOptions.FILTER_TYPES.$gte",
      defaultMessage: "is greater than or equal to"
    },
    value: "$gte"
  },
  {
    label: {
      id: "components.FilterOptions.FILTER_TYPES.$lt",
      defaultMessage: "is less than"
    },
    value: "$lt"
  },
  {
    label: {
      id: "components.FilterOptions.FILTER_TYPES.$lte",
      defaultMessage: "is less than or equal to"
    },
    value: "$lte"
  }
];
var IS_SENSITIVE_FILTERS = [
  {
    label: {
      id: "components.FilterOptions.FILTER_TYPES.$eqi",
      defaultMessage: "is (case insensitive)"
    },
    value: "$eqi"
  },
  {
    label: {
      id: "components.FilterOptions.FILTER_TYPES.$nei",
      defaultMessage: "is not (case insensitive)"
    },
    value: "$nei"
  }
];
var CONTAINS_FILTERS = [
  {
    label: {
      id: "components.FilterOptions.FILTER_TYPES.$contains",
      defaultMessage: "contains"
    },
    value: "$contains"
  },
  {
    label: {
      id: "components.FilterOptions.FILTER_TYPES.$containsi",
      defaultMessage: "contains (case insensitive)"
    },
    value: "$containsi"
  },
  {
    label: {
      id: "components.FilterOptions.FILTER_TYPES.$notContains",
      defaultMessage: "not contains"
    },
    value: "$notContains"
  },
  {
    label: {
      id: "components.FilterOptions.FILTER_TYPES.$notContainsi",
      defaultMessage: "not contains (case insensitive)"
    },
    value: "$notContainsi"
  }
];
var STRING_PARSE_FILTERS = [
  {
    label: {
      id: "components.FilterOptions.FILTER_TYPES.$startsWith",
      defaultMessage: "starts with"
    },
    value: "$startsWith"
  },
  {
    label: {
      id: "components.FilterOptions.FILTER_TYPES.$startsWithi",
      defaultMessage: "starts with (case insensitive)"
    },
    value: "$startsWithi"
  },
  {
    label: {
      id: "components.FilterOptions.FILTER_TYPES.$endsWith",
      defaultMessage: "ends with"
    },
    value: "$endsWith"
  },
  {
    label: {
      id: "components.FilterOptions.FILTER_TYPES.$endsWithi",
      defaultMessage: "ends with (case insensitive)"
    },
    value: "$endsWithi"
  }
];
var FILTERS_WITH_NO_VALUE = [
  "$null",
  "$notNull"
];
function useControllableState({ prop, defaultProp, onChange = () => {
} }) {
  const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({
    defaultProp,
    onChange
  });
  const isControlled = prop !== void 0;
  const value = isControlled ? prop : uncontrolledProp;
  const handleChange = useCallbackRef(onChange);
  const setValue = React10.useCallback((nextValue) => {
    if (isControlled) {
      const setter = nextValue;
      const value2 = typeof nextValue === "function" ? setter(prop) : nextValue;
      if (value2 !== prop)
        handleChange(value2);
    } else {
      setUncontrolledProp(nextValue);
    }
  }, [
    isControlled,
    prop,
    setUncontrolledProp,
    handleChange
  ]);
  return [
    value,
    setValue
  ];
}
function useUncontrolledState({ defaultProp, onChange }) {
  const uncontrolledState = React10.useState(defaultProp);
  const [value] = uncontrolledState;
  const prevValueRef = React10.useRef(value);
  const handleChange = useCallbackRef(onChange);
  React10.useEffect(() => {
    if (prevValueRef.current !== value) {
      handleChange(value);
      prevValueRef.current = value;
    }
  }, [
    value,
    prevValueRef,
    handleChange
  ]);
  return uncontrolledState;
}
var [FiltersProvider, useFilters] = createContext("Filters");
var Root$2 = ({ children, disabled = false, onChange, options = [], onOpenChange, open: openProp, defaultOpen, ...restProps }) => {
  const handleChange = (data) => {
    if (onChange) {
      onChange(data);
    }
  };
  const [open = false, setOpen] = useControllableState({
    prop: openProp,
    defaultProp: defaultOpen,
    onChange: onOpenChange
  });
  return (0, import_jsx_runtime.jsx)(Popover.Root, {
    open,
    onOpenChange: setOpen,
    ...restProps,
    children: (0, import_jsx_runtime.jsx)(FiltersProvider, {
      setOpen,
      disabled,
      onChange: handleChange,
      options,
      children
    })
  });
};
var Trigger = React10.forwardRef(({ label }, forwardedRef) => {
  const { formatMessage } = useIntl();
  const disabled = useFilters("Trigger", ({ disabled: disabled2 }) => disabled2);
  return (0, import_jsx_runtime.jsx)(Popover.Trigger, {
    children: (0, import_jsx_runtime.jsx)(Button, {
      variant: "tertiary",
      ref: forwardedRef,
      startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$3d, {}),
      size: "S",
      disabled,
      children: label || formatMessage({
        id: "app.utils.filters",
        defaultMessage: "Filters"
      })
    })
  });
});
var PopoverImpl = () => {
  var _a;
  const [{ query }, setQuery] = useQueryParams();
  const { formatMessage } = useIntl();
  const options = useFilters("Popover", ({ options: options2 }) => options2);
  const onChange = useFilters("Popover", ({ onChange: onChange2 }) => onChange2);
  const setOpen = useFilters("Popover", ({ setOpen: setOpen2 }) => setOpen2);
  if (options.length === 0) {
    return null;
  }
  const handleSubmit = (data) => {
    var _a2, _b;
    const value = FILTERS_WITH_NO_VALUE.includes(data.filter) ? "true" : encodeURIComponent(data.value ?? "");
    if (!value) {
      return;
    }
    if (onChange) {
      onChange(data);
    }
    const fieldOptions = options.find((filter) => filter.name === data.name);
    const operatorValuePairing = {
      [data.filter]: value
    };
    const newFilterQuery = {
      ...query.filters,
      $and: [
        ...((_a2 = query.filters) == null ? void 0 : _a2.$and) ?? [],
        {
          [data.name]: fieldOptions.type === "relation" ? {
            [((_b = fieldOptions.mainField) == null ? void 0 : _b.name) ?? "id"]: operatorValuePairing
          } : operatorValuePairing
        }
      ]
    };
    setQuery({
      filters: newFilterQuery,
      page: 1
    });
    setOpen(false);
  };
  return (0, import_jsx_runtime.jsx)(Popover.Content, {
    children: (0, import_jsx_runtime.jsx)(Box, {
      padding: 3,
      children: (0, import_jsx_runtime.jsx)(Form2, {
        method: "POST",
        initialValues: {
          name: (_a = options[0]) == null ? void 0 : _a.name,
          filter: BASE_FILTERS[0].value
        },
        onSubmit: handleSubmit,
        children: ({ values: formValues, modified, isSubmitting }) => {
          var _a2;
          const filter = options.find((filter2) => filter2.name === formValues.name);
          const Input = (filter == null ? void 0 : filter.input) || MemoizedInputRenderer;
          return (0, import_jsx_runtime.jsxs)(Flex, {
            direction: "column",
            alignItems: "stretch",
            gap: 2,
            style: {
              minWidth: 184
            },
            children: [
              [
                {
                  ["aria-label"]: formatMessage({
                    id: "app.utils.select-field",
                    defaultMessage: "Select field"
                  }),
                  name: "name",
                  options: options.map((filter2) => ({
                    label: filter2.label,
                    value: filter2.name
                  })),
                  placholder: formatMessage({
                    id: "app.utils.select-field",
                    defaultMessage: "Select field"
                  }),
                  type: "enumeration"
                },
                {
                  ["aria-label"]: formatMessage({
                    id: "app.utils.select-filter",
                    defaultMessage: "Select filter"
                  }),
                  name: "filter",
                  options: (filter == null ? void 0 : filter.operators) || getFilterList(filter).map((opt) => ({
                    label: formatMessage(opt.label),
                    value: opt.value
                  })),
                  placeholder: formatMessage({
                    id: "app.utils.select-filter",
                    defaultMessage: "Select filter"
                  }),
                  type: "enumeration"
                }
              ].map((field) => (0, import_jsx_runtime.jsx)(MemoizedInputRenderer, {
                ...field
              }, field.name)),
              filter && formValues.filter && formValues.filter !== "$null" && formValues.filter !== "$notNull" ? (0, import_jsx_runtime.jsx)(Input, {
                ...filter,
                label: null,
                "aria-label": filter.label,
                name: "value",
                // @ts-expect-error – if type is `custom` then `Input` will be a custom component.
                type: ((_a2 = filter.mainField) == null ? void 0 : _a2.type) ?? filter.type
              }) : null,
              (0, import_jsx_runtime.jsx)(Button, {
                disabled: !modified || isSubmitting,
                size: "L",
                variant: "secondary",
                startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$1d, {}),
                type: "submit",
                fullWidth: true,
                children: formatMessage({
                  id: "app.utils.add-filter",
                  defaultMessage: "Add filter"
                })
              })
            ]
          });
        }
      })
    })
  });
};
var getFilterList = (filter) => {
  var _a;
  if (!filter) {
    return [];
  }
  const type = ((_a = filter.mainField) == null ? void 0 : _a.type) ? filter.mainField.type : filter.type;
  switch (type) {
    case "email":
    case "text":
    case "string": {
      return [
        ...BASE_FILTERS,
        ...IS_SENSITIVE_FILTERS,
        ...CONTAINS_FILTERS,
        ...STRING_PARSE_FILTERS
      ];
    }
    case "float":
    case "integer":
    case "biginteger":
    case "decimal": {
      return [
        ...BASE_FILTERS,
        ...NUMERIC_FILTERS
      ];
    }
    case "time":
    case "date": {
      return [
        ...BASE_FILTERS,
        ...NUMERIC_FILTERS,
        ...CONTAINS_FILTERS
      ];
    }
    case "datetime": {
      return [
        ...BASE_FILTERS,
        ...NUMERIC_FILTERS
      ];
    }
    case "enumeration": {
      return BASE_FILTERS;
    }
    default:
      return [
        ...BASE_FILTERS,
        ...IS_SENSITIVE_FILTERS
      ];
  }
};
var List = () => {
  var _a, _b, _c, _d;
  const [{ query }, setQuery] = useQueryParams();
  const options = useFilters("List", ({ options: options2 }) => options2);
  const handleClick = (data) => {
    var _a2;
    const nextFilters = (((_a2 = query == null ? void 0 : query.filters) == null ? void 0 : _a2.$and) ?? []).filter((filter) => {
      const [attributeName] = Object.keys(filter);
      if (attributeName !== data.name) {
        return true;
      }
      const { type, mainField } = options.find(({ name }) => name === attributeName);
      if (type === "relation") {
        const filterObj = filter[attributeName][(mainField == null ? void 0 : mainField.name) ?? "id"];
        if (typeof filterObj === "object") {
          const [operator] = Object.keys(filterObj);
          const value = filterObj[operator];
          return !(operator === data.filter && value === data.value);
        }
        return true;
      } else {
        const filterObj = filter[attributeName];
        const [operator] = Object.keys(filterObj);
        const value = filterObj[operator];
        return !(operator === data.filter && value === data.value);
      }
    });
    setQuery({
      filters: {
        $and: nextFilters
      },
      page: 1
    });
  };
  if (!((_b = (_a = query == null ? void 0 : query.filters) == null ? void 0 : _a.$and) == null ? void 0 : _b.length)) {
    return null;
  }
  return (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, {
    children: (_d = (_c = query == null ? void 0 : query.filters) == null ? void 0 : _c.$and) == null ? void 0 : _d.map((queryFilter) => {
      var _a2;
      const [attributeName] = Object.keys(queryFilter);
      const filter = options.find(({ name }) => name === attributeName);
      const filterObj = queryFilter[attributeName];
      if (!filter || typeof filterObj !== "object" || filterObj === null) {
        return null;
      }
      if (filter.type === "relation") {
        const modelFilter = filterObj[((_a2 = filter.mainField) == null ? void 0 : _a2.name) ?? "id"];
        if (typeof modelFilter === "object") {
          const [operator] = Object.keys(modelFilter);
          const value = modelFilter[operator];
          return (0, import_jsx_runtime.jsx)(AttributeTag, {
            ...filter,
            onClick: handleClick,
            operator,
            value
          }, `${attributeName}-${operator}-${value}`);
        }
        return null;
      } else {
        const [operator] = Object.keys(filterObj);
        const value = filterObj[operator];
        if (typeof value === "object") {
          return null;
        }
        return (0, import_jsx_runtime.jsx)(AttributeTag, {
          ...filter,
          onClick: handleClick,
          operator,
          value
        }, `${attributeName}-${operator}-${value}`);
      }
    })
  });
};
var AttributeTag = ({ input, label, mainField, name, onClick, operator, options, value, ...filter }) => {
  const { formatMessage, formatDate, formatTime, formatNumber } = useIntl();
  const handleClick = () => {
    onClick({
      name,
      value,
      filter: operator
    });
  };
  const type = (mainField == null ? void 0 : mainField.type) ? mainField.type : filter.type;
  let formattedValue = value;
  switch (type) {
    case "date":
      formattedValue = formatDate(value, {
        dateStyle: "full"
      });
      break;
    case "datetime":
      formattedValue = formatDate(value, {
        dateStyle: "full",
        timeStyle: "short"
      });
      break;
    case "time":
      const [hour, minute] = value.split(":");
      const date = /* @__PURE__ */ new Date();
      date.setHours(Number(hour));
      date.setMinutes(Number(minute));
      formattedValue = formatTime(date, {
        hour: "numeric",
        minute: "numeric"
      });
      break;
    case "float":
    case "integer":
    case "biginteger":
    case "decimal":
      formattedValue = formatNumber(Number(value));
      break;
  }
  if (input && options) {
    const selectedOption = options.find((option) => {
      return (typeof option === "string" ? option : option.value) === value;
    });
    formattedValue = selectedOption ? typeof selectedOption === "string" ? selectedOption : selectedOption.label ?? selectedOption.value : value;
  }
  const content = `${label} ${formatMessage({
    id: `components.FilterOptions.FILTER_TYPES.${operator}`,
    defaultMessage: operator
  })} ${operator !== "$null" && operator !== "$notNull" ? formattedValue : ""}`;
  return (0, import_jsx_runtime.jsx)(Tag, {
    padding: 1,
    onClick: handleClick,
    icon: (0, import_jsx_runtime.jsx)(ForwardRef$3$, {}),
    children: content
  });
};
var Filters = {
  List,
  Popover: PopoverImpl,
  Root: Root$2,
  Trigger
};
var [PaginationProvider, usePagination] = createContext("Pagination");
var Root$1 = React10.forwardRef(({ children, defaultPageSize = 10, pageCount = 0, defaultPage = 1, onPageSizeChange, total = 0 }, forwardedRef) => {
  const [{ query }, setQuery] = useQueryParams({
    pageSize: defaultPageSize.toString(),
    page: defaultPage.toString()
  });
  const setPageSize = (pageSize) => {
    setQuery({
      pageSize,
      page: "1"
    });
    if (onPageSizeChange) {
      onPageSizeChange(pageSize);
    }
  };
  return (0, import_jsx_runtime.jsx)(Flex, {
    ref: forwardedRef,
    paddingTop: 4,
    paddingBottom: 4,
    alignItems: "flex-end",
    justifyContent: "space-between",
    children: (0, import_jsx_runtime.jsx)(PaginationProvider, {
      currentQuery: query,
      page: query.page,
      pageSize: query.pageSize,
      pageCount: pageCount.toString(),
      setPageSize,
      total,
      children
    })
  });
});
var PageSize = ({ options = [
  "10",
  "20",
  "50",
  "100"
] }) => {
  const { formatMessage } = useIntl();
  const pageSize = usePagination("PageSize", (state) => state.pageSize);
  const totalCount = usePagination("PageSize", (state) => state.total);
  const setPageSize = usePagination("PageSize", (state) => state.setPageSize);
  const handleChange = (value) => {
    setPageSize(value);
  };
  const minimumOption = parseInt(options[0], 10);
  if (minimumOption >= totalCount) {
    return null;
  }
  return (0, import_jsx_runtime.jsxs)(Flex, {
    gap: 2,
    children: [
      (0, import_jsx_runtime.jsx)(SingleSelect, {
        size: "S",
        "aria-label": formatMessage({
          id: "components.PageFooter.select",
          defaultMessage: "Entries per page"
        }),
        // @ts-expect-error from the DS V2 this won't be needed because we're only returning strings.
        onChange: handleChange,
        value: pageSize,
        children: options.map((option) => (0, import_jsx_runtime.jsx)(SingleSelectOption, {
          value: option,
          children: option
        }, option))
      }),
      (0, import_jsx_runtime.jsx)(Typography, {
        textColor: "neutral600",
        tag: "span",
        children: formatMessage({
          id: "components.PageFooter.select",
          defaultMessage: "Entries per page"
        })
      })
    ]
  });
};
var Links = ({ boundaryCount = 1, siblingCount = 1 }) => {
  const { formatMessage } = useIntl();
  const query = usePagination("Links", (state) => state.currentQuery);
  const currentPage = usePagination("Links", (state) => state.page);
  const totalPages = usePagination("Links", (state) => state.pageCount);
  const pageCount = parseInt(totalPages, 10);
  const activePage = parseInt(currentPage, 10);
  const range = (start, end) => {
    const length = end - start + 1;
    return Array.from({
      length
    }, (_, i) => start + i);
  };
  const startPages = range(1, Math.min(boundaryCount, pageCount));
  const endPages = range(Math.max(pageCount - boundaryCount + 1, boundaryCount + 1), pageCount);
  const siblingsStart = Math.max(
    Math.min(
      // Natural start
      activePage - siblingCount,
      // Lower boundary when page is high
      pageCount - boundaryCount - siblingCount * 2 - 1
    ),
    // Greater than startPages
    boundaryCount + 2
  );
  const siblingsEnd = Math.min(
    Math.max(
      // Natural end
      activePage + siblingCount,
      // Upper boundary when page is low
      boundaryCount + siblingCount * 2 + 2
    ),
    // Less than endPages
    endPages.length > 0 ? endPages[0] - 2 : pageCount - 1
  );
  const items = [
    ...startPages,
    // Start ellipsis
    // eslint-disable-next-line no-nested-ternary
    ...siblingsStart > boundaryCount + 2 ? [
      "start-ellipsis"
    ] : boundaryCount + 1 < pageCount - boundaryCount ? [
      boundaryCount + 1
    ] : [],
    // Sibling pages
    ...range(siblingsStart, siblingsEnd),
    // End ellipsis
    // eslint-disable-next-line no-nested-ternary
    ...siblingsEnd < pageCount - boundaryCount - 1 ? [
      "end-ellipsis"
    ] : pageCount - boundaryCount > boundaryCount ? [
      pageCount - boundaryCount
    ] : [],
    ...endPages
  ];
  if (pageCount <= 1) {
    return null;
  }
  return (0, import_jsx_runtime.jsxs)(Pagination, {
    activePage,
    pageCount,
    children: [
      (0, import_jsx_runtime.jsx)(PreviousLink, {
        tag: Link,
        to: {
          search: (0, import_qs.stringify)({
            ...query,
            page: activePage - 1
          })
        },
        children: formatMessage({
          id: "components.pagination.go-to-previous",
          defaultMessage: "Go to previous page"
        })
      }),
      items.map((item) => {
        if (typeof item === "number") {
          return (0, import_jsx_runtime.jsx)(PageLink, {
            tag: Link,
            number: item,
            to: {
              search: (0, import_qs.stringify)({
                ...query,
                page: item
              })
            },
            children: formatMessage({
              id: "components.pagination.go-to",
              defaultMessage: "Go to page {page}"
            }, {
              page: item
            })
          }, item);
        }
        return (0, import_jsx_runtime.jsx)(Dots, {}, item);
      }),
      (0, import_jsx_runtime.jsx)(NextLink, {
        tag: Link,
        to: {
          search: (0, import_qs.stringify)({
            ...query,
            page: activePage + 1
          })
        },
        children: formatMessage({
          id: "components.pagination.go-to-next",
          defaultMessage: "Go to next page"
        })
      })
    ]
  });
};
var Pagination2 = {
  Root: Root$1,
  Links,
  PageSize
};
var SearchInput = ({ disabled, label, placeholder, trackedEvent, trackedEventDetails }) => {
  const inputRef = React10.useRef(null);
  const iconButtonRef = React10.useRef(null);
  const [{ query }, setQuery] = useQueryParams();
  const [value, setValue] = React10.useState((query == null ? void 0 : query._q) || "");
  const [isOpen, setIsOpen] = React10.useState(!!value);
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const handleToggle = () => setIsOpen((prev) => !prev);
  React10.useLayoutEffect(() => {
    if (isOpen && inputRef.current) {
      inputRef.current.focus();
    }
  }, [
    isOpen
  ]);
  const handleClear = () => {
    setValue("");
    setQuery({
      _q: ""
    }, "remove");
  };
  const handleSubmit = (e) => {
    e.preventDefault();
    if (value) {
      if (trackedEvent) {
        trackUsage(trackedEvent, trackedEventDetails);
      }
      setQuery({
        _q: encodeURIComponent(value),
        page: 1
      });
    } else {
      handleToggle();
      setQuery({
        _q: ""
      }, "remove");
    }
  };
  if (isOpen) {
    return (0, import_jsx_runtime.jsx)(SearchForm, {
      onSubmit: handleSubmit,
      children: (0, import_jsx_runtime.jsx)(Searchbar, {
        ref: inputRef,
        name: "search",
        onChange: (e) => setValue(e.target.value),
        value,
        clearLabel: formatMessage({
          id: "clearLabel",
          defaultMessage: "Clear"
        }),
        onClear: handleClear,
        placeholder,
        children: label
      })
    });
  }
  return (0, import_jsx_runtime.jsx)(IconButton, {
    ref: iconButtonRef,
    disabled,
    label: formatMessage({
      id: "global.search",
      defaultMessage: "Search"
    }),
    onClick: handleToggle,
    children: (0, import_jsx_runtime.jsx)(ForwardRef$V, {})
  });
};
var [TableProvider, useTable] = createContext("Table");
var Root = ({ children, defaultSelectedRows, footer, headers = [], isLoading = false, onSelectedRowsChange, rows = [], selectedRows: selectedRowsProps }) => {
  const [selectedRows = [], setSelectedRows] = useControllableState({
    prop: selectedRowsProps,
    defaultProp: defaultSelectedRows,
    onChange: onSelectedRowsChange
  });
  const [hasHeaderCheckbox, setHasHeaderCheckbox] = React10.useState(false);
  const rowCount = rows.length + 1;
  const colCount = hasHeaderCheckbox ? headers.length + 1 : headers.length;
  const selectRow = (row) => {
    if (Array.isArray(row)) {
      setSelectedRows(row);
    } else {
      setSelectedRows((prev = []) => {
        const currentRowIndex = prev.findIndex((r) => r.id === row.id);
        if (currentRowIndex > -1) {
          return prev.toSpliced(currentRowIndex, 1);
        }
        return [
          ...prev,
          row
        ];
      });
    }
  };
  return (0, import_jsx_runtime.jsx)(TableProvider, {
    colCount,
    hasHeaderCheckbox,
    setHasHeaderCheckbox,
    footer,
    headers,
    isLoading,
    rowCount,
    rows,
    selectedRows,
    selectRow,
    children
  });
};
var Content = ({ children }) => {
  const rowCount = useTable("Content", (state) => state.rowCount);
  const colCount = useTable("Content", (state) => state.colCount);
  const footer = useTable("Content", (state) => state.footer);
  return (0, import_jsx_runtime.jsx)(Table, {
    rowCount,
    colCount,
    footer,
    children
  });
};
var Head = ({ children }) => {
  return (0, import_jsx_runtime.jsx)(Thead, {
    children: (0, import_jsx_runtime.jsx)(Tr, {
      children
    })
  });
};
var HeaderCell = ({ name, label, sortable }) => {
  const [{ query }, setQuery] = useQueryParams();
  const sort = (query == null ? void 0 : query.sort) ?? "";
  const [sortBy, sortOrder] = sort.split(":");
  const { formatMessage } = useIntl();
  const isSorted = sortBy === name;
  const sortLabel = formatMessage({
    id: "components.TableHeader.sort",
    defaultMessage: "Sort on {label}"
  }, {
    label
  });
  const handleClickSort = () => {
    if (sortable) {
      setQuery({
        sort: `${name}:${isSorted && sortOrder === "ASC" ? "DESC" : "ASC"}`
      });
    }
  };
  return (0, import_jsx_runtime.jsx)(Th, {
    action: isSorted && sortable && (0, import_jsx_runtime.jsx)(IconButton, {
      label: sortLabel,
      onClick: handleClickSort,
      variant: "ghost",
      children: (0, import_jsx_runtime.jsx)(SortIcon, {
        $isUp: sortOrder === "ASC"
      })
    }),
    children: (0, import_jsx_runtime.jsx)(TooltipImpl, {
      label: sortable ? sortLabel : label,
      children: (0, import_jsx_runtime.jsx)(Typography, {
        textColor: "neutral600",
        tag: !isSorted && sortable ? "button" : "span",
        onClick: handleClickSort,
        variant: "sigma",
        children: label
      })
    })
  });
};
var SortIcon = dt(ForwardRef$4N)`
  transform: ${({ $isUp }) => `rotate(${$isUp ? "180" : "0"}deg)`};
`;
var ActionBar = ({ children }) => {
  const { formatMessage } = useIntl();
  const selectedRows = useTable("ActionBar", (state) => state.selectedRows);
  if (selectedRows.length === 0)
    return null;
  return (0, import_jsx_runtime.jsxs)(Flex, {
    gap: 2,
    children: [
      (0, import_jsx_runtime.jsx)(Typography, {
        variant: "omega",
        textColor: "neutral500",
        children: formatMessage({
          id: "content-manager.components.TableDelete.label",
          defaultMessage: "{number, plural, one {# row} other {# rows}} selected"
        }, {
          number: selectedRows.length
        })
      }),
      children
    ]
  });
};
var HeaderCheckboxCell = () => {
  const rows = useTable("HeaderCheckboxCell", (state) => state.rows);
  const selectedRows = useTable("HeaderCheckboxCell", (state) => state.selectedRows);
  const selectRow = useTable("HeaderCheckboxCell", (state) => state.selectRow);
  const setHasHeaderCheckbox = useTable("HeaderCheckboxCell", (state) => state.setHasHeaderCheckbox);
  const { formatMessage } = useIntl();
  const areAllEntriesSelected = selectedRows.length === rows.length && rows.length > 0;
  const isIndeterminate = !areAllEntriesSelected && selectedRows.length > 0;
  React10.useEffect(() => {
    setHasHeaderCheckbox(true);
    return () => setHasHeaderCheckbox(false);
  }, [
    setHasHeaderCheckbox
  ]);
  const handleSelectAll = () => {
    if (!areAllEntriesSelected) {
      selectRow(rows);
    } else {
      selectRow([]);
    }
  };
  return (0, import_jsx_runtime.jsx)(Th, {
    children: (0, import_jsx_runtime.jsx)(CheckboxImpl, {
      "aria-label": formatMessage({
        id: "global.select-all-entries",
        defaultMessage: "Select all entries"
      }),
      disabled: rows.length === 0,
      checked: isIndeterminate ? "indeterminate" : areAllEntriesSelected,
      onCheckedChange: handleSelectAll
    })
  });
};
var Empty = (props) => {
  const { formatMessage } = useIntl();
  const rows = useTable("Empty", (state) => state.rows);
  const isLoading = useTable("Empty", (state) => state.isLoading);
  const colCount = useTable("Empty", (state) => state.colCount);
  if (rows.length > 0 || isLoading) {
    return null;
  }
  return (0, import_jsx_runtime.jsx)(Tbody, {
    children: (0, import_jsx_runtime.jsx)(Tr, {
      children: (0, import_jsx_runtime.jsx)(Td, {
        colSpan: colCount,
        children: (0, import_jsx_runtime.jsx)(EmptyStateLayout, {
          content: formatMessage({
            id: "app.components.EmptyStateLayout.content-document",
            defaultMessage: "No content found"
          }),
          hasRadius: true,
          icon: (0, import_jsx_runtime.jsx)(ForwardRef$J, {
            width: "16rem"
          }),
          ...props
        })
      })
    })
  });
};
var Loading = ({ children = "Loading content" }) => {
  const isLoading = useTable("Loading", (state) => state.isLoading);
  const colCount = useTable("Loading", (state) => state.colCount);
  if (!isLoading) {
    return null;
  }
  return (0, import_jsx_runtime.jsx)(Tbody, {
    children: (0, import_jsx_runtime.jsx)(Tr, {
      children: (0, import_jsx_runtime.jsx)(Td, {
        colSpan: colCount,
        children: (0, import_jsx_runtime.jsx)(Flex, {
          justifyContent: "center",
          padding: 11,
          background: "neutral0",
          children: (0, import_jsx_runtime.jsx)(Loader, {
            children
          })
        })
      })
    })
  });
};
var Body = ({ children }) => {
  const isLoading = useTable("Body", (state) => state.isLoading);
  const rows = useTable("Body", (state) => state.rows);
  if (isLoading || rows.length === 0) {
    return null;
  }
  return (0, import_jsx_runtime.jsx)(Tbody, {
    children
  });
};
var Row = (props) => {
  return (0, import_jsx_runtime.jsx)(Tr, {
    ...props
  });
};
var Cell = (props) => {
  return (0, import_jsx_runtime.jsx)(Td, {
    ...props
  });
};
var CheckboxCell = ({ id, ...props }) => {
  const rows = useTable("CheckboxCell", (state) => state.rows);
  const selectedRows = useTable("CheckboxCell", (state) => state.selectedRows);
  const selectRow = useTable("CheckboxCell", (state) => state.selectRow);
  const { formatMessage } = useIntl();
  const handleSelectRow = () => {
    selectRow(rows.find((row) => row.id === id));
  };
  const isChecked = selectedRows.findIndex((row) => row.id === id) > -1;
  return (0, import_jsx_runtime.jsx)(Cell, {
    ...props,
    onClick: (e) => e.stopPropagation(),
    children: (0, import_jsx_runtime.jsx)(CheckboxImpl, {
      "aria-label": formatMessage({
        id: "app.component.table.select.one-entry",
        defaultMessage: `Select {target}`
      }, {
        target: id
      }),
      disabled: rows.length === 0,
      checked: isChecked,
      onCheckedChange: handleSelectRow
    })
  });
};
var Table2 = {
  Root,
  Content,
  ActionBar,
  Head,
  HeaderCell,
  HeaderCheckboxCell,
  Body,
  CheckboxCell,
  Cell,
  Row,
  Loading,
  Empty
};
var ContentBox = ({ title, subtitle, icon, iconBackground, endAction, titleEllipsis = false }) => {
  if (title && title.length > 70 && titleEllipsis) {
    title = `${title.substring(0, 70)}...`;
  }
  return (0, import_jsx_runtime.jsxs)(Flex, {
    shadow: "tableShadow",
    hasRadius: true,
    padding: 6,
    background: "neutral0",
    children: [
      (0, import_jsx_runtime.jsx)(IconWrapper, {
        background: iconBackground,
        hasRadius: true,
        padding: 3,
        children: icon
      }),
      (0, import_jsx_runtime.jsxs)(Flex, {
        direction: "column",
        alignItems: "stretch",
        gap: endAction ? 0 : 1,
        children: [
          (0, import_jsx_runtime.jsxs)(Flex, {
            children: [
              (0, import_jsx_runtime.jsx)(TypographyWordBreak, {
                fontWeight: "semiBold",
                variant: "pi",
                children: title
              }),
              endAction
            ]
          }),
          (0, import_jsx_runtime.jsx)(Typography, {
            textColor: "neutral600",
            children: subtitle
          })
        ]
      })
    ]
  });
};
var IconWrapper = dt(Flex)`
  margin-right: ${({ theme }) => theme.spaces[6]};

  svg {
    width: 3.2rem;
    height: 3.2rem;
  }
`;
var TypographyWordBreak = dt(Typography)`
  color: ${({ theme }) => theme.colors.neutral800};
  word-break: break-all;
`;
function useInjectReducer(namespace, reducer3) {
  const store = useTypedStore();
  (0, import_react10.useEffect)(() => {
    store.injectReducer(namespace, reducer3);
  }, [
    store,
    namespace,
    reducer3
  ]);
}
var useFetchClient = () => {
  const controller = React10.useRef(null);
  if (controller.current === null) {
    controller.current = new AbortController();
  }
  React10.useEffect(() => {
    return () => {
      controller.current.abort();
    };
  }, []);
  return React10.useMemo(() => getFetchClient({
    signal: controller.current.signal
  }), []);
};
var usersService = adminApi.enhanceEndpoints({
  addTagTypes: [
    "LicenseLimits",
    "User",
    "Role",
    "RolePermissions"
  ]
}).injectEndpoints({
  endpoints: (builder) => ({
    /**
    * users
    */
    createUser: builder.mutation({
      query: (body) => ({
        url: "/admin/users",
        method: "POST",
        data: body
      }),
      transformResponse: (response) => response.data,
      invalidatesTags: [
        "LicenseLimits",
        {
          type: "User",
          id: "LIST"
        }
      ]
    }),
    updateUser: builder.mutation({
      query: ({ id, ...body }) => ({
        url: `/admin/users/${id}`,
        method: "PUT",
        data: body
      }),
      invalidatesTags: (_res, _err, { id }) => [
        {
          type: "User",
          id
        },
        {
          type: "User",
          id: "LIST"
        }
      ]
    }),
    getUsers: builder.query({
      query: ({ id, ...params } = {}) => ({
        url: `/admin/users/${id ?? ""}`,
        method: "GET",
        config: {
          params
        }
      }),
      transformResponse: (res) => {
        let users = [];
        if (res.data) {
          if ("results" in res.data) {
            if (Array.isArray(res.data.results)) {
              users = res.data.results;
            }
          } else {
            users = [
              res.data
            ];
          }
        }
        return {
          users,
          pagination: "pagination" in res.data ? res.data.pagination : null
        };
      },
      providesTags: (res, _err, arg) => {
        if (typeof arg === "object" && "id" in arg) {
          return [
            {
              type: "User",
              id: arg.id
            }
          ];
        } else {
          return [
            ...(res == null ? void 0 : res.users.map(({ id }) => ({
              type: "User",
              id
            }))) ?? [],
            {
              type: "User",
              id: "LIST"
            }
          ];
        }
      }
    }),
    deleteManyUsers: builder.mutation({
      query: (body) => ({
        url: "/admin/users/batch-delete",
        method: "POST",
        data: body
      }),
      transformResponse: (res) => res.data,
      invalidatesTags: [
        "LicenseLimits",
        {
          type: "User",
          id: "LIST"
        }
      ]
    }),
    /**
    * roles
    */
    createRole: builder.mutation({
      query: (body) => ({
        url: "/admin/roles",
        method: "POST",
        data: body
      }),
      transformResponse: (res) => res.data,
      invalidatesTags: [
        {
          type: "Role",
          id: "LIST"
        }
      ]
    }),
    getRoles: builder.query({
      query: ({ id, ...params } = {}) => ({
        url: `/admin/roles/${id ?? ""}`,
        method: "GET",
        config: {
          params
        }
      }),
      transformResponse: (res) => {
        let roles = [];
        if (res.data) {
          if (Array.isArray(res.data)) {
            roles = res.data;
          } else {
            roles = [
              res.data
            ];
          }
        }
        return roles;
      },
      providesTags: (res, _err, arg) => {
        if (typeof arg === "object" && "id" in arg) {
          return [
            {
              type: "Role",
              id: arg.id
            }
          ];
        } else {
          return [
            ...(res == null ? void 0 : res.map(({ id }) => ({
              type: "Role",
              id
            }))) ?? [],
            {
              type: "Role",
              id: "LIST"
            }
          ];
        }
      }
    }),
    updateRole: builder.mutation({
      query: ({ id, ...body }) => ({
        url: `/admin/roles/${id}`,
        method: "PUT",
        data: body
      }),
      transformResponse: (res) => res.data,
      invalidatesTags: (_res, _err, { id }) => [
        {
          type: "Role",
          id
        }
      ]
    }),
    getRolePermissions: builder.query({
      query: ({ id, ...params }) => ({
        url: `/admin/roles/${id}/permissions`,
        method: "GET",
        config: {
          params
        }
      }),
      transformResponse: (res) => res.data,
      providesTags: (_res, _err, { id }) => [
        {
          type: "RolePermissions",
          id
        }
      ]
    }),
    updateRolePermissions: builder.mutation({
      query: ({ id, ...body }) => ({
        url: `/admin/roles/${id}/permissions`,
        method: "PUT",
        data: body
      }),
      transformResponse: (res) => res.data,
      invalidatesTags: (_res, _err, { id }) => [
        {
          type: "RolePermissions",
          id
        }
      ]
    }),
    /**
    * Permissions
    */
    getRolePermissionLayout: builder.query({
      query: (params) => ({
        url: "/admin/permissions",
        method: "GET",
        config: {
          params
        }
      }),
      transformResponse: (res) => res.data
    })
  }),
  overrideExisting: false
});
var { useCreateUserMutation, useGetUsersQuery, useUpdateUserMutation, useDeleteManyUsersMutation, useGetRolesQuery, useCreateRoleMutation, useUpdateRoleMutation, useGetRolePermissionsQuery, useGetRolePermissionLayoutQuery, useUpdateRolePermissionsMutation } = usersService;
var useAdminUsers = useGetUsersQuery;

export {
  require_browser,
  require_merge,
  require_pick,
  _setPrototypeOf,
  _inheritsLoose,
  useQueryClient,
  useMutation,
  useQuery,
  useQueries,
  useEnterprise,
  generateNKeysBetween,
  require_omit,
  useFormikContext,
  useFormik,
  Formik,
  Form,
  require_debounce,
  require_throttle,
  constants,
  img,
  SETTINGS_LINKS_CE,
  useHistory,
  BackButton,
  useClipboard,
  useElementOnScreen,
  Layouts,
  useForm,
  Form2,
  getYupValidationErrors,
  useField,
  Blocker,
  useFocusInputField,
  MemoizedStringInput,
  MemoizedInputRenderer,
  Logo,
  Column,
  LayoutContent,
  UnauthenticatedLayout,
  errorsTrads,
  Login,
  NpsSurvey,
  getBasename,
  renderAdmin,
  ConfirmDialog,
  DescriptionComponentRenderer,
  Filters,
  Pagination2 as Pagination,
  SearchInput,
  useTable,
  Table2 as Table,
  ContentBox,
  useInjectReducer,
  useFetchClient,
  useCreateUserMutation,
  useUpdateUserMutation,
  useDeleteManyUsersMutation,
  useGetRolesQuery,
  useCreateRoleMutation,
  useUpdateRoleMutation,
  useGetRolePermissionsQuery,
  useGetRolePermissionLayoutQuery,
  useUpdateRolePermissionsMutation,
  useAdminUsers
};
//# sourceMappingURL=chunk-YJDGMQUR.js.map
